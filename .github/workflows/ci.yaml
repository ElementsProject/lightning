---
name: Continuous Integration
on:
  push:
    branches:
      - "master"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Makes the upload-artifact work more reliably at the cost
  # of a bit of compile time.
  RUST_PROFILE: release
  SLOW_MACHINE: 1
  CI_SERVER_URL: "http://35.239.136.52:3170"

jobs:
  compile:
    name: Compile CLN ${{ matrix.cfg }}
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    strategy:
      fail-fast: true
      matrix:
        include:
          - CFG: compile-gcc
            VALGRIND: 1
            COMPILER: gcc
          - CFG: compile-gcc-O3
            VALGRIND: 1
            COMPILER: gcc
            COPTFLAGS_VAR: COPTFLAGS="-O3 -Werror"
          # While we're at it let's try to compile with clang
          - CFG: compile-clang
            VALGRIND: 1
            COMPILER: clang
          - CFG: compile-clang-sanitizers
            COMPILER: clang
            ASAN: 1
            UBSAN: 1
            VALGRIND: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          bash -x .github/scripts/setup.sh

      - name: Build
        env:
          COMPILER: ${{ matrix.COMPILER }}
          ASAN: ${{ matrix.ASAN }}
          UBSAN: ${{ matrix.UBSAN }}
          VALGRIND: ${{ matrix.VALGRIND }}
          COMPAT: 1
          CFG: ${{ matrix.CFG }}
        run: |
          set -e
          pip3 install --user pip wheel poetry
          poetry export -o requirements.txt --with dev --without-hashes
          python3 -m pip install -r requirements.txt
          ./configure --enable-debugbuild CC="$COMPILER" ${{ matrix.COPTFLAGS_VAR }}

          make -j $(nproc) testpack.tar.bz2

          # Rename now so we don't clash
          mv testpack.tar.bz2 cln-${CFG}.tar.bz2
      - name: Check rust packages
        run: cargo test --all
      - uses: actions/upload-artifact@v4
        with:
          name: cln-${{ matrix.CFG }}.tar.bz2
          path: cln-${{ matrix.CFG }}.tar.bz2

  integration:
    name: Test CLN ${{ matrix.name }}
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    env:
      RUST_PROFILE: release  # Has to match the one in the compile step
      PYTEST_OPTS: --timeout=1200 --force-flaky
    needs:
      - compile
    strategy:
      fail-fast: true
      matrix:
        include:
          - NAME: dual-fund
            CFG: compile-gcc
            TEST_DB_PROVIDER: sqlite3
            COMPILER: gcc
            TEST_NETWORK: regtest
            EXPERIMENTAL_DUAL_FUND: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip3 install --user pip wheel poetry
          poetry install

      - name: Install bitcoind
        env:
          TEST_NETWORK: ${{ matrix.TEST_NETWORK }}
        run: .github/scripts/install-bitcoind.sh

      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: cln-${{ matrix.CFG }}.tar.bz2

      - name: Unpack pre-built CLN
        env:
          CFG: ${{ matrix.CFG }}
        run: |
          tar -xaf cln-${CFG}.tar.bz2

      - name: Switch network
        if: ${{ matrix.TEST_NETWORK == 'liquid-regtest' }}
        run: |
          # Loading the network from config.vars rather than the envvar is a terrible idea...
          sed -i 's/TEST_NETWORK=regtest/TEST_NETWORK=liquid-regtest/g' config.vars
          cat config.vars

      - name: Test
        env:
          COMPILER: ${{ matrix.COMPILER }}
          EXPERIMENTAL_DUAL_FUND: ${{ matrix.EXPERIMENTAL_DUAL_FUND }}
          EXPERIMENTAL_SPLICING: ${{ matrix.EXPERIMENTAL_SPLICING }}
          COMPAT: 1
          CFG: ${{ matrix.CFG }}
          SLOW_MACHINE: 1
          PYTEST_PAR: 10
          TEST_DEBUG: 1
          TEST_DB_PROVIDER: ${{ matrix.TEST_DB_PROVIDER }}
          TEST_NETWORK: ${{ matrix.TEST_NETWORK }}
          LIGHTNINGD_POSTGRES_NO_VACUUM: 1
        run: |
          env
          cat config.vars
          (sleep 3600; top -b -n 1; ps auxwww) &
          VALGRIND=0 poetry run pytest tests/ -vvv -n ${PYTEST_PAR} ${PYTEST_OPTS}

