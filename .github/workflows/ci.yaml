---
name: Continuous Integration
on:
  push:
    branches:
      - "master"
  pull_request:

jobs:
  prebuild:
    name: Pre-build checks
    runs-on: ubuntu-20.04
    env:
      RUST: 1
      COMPAT: 1
      BOLTDIR: /tmp/bolts
    strategy:
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          bash -x .github/scripts/setup.sh
          pip install -U pip wheel poetry
          # Export and then use pip to install into the current env
          poetry export -o /tmp/requirements.txt --without-hashes --with dev
          pip install -r /tmp/requirements.txt
          # We're going to check BOLT quotes, so get the latest version
          git clone https://github.com/lightning/bolts.git ../${BOLTDIR}
      - name: Configure
        run: ./configure
      - name: Check source
        run: make -j 4 check-source
      - name: Check units
        run: make -j 4 check-units
      - name: Check Generated Files have been updated
        run: make -j 4 check-gen-updated
      - name: Check docs
        run: make -j 4 check-doc
      - name: Check install
        run: make -j 4 installcheck

  compile:
    name: Compile CLN ${{ matrix.cfg }}
    runs-on: ubuntu-20.04
    env:
      COMPAT: 1
    needs:
      - prebuild
    strategy:
      fail-fast: true
      matrix:
        include:
          - CFG: gcc-dev1-exp1
            DEVELOPER: 1
            EXPERIMENTAL_FEATURES: 1
            COMPILER: gcc
          - CFG: gcc-dev1-exp0
            DEVELOPER: 1
            EXPERIMENTAL_FEATURES: 0
            COMPILER: gcc
          - CFG: gcc-dev0-exp1
            DEVELOPER: 0
            EXPERIMENTAL_FEATURES: 1
            COMPILER: gcc
          - CFG: gcc-dev0-exp0
            DEVELOPER: 0
            EXPERIMENTAL_FEATURES: 0
            COMPILER: gcc
          # While we're at it let's try to compile with clang
          - CFG: clang-dev1-exp1
            DEVELOPER: 1
            EXPERIMENTAL_FEATURES: 1
            COMPILER: clang
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          bash -x .github/scripts/setup.sh

      - name: Build
        env:
          VALGRIND: ${{ matrix.VALGRIND }}
          DEVELOPER: ${{ matrix.DEVELOPER }}
          EXPERIMENTAL_FEATURES: ${{ matrix.EXPERIMENTAL_FEATURES }}
          COMPILER: ${{ matrix.COMPILER }}
          COMPAT: 1
          CFG: ${{ matrix.CFG }}
        run: |
          set -e
          export SLOW_MACHINE=1

          pip3 install --user pip wheel poetry
          poetry export -o requirements.txt --with dev --without-hashes
          python3 -m pip install -r requirements.txt
          ./configure CC="$COMPILER"

          make -j $(nproc) testpack.tar.bz2

          # Rename now so we don't clash
          mv testpack.tar cln-${CFG}.tar
      - uses: actions/upload-artifact@v3
        with:
          name: cln-${{ matrix.CFG }}.tar
          path: cln-${{ matrix.CFG }}.tar

  integration:
    name: Test CLN ${{ matrix.cfg }}
    runs-on: ubuntu-20.04
    env:
      COMPAT: 1
    needs:
      - compile
    strategy:
      fail-fast: true
      matrix:
        include:
          - CFG: gcc-dev1-exp1
            DEVELOPER: 1
            EXPERIMENTAL_FEATURES: 1
            TEST_DB_PROVIDER: sqlite3
            COMPILER: gcc
          - CFG: gcc-dev1-exp0
            DEVELOPER: 1
            EXPERIMENTAL_FEATURES: 0
            TEST_DB_PROVIDER: sqlite3
            COMPILER: gcc
          - CFG: gcc-dev0-exp1
            DEVELOPER: 0
            EXPERIMENTAL_FEATURES: 1
            TEST_DB_PROVIDER: sqlite3
            COMPILER: gcc
          - CFG: gcc-dev0-exp0
            DEVELOPER: 0
            EXPERIMENTAL_FEATURES: 0
            TEST_DB_PROVIDER: sqlite3
            COMPILER: gcc
          # While we're at it let's try to compile with clang
          - CFG: gcc-dev1-exp1
            DEVELOPER: 1
            EXPERIMENTAL_FEATURES: 1
            TEST_DB_PROVIDER: sqlite3
            COMPILER: clang
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          echo Nothing to do


      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: cln-${{ matrix.CFG }}.tar

      - name: Test
        env:
          VALGRIND: ${{ matrix.VALGRIND }}
          DEVELOPER: ${{ matrix.DEVELOPER }}
          EXPERIMENTAL_FEATURES: ${{ matrix.EXPERIMENTAL_FEATURES }}
          COMPILER: ${{ matrix.COMPILER }}
          COMPAT: 1
          CFG: ${{ matrix.CFG }}
          SLOW_MACHINE: 1
          PYTEST_PAR: 10
        run: |
          set -e
          tar -xvf cln-${CFG}.tar

          pip3 install --user pip wheel poetry
          poetry export -o requirements.txt --with dev --without-hashes
          python3 -m pip install -r requirements.txt

          poetry run make pytest
