{
  "methods": {
    "AddGossip": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "message": {
            "description": "The raw, hex-encoded, gossip message to add to the local gossip view.",
            "type": "hex"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {},
        "type": "object"
      }
    },
    "AutoCleanInvoice": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "cycle_seconds": {
            "description": "The interval (in seconds) between cleaning expired invoices",
            "type": "u64"
          },
          "expired_by": {
            "description": "How long an invoice must be expired (seconds) before we delete it.",
            "type": "u64"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": true,
        "else": {
          "additionalProperties": false,
          "properties": {
            "enabled": {}
          }
        },
        "if": {
          "properties": {
            "enabled": {
              "enum": [
                true
              ],
              "type": "boolean"
            }
          }
        },
        "properties": {
          "enabled": {
            "description": "whether invoice autocleaning is active",
            "type": "boolean"
          }
        },
        "required": [
          "enabled"
        ],
        "then": {
          "additionalProperties": false,
          "properties": {
            "cycle_seconds": {
              "description": "how long an invoice must be expired (seconds) before we delete it",
              "type": "u64"
            },
            "enabled": {},
            "expired_by": {
              "description": "how long an invoice must be expired (seconds) before we delete it",
              "type": "u64"
            }
          },
          "required": [
            "expired_by",
            "cycle_seconds"
          ]
        },
        "type": "object"
      }
    },
    "CheckMessage": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "message": {
            "description": "Message to be checked against the signature.",
            "type": "string"
          },
          "pubkey": {
            "description": "The Zbase32 encoded signature to verify.",
            "type": "pubkey"
          },
          "zbase": {
            "description": "The Zbase32 encoded signature to verify.",
            "type": "string"
          }
        },
        "required": [
          "message",
          "zbase"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "pubkey": {
            "description": "the *pubkey* parameter, or the pubkey found by looking for known nodes",
            "type": "pubkey"
          },
          "verified": {
            "description": "whether the signature was valid",
            "enum": [
              true
            ],
            "type": "boolean"
          }
        },
        "required": [
          "verified",
          "pubkey"
        ],
        "type": "object"
      }
    },
    "Close": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "destination": {
            "description": "",
            "type": "string"
          },
          "fee_negotiation_step": {
            "description": "",
            "type": "string"
          },
          "feerange": {
            "description": "",
            "items": {
              "type": "feerate"
            },
            "type": "array"
          },
          "force_lease_closed": {
            "description": "",
            "type": "boolean"
          },
          "id": {
            "description": "peer id, channel id or short_channel_id",
            "type": "string"
          },
          "unilateraltimeout": {
            "description": "",
            "type": "u32"
          },
          "wrong_funding": {
            "description": "",
            "type": "outpoint"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "else": {
          "additionalProperties": false,
          "properties": {
            "type": {}
          }
        },
        "if": {
          "properties": {
            "type": {
              "enum": [
                "mutual",
                "unilateral"
              ],
              "type": "string"
            }
          }
        },
        "properties": {
          "type": {
            "description": "Whether we successfully negotiated a mutual close, closed without them, or discarded not-yet-opened channel",
            "enum": [
              "mutual",
              "unilateral",
              "unopened"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "then": {
          "additionalProperties": false,
          "properties": {
            "tx": {
              "description": "the raw bitcoin transaction used to close the channel (if it was open)",
              "type": "hex"
            },
            "txid": {
              "description": "the transaction id of the *tx* field",
              "type": "txid"
            },
            "type": {}
          },
          "required": [
            "tx",
            "txid"
          ]
        },
        "type": "object"
      }
    },
    "Connect": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "host": {
            "description": "The hostname of the node.",
            "type": "string"
          },
          "id": {
            "description": "",
            "type": "string"
          },
          "port": {
            "description": "Port to try connecting to",
            "type": "u16"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "address": {
            "additionalProperties": true,
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "enum": [
                        "local socket"
                      ],
                      "type": "string"
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "properties": {
                    "socket": {
                      "description": "socket filename",
                      "type": "string"
                    },
                    "type": {}
                  },
                  "required": [
                    "socket"
                  ]
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "enum": [
                        "ipv4",
                        "ipv6",
                        "torv2",
                        "torv3"
                      ],
                      "type": "string"
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "properties": {
                    "address": {
                      "description": "address in expected format for **type**",
                      "type": "string"
                    },
                    "port": {
                      "description": "port number",
                      "type": "u16"
                    },
                    "type": {}
                  },
                  "required": [
                    "address",
                    "port"
                  ]
                }
              }
            ],
            "description": "Address information (mainly useful if **direction** is *out*)",
            "properties": {
              "type": {
                "description": "Type of connection (*torv2*/*torv3* only if **direction** is *out*)",
                "enum": [
                  "local socket",
                  "ipv4",
                  "ipv6",
                  "torv2",
                  "torv3"
                ],
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          "direction": {
            "description": "Whether they initiated connection or we did",
            "enum": [
              "in",
              "out"
            ],
            "type": "string"
          },
          "features": {
            "description": "BOLT 9 features bitmap offered by peer",
            "type": "hex"
          },
          "id": {
            "description": "the peer we connected to",
            "type": "pubkey"
          }
        },
        "required": [
          "id",
          "features",
          "direction",
          "address"
        ],
        "type": "object"
      }
    },
    "CreateInvoice": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "invstring": {
            "description": "",
            "type": "string"
          },
          "label": {
            "description": "",
            "type": "string"
          },
          "preimage": {
            "description": "",
            "type": "hex"
          }
        },
        "required": [
          "invstring",
          "label",
          "preimage"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "amount_msat": {
            "description": "The amount of the invoice (if it has one)",
            "type": "msat"
          },
          "amount_received_msat": {
            "description": "Amount actually received (**status** *paid* only)",
            "type": "msat"
          },
          "bolt11": {
            "description": "the bolt11 string (always present unless **bolt12** is)",
            "type": "string"
          },
          "bolt12": {
            "description": "the bolt12 string instead of **bolt11** (**experimental-offers** only)",
            "type": "string"
          },
          "description": {
            "description": "Description extracted from **bolt11** or **bolt12**",
            "type": "string"
          },
          "expires_at": {
            "description": "UNIX timestamp of when invoice expires (or expired)",
            "type": "u64"
          },
          "invreq_payer_note": {
            "description": "the optional *invreq_payer_note* from invoice_request which created this invoice (**experimental-offers** only).",
            "type": "string"
          },
          "label": {
            "description": "the label for the invoice",
            "type": "string"
          },
          "local_offer_id": {
            "description": "the *id* of our offer which created this invoice (**experimental-offers** only).",
            "maxLength": 64,
            "minLength": 64,
            "type": "hex"
          },
          "paid_at": {
            "description": "UNIX timestamp of when invoice was paid (**status** *paid* only)",
            "type": "u64"
          },
          "pay_index": {
            "description": "Incrementing id for when this was paid (**status** *paid* only)",
            "type": "u64"
          },
          "payment_hash": {
            "description": "the hash of the *payment_preimage* which will prove payment",
            "maxLength": 64,
            "minLength": 64,
            "type": "hash"
          },
          "payment_preimage": {
            "description": "the proof of payment: SHA256 of this **payment_hash**",
            "maxLength": 64,
            "minLength": 64,
            "type": "secret"
          },
          "status": {
            "description": "Whether it has been paid, or can no longer be paid",
            "enum": [
              "paid",
              "expired",
              "unpaid"
            ],
            "type": "string"
          }
        },
        "required": [
          "label",
          "payment_hash",
          "status",
          "description",
          "expires_at"
        ],
        "type": "object"
      }
    },
    "CreateOnion": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "assocdata": {
            "description": "",
            "type": "hex"
          },
          "hops": {
            "description": "",
            "items": {
              "additionalProperties": false,
              "properties": {
                "payload": {
                  "type": "hex"
                },
                "pubkey": {
                  "type": "pubkey"
                }
              },
              "required": [
                "pubkey",
                "payload"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "onion_size": {
            "type": "u16"
          },
          "session_key": {
            "type": "secret"
          }
        },
        "required": [
          "hops",
          "assocdata"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "onion": {
            "description": "the onion packet (*onion_size* bytes)",
            "type": "hex"
          },
          "shared_secrets": {
            "description": "one shared secret for each node in the *hops* parameter",
            "items": {
              "description": "the shared secret with this hop",
              "maxLength": 64,
              "minLength": 64,
              "type": "secret"
            },
            "type": "array"
          }
        },
        "required": [
          "onion",
          "shared_secrets"
        ],
        "type": "object"
      }
    },
    "Datastore": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "generation": {
            "description": "If specified, means that the update will fail if the previously-existing data is not exactly that generation. This allows for simple atomicity. This is only legal with mode \u201cmust-replace\u201d or \u201cmust-append\u201d.",
            "type": "u64"
          },
          "hex": {
            "description": "",
            "type": "hex"
          },
          "key": {
            "oneOf": [
              {
                "description": "key is an array of values (though a single value is treated as a one-element array), to form a heirarchy. Using the first element of the key as the plugin name (e.g. [ 'summary' ]) is recommended. A key can either have children or a value, never both: parents are created and removed automatically.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          },
          "mode": {
            "description": "",
            "enum": [
              "must-create",
              "must-replace",
              "create-or-replace",
              "must-append",
              "create-or-append"
            ],
            "type": "string"
          },
          "string": {
            "description": "",
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "generation": {
            "description": "The number of times this has been updated",
            "type": "u64"
          },
          "hex": {
            "description": "The hex data which has been added to the datastore",
            "type": "hex"
          },
          "key": {
            "items": {
              "description": "Part of the key added to the datastore",
              "type": "string"
            },
            "type": "array"
          },
          "string": {
            "description": "The data as a string, if it's valid utf-8",
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      }
    },
    "DelDatastore": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "generation": {
            "description": "If specified, means that the update will fail if the previously-existing data is not exactly that generation. This allows for simple atomicity. This is only legal with mode \u201cmust-replace\u201d or \u201cmust-append\u201d.",
            "type": "u64"
          },
          "key": {
            "oneOf": [
              {
                "description": "key is an array of values (though a single value is treated as a one-element array), to form a heirarchy. Using the first element of the key as the plugin name (e.g. [ 'summary' ]) is recommended. A key can either have children or a value, never both: parents are created and removed automatically.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "generation": {
            "description": "The number of times this has been updated",
            "type": "u64"
          },
          "hex": {
            "description": "The hex data which has removed from the datastore",
            "type": "hex"
          },
          "key": {
            "items": {
              "description": "Part of the key added to the datastore",
              "type": "string"
            },
            "type": "array"
          },
          "string": {
            "description": "The data as a string, if it's valid utf-8",
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      }
    },
    "DelExpiredInvoice": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "maxexpirytime": {
            "description": "",
            "type": "u64"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {},
        "required": [],
        "type": "object"
      }
    },
    "DelInvoice": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "desconly": {
            "type": "boolean"
          },
          "label": {
            "oneOf": [
              {
                "description": "",
                "type": "string"
              },
              {
                "description": "",
                "type": "integer"
              }
            ]
          },
          "status": {
            "enum": [
              "paid",
              "expired",
              "unpaid"
            ],
            "type": "string"
          }
        },
        "required": [
          "label",
          "status"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": true,
        "allOf": [
          {
            "else": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "amount_received_msat": {},
                "bolt11": {},
                "description": {},
                "expires_at": {},
                "label": {},
                "msatoshi": {},
                "msatoshi_received": {},
                "paid_at": {},
                "pay_index": {},
                "payment_hash": {},
                "payment_preimage": {},
                "status": {}
              },
              "required": [
                "bolt11"
              ]
            },
            "if": {
              "required": [
                "bolt12"
              ]
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "amount_received_msat": {},
                "bolt12": {},
                "description": {},
                "expires_at": {},
                "invreq_payer_note": {
                  "description": "the optional *invreq_payer_note* from invoice_request which created this invoice",
                  "type": "string"
                },
                "label": {},
                "local_offer_id": {
                  "description": "offer for which this invoice was created",
                  "type": "hex"
                },
                "msatoshi": {},
                "paid_at": {},
                "pay_index": {},
                "payment_hash": {},
                "payment_preimage": {},
                "status": {}
              },
              "required": []
            }
          },
          {
            "else": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "bolt11": {},
                "bolt12": {},
                "description": {},
                "expires_at": {},
                "invreq_payer_note": {},
                "label": {},
                "local_offer_id": {},
                "msatoshi": {},
                "pay_index": {},
                "payment_hash": {},
                "status": {}
              }
            },
            "if": {
              "properties": {
                "status": {
                  "enum": [
                    "paid"
                  ],
                  "type": "string"
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "amount_received_msat": {
                  "description": "how much was actually received",
                  "type": "msat"
                },
                "bolt11": {},
                "bolt12": {},
                "description": {},
                "expires_at": {},
                "invreq_payer_note": {},
                "label": {},
                "local_offer_id": {},
                "msatoshi": {},
                "msatoshi_received": {
                  "deprecated": "true"
                },
                "paid_at": {
                  "description": "UNIX timestamp of when payment was received",
                  "type": "u64"
                },
                "pay_index": {
                  "description": "unique index for this invoice payment",
                  "type": "u64"
                },
                "payment_hash": {},
                "payment_preimage": {
                  "description": "SHA256 of this is the *payment_hash* offered in the invoice",
                  "maxLength": 64,
                  "minLength": 64,
                  "type": "secret"
                },
                "status": {}
              },
              "required": [
                "pay_index",
                "amount_received_msat",
                "paid_at",
                "payment_preimage"
              ]
            }
          }
        ],
        "properties": {
          "amount_msat": {
            "description": "the amount required to pay this invoice",
            "type": "msat"
          },
          "bolt11": {
            "description": "BOLT11 string",
            "type": "string"
          },
          "bolt12": {
            "description": "BOLT12 string",
            "type": "string"
          },
          "description": {
            "description": "description used in the invoice",
            "type": "string"
          },
          "expires_at": {
            "description": "UNIX timestamp when invoice expires (or expired)",
            "type": "u64"
          },
          "label": {
            "description": "Unique label given at creation time",
            "type": "string"
          },
          "msatoshi": {
            "deprecated": "true"
          },
          "payment_hash": {
            "description": "the hash of the *payment_preimage* which will prove payment",
            "maxLength": 64,
            "minLength": 64,
            "type": "hash"
          },
          "status": {
            "description": "State of invoice",
            "enum": [
              "paid",
              "expired",
              "unpaid"
            ],
            "type": "string"
          }
        },
        "required": [
          "label",
          "payment_hash",
          "status",
          "expires_at"
        ],
        "type": "object"
      }
    },
    "Disconnect": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "force": {
            "type": "boolean"
          },
          "id": {
            "type": "pubkey"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {},
        "type": "object"
      }
    },
    "Feerates": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "style": {
            "enum": [
              "perkb",
              "perkw"
            ],
            "type": "string"
          }
        },
        "required": [
          "style"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "onchain_fee_estimates": {
            "additionalProperties": false,
            "properties": {
              "htlc_success_satoshis": {
                "description": "Estimated cost of typical HTLC fulfillment transaction",
                "type": "u64"
              },
              "htlc_timeout_satoshis": {
                "description": "Estimated cost of typical HTLC timeout transaction",
                "type": "u64"
              },
              "mutual_close_satoshis": {
                "description": "Estimated cost of typical channel close",
                "type": "u64"
              },
              "opening_channel_satoshis": {
                "description": "Estimated cost of typical channel open",
                "type": "u64"
              },
              "unilateral_close_satoshis": {
                "description": "Estimated cost of typical unilateral close (without HTLCs)",
                "type": "u64"
              }
            },
            "required": [
              "opening_channel_satoshis",
              "mutual_close_satoshis",
              "unilateral_close_satoshis",
              "htlc_timeout_satoshis",
              "htlc_success_satoshis"
            ],
            "type": "object"
          },
          "perkb": {
            "additionalProperties": false,
            "description": "If *style* parameter was perkb",
            "properties": {
              "delayed_to_us": {
                "description": "Feerate for returning unilateral close funds to our wallet",
                "type": "u32"
              },
              "htlc_resolution": {
                "description": "Feerate for returning unilateral close HTLC outputs to our wallet",
                "type": "u32"
              },
              "max_acceptable": {
                "description": "The largest feerate we will accept from remote negotiations.  If a peer attempts to set the feerate higher than this we will unilaterally close the channel (or simply forget it if it's not open yet).",
                "type": "u32"
              },
              "min_acceptable": {
                "description": "The smallest feerate that you can use, usually the minimum relayed feerate of the backend",
                "type": "u32"
              },
              "mutual_close": {
                "description": "Feerate to aim for in cooperative shutdown.  Note that since mutual close is a **negotiation**, the actual feerate used in mutual close will be somewhere between this and the corresponding mutual close feerate of the peer.",
                "type": "u32"
              },
              "opening": {
                "description": "Default feerate for lightning-fundchannel(7) and lightning-withdraw(7)",
                "type": "u32"
              },
              "penalty": {
                "description": "Feerate to start at when penalizing a cheat attempt",
                "type": "u32"
              },
              "unilateral_close": {
                "description": "Feerate for commitment_transaction in a live channel which we originally funded",
                "type": "u32"
              }
            },
            "required": [
              "min_acceptable",
              "max_acceptable"
            ],
            "type": "object"
          },
          "perkw": {
            "additionalProperties": false,
            "description": "If *style* parameter was perkw",
            "properties": {
              "delayed_to_us": {
                "description": "Feerate for returning unilateral close funds to our wallet",
                "type": "u32"
              },
              "htlc_resolution": {
                "description": "Feerate for returning unilateral close HTLC outputs to our wallet",
                "type": "u32"
              },
              "max_acceptable": {
                "description": "The largest feerate we will accept from remote negotiations.  If a peer attempts to set the feerate higher than this we will unilaterally close the channel (or simply forget it if it's not open yet).",
                "type": "u32"
              },
              "min_acceptable": {
                "description": "The smallest feerate that you can use, usually the minimum relayed feerate of the backend",
                "type": "u32"
              },
              "mutual_close": {
                "description": "Feerate to aim for in cooperative shutdown.  Note that since mutual close is a **negotiation**, the actual feerate used in mutual close will be somewhere between this and the corresponding mutual close feerate of the peer.",
                "type": "u32"
              },
              "opening": {
                "description": "Default feerate for lightning-fundchannel(7) and lightning-withdraw(7)",
                "type": "u32"
              },
              "penalty": {
                "description": "Feerate to start at when penalizing a cheat attempt",
                "type": "u32"
              },
              "unilateral_close": {
                "description": "Feerate for commitment_transaction in a live channel which we originally funded",
                "type": "u32"
              }
            },
            "required": [
              "min_acceptable",
              "max_acceptable"
            ],
            "type": "object"
          },
          "warning_missing_feerates": {
            "description": "Some fee estimates are missing",
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      }
    },
    "FundChannel": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "amount": {
            "type": "msat_or_all"
          },
          "announce": {
            "type": "boolean"
          },
          "close_to": {
            "type": "string"
          },
          "compact_lease": {
            "type": "string"
          },
          "feerate": {
            "type": "feerate"
          },
          "id": {
            "description": "id is the peer id obtained from connect.",
            "type": "pubkey"
          },
          "minconf": {
            "type": "u32"
          },
          "mindepth": {
            "description": "Number of confirmations required before we consider the channel active",
            "type": "u32"
          },
          "push_msat": {
            "type": "msat"
          },
          "request_amt": {
            "type": "msat"
          },
          "reserve": {
            "description": "The amount we want the peer to maintain on its side",
            "type": "msat"
          },
          "utxos": {
            "items": {
              "type": "outpoint"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "amount"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "channel_id": {
            "description": "The channel_id of the resulting channel",
            "maxLength": 64,
            "minLength": 64,
            "type": "hex"
          },
          "close_to": {
            "description": "The raw scriptPubkey which mutual close will go to; only present if *close_to* parameter was specified and peer supports `option_upfront_shutdown_script`",
            "type": "hex"
          },
          "mindepth": {
            "description": "Number of confirmations before we consider the channel active.",
            "type": "u32"
          },
          "outnum": {
            "description": "The 0-based output index showing which output funded the channel",
            "type": "u32"
          },
          "tx": {
            "description": "The raw transaction which funded the channel",
            "type": "hex"
          },
          "txid": {
            "description": "The txid of the transaction which funded the channel",
            "type": "txid"
          }
        },
        "required": [
          "tx",
          "txid",
          "outnum",
          "channel_id"
        ],
        "type": "object"
      }
    },
    "FundChannelCancel": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "id is the node id of the remote peer.",
            "type": "node_id"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "cancelled": {
            "description": "A message indicating it was cancelled by RPC",
            "type": "string"
          }
        },
        "required": [
          "cancelled"
        ],
        "type": "object"
      }
    },
    "FundChannelComplete": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "id is the node id of the remote peer.",
            "type": "node_id"
          },
          "psbt": {
            "description": "the transaction to use for funding (does not need to be signed but must be otherwise complete).",
            "type": "hex"
          }
        },
        "required": [
          "id",
          "psbt"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "channel_id": {
            "description": "The channel_id of the resulting channel",
            "maxLength": 64,
            "minLength": 64,
            "type": "hex"
          },
          "commitments_secured": {
            "description": "Indication that channel is safe to use",
            "enum": [
              true
            ],
            "type": "boolean"
          }
        },
        "required": [
          "channel_id",
          "commitments_secured"
        ],
        "type": "object"
      }
    },
    "FundChannelStart": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "amount": {
            "description": "",
            "type": "msat_or_all"
          },
          "announce": {
            "type": "boolean"
          },
          "close_to": {
            "description": "The raw scriptPubkey which mutual close will go to; only present if *close_to* parameter was specified and peer supports `option_upfront_shutdown_script`",
            "type": "hex"
          },
          "feerate": {
            "type": "feerate"
          },
          "id": {
            "description": "id is the node id of the remote peer.",
            "type": "node_id"
          },
          "push_msat": {
            "description": "A warning not to prematurely broadcast the funding transaction (always present!)",
            "type": "msat"
          }
        },
        "required": [
          "id",
          "amount"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "close_to": {
            "description": "The raw scriptPubkey which mutual close will go to; only present if *close_to* parameter was specified and peer supports `option_upfront_shutdown_script`",
            "type": "hex"
          },
          "funding_address": {
            "description": "The address to send funding to for the channel. DO NOT SEND COINS TO THIS ADDRESS YET.",
            "type": "string"
          },
          "mindepth": {
            "description": "Number of confirmations before we consider the channel active.",
            "type": "u32"
          },
          "scriptpubkey": {
            "description": "The raw scriptPubkey for the address",
            "type": "hex"
          },
          "warning_usage": {
            "description": "A warning not to prematurely broadcast the funding transaction (always present!)",
            "type": "string"
          }
        },
        "required": [
          "funding_address",
          "scriptpubkey",
          "warning_usage"
        ],
        "type": "object"
      }
    },
    "FundPsbt": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "excess_as_change": {
            "type": "boolean"
          },
          "feerate": {
            "type": "feerate"
          },
          "locktime": {
            "type": "u32"
          },
          "min_witness_weight": {
            "type": "u32"
          },
          "minconf": {
            "type": "u32"
          },
          "reserve": {
            "description": "reserve is a number: if non-zero number then reserveinputs is called (successfully, with exclusive true) on the returned PSBT for this number of blocks (default: 72).",
            "type": "u32"
          },
          "satoshi": {
            "type": "msat_or_all"
          },
          "startweight": {
            "type": "u32"
          }
        },
        "required": [
          "satoshi",
          "feerate",
          "startweight"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "change_outnum": {
            "description": "The 0-based output number where change was placed (only if parameter *excess_as_change* was true and there was sufficient funds)",
            "type": "u32"
          },
          "estimated_final_weight": {
            "description": "The estimated weight of the transaction once fully signed",
            "type": "u32"
          },
          "excess_msat": {
            "description": "The amount above *satoshi* which is available.  This could be zero, or dust; it will be zero if *change_outnum* is also returned",
            "type": "msat"
          },
          "feerate_per_kw": {
            "description": "The feerate used to create the PSBT, in satoshis-per-kiloweight",
            "type": "u32"
          },
          "psbt": {
            "description": "Unsigned PSBT which fulfills the parameters given",
            "type": "string"
          },
          "reservations": {
            "description": "If *reserve* was true or a non-zero number, just as per lightning-reserveinputs(7)",
            "items": {
              "additionalProperties": false,
              "properties": {
                "reserved": {
                  "description": "Whether this output is now reserved",
                  "enum": [
                    true
                  ],
                  "type": "boolean"
                },
                "reserved_to_block": {
                  "description": "The blockheight the reservation will expire",
                  "type": "u32"
                },
                "txid": {
                  "description": "The txid of the transaction",
                  "type": "txid"
                },
                "vout": {
                  "description": "The 0-based output number",
                  "type": "u32"
                },
                "was_reserved": {
                  "description": "Whether this output was previously reserved",
                  "enum": [
                    false
                  ],
                  "type": "boolean"
                }
              },
              "required": [
                "txid",
                "vout",
                "was_reserved",
                "reserved",
                "reserved_to_block"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "psbt",
          "feerate_per_kw",
          "estimated_final_weight",
          "excess_msat"
        ],
        "type": "object"
      }
    },
    "GetRoute": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "amount_msat": {
            "description": "",
            "type": "msat"
          },
          "cltv": {
            "description": "",
            "type": "number"
          },
          "exclude": {
            "description": "",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fromid": {
            "description": "",
            "type": "pubkey"
          },
          "fuzzpercent": {
            "description": "",
            "type": "u32"
          },
          "id": {
            "description": "",
            "type": "pubkey"
          },
          "maxhops": {
            "description": "",
            "type": "u32"
          },
          "riskfactor": {
            "description": "",
            "type": "u64"
          }
        },
        "required": [
          "id",
          "amount_msat",
          "riskfactor"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "route": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {
                  "description": "The amount expected by the node at the end of this hop",
                  "type": "msat"
                },
                "channel": {
                  "description": "The channel joining these nodes",
                  "type": "short_channel_id"
                },
                "delay": {
                  "description": "The total CLTV expected by the node at the end of this hop",
                  "type": "u32"
                },
                "direction": {
                  "description": "0 if this channel is traversed from lesser to greater **id**, otherwise 1",
                  "type": "u32"
                },
                "id": {
                  "description": "The node at the end of this hop",
                  "type": "pubkey"
                },
                "msatoshi": {
                  "deprecated": true,
                  "type": "u64"
                },
                "style": {
                  "description": "The features understood by the destination node",
                  "enum": [
                    "tlv"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "id",
                "direction",
                "channel",
                "amount_msat",
                "delay",
                "style"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "route"
        ],
        "type": "object"
      }
    },
    "Getinfo": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {},
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "address": {
            "description": "The addresses we announce to the world",
            "items": {
              "additionalProperties": true,
              "else": {
                "additionalProperties": false,
                "properties": {
                  "port": {},
                  "type": {}
                },
                "required": [
                  "type",
                  "port"
                ]
              },
              "if": {
                "properties": {
                  "type": {
                    "enum": [
                      "dns",
                      "ipv4",
                      "ipv6",
                      "torv2",
                      "torv3"
                    ],
                    "type": "string"
                  }
                }
              },
              "properties": {
                "port": {
                  "description": "port number",
                  "type": "u16"
                },
                "type": {
                  "description": "Type of connection",
                  "enum": [
                    "dns",
                    "ipv4",
                    "ipv6",
                    "torv2",
                    "torv3",
                    "websocket"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type",
                "port"
              ],
              "then": {
                "additionalProperties": false,
                "properties": {
                  "address": {
                    "description": "address in expected format for **type**",
                    "type": "string"
                  },
                  "port": {},
                  "type": {}
                },
                "required": [
                  "type",
                  "address",
                  "port"
                ]
              },
              "type": "object"
            },
            "type": "array"
          },
          "alias": {
            "description": "The fun alias this node will advertize",
            "maxLength": 32,
            "type": "string"
          },
          "binding": {
            "description": "The addresses we are listening on",
            "items": {
              "additionalProperties": false,
              "properties": {
                "address": {
                  "description": "address in expected format for **type**",
                  "type": "string"
                },
                "port": {
                  "description": "port number",
                  "type": "u16"
                },
                "socket": {
                  "description": "socket filename (only if **type** is \"local socket\")",
                  "type": "string"
                },
                "type": {
                  "*FIXME*": "The variant in connect.schema.json is more complete",
                  "description": "Type of connection",
                  "enum": [
                    "local socket",
                    "ipv4",
                    "ipv6",
                    "torv2",
                    "torv3"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "blockheight": {
            "description": "The highest block height we've learned",
            "type": "u32"
          },
          "color": {
            "description": "The favorite RGB color this node will advertize",
            "maxLength": 6,
            "minLength": 6,
            "type": "hex"
          },
          "fees_collected_msat": {
            "description": "Total routing fees collected by this node",
            "type": "msat"
          },
          "id": {
            "description": "The public key unique to this node",
            "type": "pubkey"
          },
          "lightning-dir": {
            "description": "Identifies where you can find the configuration and other related files",
            "type": "string"
          },
          "msatoshi_fees_collected": {
            "deprecated": true,
            "type": "u64"
          },
          "network": {
            "description": "represents the type of network on the node are working (e.g: `bitcoin`, `testnet`, or `regtest`)",
            "type": "string"
          },
          "num_active_channels": {
            "description": "The total count of channels in normal state",
            "type": "u32"
          },
          "num_inactive_channels": {
            "description": "The total count of channels waiting for opening or closing transactions to be mined",
            "type": "u32"
          },
          "num_peers": {
            "description": "The total count of peers, connected or with channels",
            "type": "u32"
          },
          "num_pending_channels": {
            "description": "The total count of channels being opened",
            "type": "u32"
          },
          "our_features": {
            "additionalProperties": true,
            "description": "Our BOLT #9 feature bits (as hexstring) for various contexts",
            "properties": {
              "channel": {
                "description": "negotiated channel features we (as channel initiator) publish in the channel_announcement message",
                "type": "hex"
              },
              "init": {
                "description": "features (incl. globalfeatures) in our init message, these also restrict what we offer in open_channel or accept in accept_channel",
                "type": "hex"
              },
              "invoice": {
                "description": "features in our BOLT11 invoices",
                "type": "hex"
              },
              "node": {
                "description": "features in our node_announcement message",
                "type": "hex"
              }
            },
            "required": [
              "init",
              "node",
              "channel",
              "invoice"
            ],
            "type": "object"
          },
          "version": {
            "description": "Identifies what bugs you are running into",
            "type": "string"
          },
          "warning_bitcoind_sync": {
            "description": "Bitcoind is not up-to-date with network.",
            "type": "string"
          },
          "warning_lightningd_sync": {
            "description": "Lightningd is still loading latest blocks from bitcoind.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "alias",
          "color",
          "num_peers",
          "num_pending_channels",
          "num_active_channels",
          "num_inactive_channels",
          "version",
          "blockheight",
          "network",
          "fees_collected_msat",
          "lightning-dir"
        ],
        "type": "object"
      }
    },
    "Invoice": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "amount_msat": {
            "description": "",
            "type": "msat_or_any"
          },
          "cltv": {
            "description": "",
            "type": "u32"
          },
          "deschashonly": {
            "description": "",
            "type": "boolean"
          },
          "description": {
            "description": "",
            "type": "string"
          },
          "expiry": {
            "description": "",
            "type": "u64"
          },
          "exposeprivatechannels": {
            "oneOf": [
              {
                "description": "",
                "type": "boolean"
              },
              {
                "items": {
                  "type": "short_channel_id"
                },
                "type": "array"
              },
              {
                "type": "short_channel_id"
              }
            ]
          },
          "fallbacks": {
            "description": "",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "label": {
            "oneOf": [
              {
                "description": "",
                "type": "string"
              },
              {
                "description": "",
                "type": "integer"
              }
            ]
          },
          "preimage": {
            "description": "",
            "type": "hex"
          }
        },
        "required": [
          "amount_msat",
          "label",
          "description"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "bolt11": {
            "description": "the bolt11 string",
            "type": "string"
          },
          "expires_at": {
            "description": "UNIX timestamp of when invoice expires",
            "type": "u64"
          },
          "payment_hash": {
            "description": "the hash of the *payment_preimage* which will prove payment",
            "maxLength": 64,
            "minLength": 64,
            "type": "hash"
          },
          "payment_secret": {
            "description": "the *payment_secret* to place in the onion",
            "maxLength": 64,
            "minLength": 64,
            "type": "secret"
          },
          "warning_capacity": {
            "description": "even using all possible channels, there's not enough incoming capacity to pay this invoice.",
            "type": "string"
          },
          "warning_deadends": {
            "description": "there would be enough incoming capacity, but some channels are dead-ends (no other public channels from those peers), so there isn't.",
            "type": "string"
          },
          "warning_mpp": {
            "description": "there is sufficient capacity, but not in a single channel, so the payer will have to use multi-part payments.",
            "type": "string"
          },
          "warning_offline": {
            "description": "there would be enough incoming capacity, but some channels are offline, so there isn't.",
            "type": "string"
          },
          "warning_private_unused": {
            "description": "there would be enough incoming capacity, but some channels are unannounced and *exposeprivatechannels* is *false*, so there isn't.",
            "type": "string"
          }
        },
        "required": [
          "payment_hash",
          "expires_at",
          "bolt11",
          "payment_secret"
        ],
        "type": "object"
      }
    },
    "KeySend": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "amount_msat": {
            "type": "msat"
          },
          "destination": {
            "type": "pubkey"
          },
          "exemptfee": {
            "type": "msat"
          },
          "extratlvs": {
            "additionalProperties": true,
            "required": [],
            "type": "object"
          },
          "label": {
            "type": "string"
          },
          "maxdelay": {
            "type": "u32"
          },
          "maxfeepercent": {
            "type": "number"
          },
          "retry_for": {
            "type": "u32"
          },
          "routehints": {
            "items": {
              "items": {
                "additionalProperties": false,
                "properties": {
                  "expirydelta": {
                    "type": "u16"
                  },
                  "feebase": {
                    "type": "msat"
                  },
                  "feeprop": {
                    "type": "u32"
                  },
                  "id": {
                    "type": "pubkey"
                  },
                  "scid": {
                    "type": "short_channel_id"
                  }
                },
                "required": [
                  "id",
                  "scid",
                  "feebase",
                  "feeprop",
                  "expirydelta"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "destination",
          "amount_msat"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "amount_msat": {
            "description": "Amount the recipient received",
            "type": "msat"
          },
          "amount_sent_msat": {
            "description": "Total amount we sent (including fees)",
            "type": "msat"
          },
          "created_at": {
            "description": "the UNIX timestamp showing when this payment was initiated",
            "type": "number"
          },
          "destination": {
            "description": "the final destination of the payment",
            "type": "pubkey"
          },
          "msatoshi": {
            "deprecated": true
          },
          "msatoshi_sent": {
            "deprecated": true
          },
          "parts": {
            "description": "how many attempts this took",
            "type": "u32"
          },
          "payment_hash": {
            "description": "the hash of the *payment_preimage* which will prove payment",
            "maxLength": 64,
            "minLength": 64,
            "type": "hash"
          },
          "payment_preimage": {
            "description": "the proof of payment: SHA256 of this **payment_hash**",
            "maxLength": 64,
            "minLength": 64,
            "type": "secret"
          },
          "status": {
            "description": "status of payment",
            "enum": [
              "complete"
            ],
            "type": "string"
          },
          "warning_partial_completion": {
            "description": "Not all parts of a multi-part payment have completed",
            "type": "string"
          }
        },
        "required": [
          "payment_preimage",
          "payment_hash",
          "created_at",
          "parts",
          "amount_msat",
          "amount_sent_msat",
          "status"
        ],
        "type": "object"
      }
    },
    "ListChannels": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "destination": {
            "description": "If destination is a node id, then only channels leading to that node id are returned.",
            "type": "pubkey"
          },
          "short_channel_id": {
            "description": "If short_channel_id is a short channel id, then only known channels with a matching short_channel_id are returned. Otherwise, it must be null.",
            "type": "short_channel_id"
          },
          "source": {
            "description": "If source is a node id, then only channels leading from that node id are returned.",
            "type": "pubkey"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "channels": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "active": {
                  "description": "true unless source has disabled it, or it's a local channel and the peer is disconnected or it's still opening or closing",
                  "type": "boolean"
                },
                "amount_msat": {
                  "description": "the total capacity of this channel (always a whole number of satoshis)",
                  "type": "msat"
                },
                "base_fee_millisatoshi": {
                  "description": "Base fee changed by *source* to use this channel",
                  "type": "u32"
                },
                "channel_flags": {
                  "description": "as defined by BOLT #7",
                  "type": "u8"
                },
                "delay": {
                  "description": "The number of blocks delay required by *source* to use this channel",
                  "type": "u32"
                },
                "destination": {
                  "description": "the destination node",
                  "type": "pubkey"
                },
                "features": {
                  "description": "BOLT #9 features bitmap for this channel",
                  "type": "hex"
                },
                "fee_per_millionth": {
                  "description": "Proportional fee changed by *source* to use this channel, in parts-per-million",
                  "type": "u32"
                },
                "htlc_maximum_msat": {
                  "description": "The largest payment *source* will allow via this channel",
                  "type": "msat"
                },
                "htlc_minimum_msat": {
                  "description": "The smallest payment *source* will allow via this channel",
                  "type": "msat"
                },
                "last_update": {
                  "description": "UNIX timestamp on the last channel_update from *source*",
                  "type": "u32"
                },
                "message_flags": {
                  "description": "as defined by BOLT #7",
                  "type": "u8"
                },
                "public": {
                  "description": "true if this is announced (otherwise it must be our channel)",
                  "type": "boolean"
                },
                "satoshis": {
                  "deprecated": true
                },
                "short_channel_id": {
                  "description": "short channel id of channel",
                  "type": "short_channel_id"
                },
                "source": {
                  "description": "the source node",
                  "type": "pubkey"
                }
              },
              "required": [
                "source",
                "destination",
                "short_channel_id",
                "public",
                "amount_msat",
                "message_flags",
                "channel_flags",
                "active",
                "last_update",
                "base_fee_millisatoshi",
                "fee_per_millionth",
                "delay",
                "htlc_minimum_msat",
                "features"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "channels"
        ],
        "type": "object"
      }
    },
    "ListDatastore": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "key": {
            "oneOf": [
              {
                "description": "key is an array of values (though a single value is treated as a one-element array), to form a heirarchy. Using the first element of the key as the plugin name (e.g. [ 'summary' ]) is recommended. A key can either have children or a value, never both: parents are created and removed automatically.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "description": "",
                "type": "string"
              }
            ]
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "datastore": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "generation": {
                  "description": "The number of times this has been updated",
                  "type": "u64"
                },
                "hex": {
                  "description": "The hex data from the datastore",
                  "type": "hex"
                },
                "key": {
                  "items": {
                    "description": "Part of the key added to the datastore",
                    "type": "string"
                  },
                  "type": "array"
                },
                "string": {
                  "description": "The data as a string, if it's valid utf-8",
                  "type": "string"
                }
              },
              "required": [
                "key"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "datastore"
        ],
        "type": "object"
      }
    },
    "ListForwards": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "in_channel": {
            "type": "short_channel_id"
          },
          "out_channel": {
            "type": "short_channel_id"
          },
          "status": {
            "enum": [
              "offered",
              "settled",
              "local_failed",
              "failed"
            ],
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "forwards": {
            "items": {
              "additionalProperties": true,
              "allOf": [
                {
                  "else": {
                    "additionalProperties": false,
                    "properties": {
                      "failcode": {},
                      "failreason": {},
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msat": {},
                      "in_msatoshi": {},
                      "out_channel": {},
                      "received_time": {},
                      "resolved_time": {},
                      "status": {},
                      "style": {}
                    },
                    "required": []
                  },
                  "if": {
                    "required": [
                      "out_msat"
                    ]
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "failcode": {},
                      "failreason": {},
                      "fee": {
                        "deprecated": true
                      },
                      "fee_msat": {
                        "description": "the amount this paid in fees",
                        "type": "msat"
                      },
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msat": {},
                      "in_msatoshi": {},
                      "out_channel": {},
                      "out_htlc_id": {},
                      "out_msat": {
                        "description": "the amount we sent out the *out_channel*",
                        "type": "msat"
                      },
                      "out_msatoshi": {
                        "deprecated": true
                      },
                      "received_time": {},
                      "resolved_time": {},
                      "status": {},
                      "style": {}
                    },
                    "required": [
                      "fee_msat",
                      "out_msat",
                      "out_channel"
                    ]
                  }
                },
                {
                  "else": {
                    "additionalProperties": false,
                    "properties": {
                      "failcode": {},
                      "failreason": {},
                      "fee": {},
                      "fee_msat": {},
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msat": {},
                      "in_msatoshi": {},
                      "out_channel": {},
                      "out_htlc_id": {},
                      "out_msat": {},
                      "out_msatoshi": {},
                      "received_time": {},
                      "status": {},
                      "style": {}
                    }
                  },
                  "if": {
                    "properties": {
                      "status": {
                        "enum": [
                          "settled",
                          "failed"
                        ],
                        "type": "string"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "failcode": {},
                      "failreason": {},
                      "fee": {},
                      "fee_msat": {},
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msat": {},
                      "in_msatoshi": {},
                      "out_channel": {},
                      "out_htlc_id": {},
                      "out_msat": {},
                      "out_msatoshi": {},
                      "received_time": {},
                      "resolved_time": {
                        "description": "the UNIX timestamp when this was resolved",
                        "type": "number"
                      },
                      "status": {},
                      "style": {}
                    },
                    "required": [
                      "resolved_time"
                    ]
                  }
                },
                {
                  "else": {
                    "additionalProperties": false,
                    "properties": {
                      "fee": {},
                      "fee_msat": {},
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msat": {},
                      "in_msatoshi": {},
                      "out_channel": {},
                      "out_htlc_id": {},
                      "out_msat": {},
                      "out_msatoshi": {},
                      "received_time": {},
                      "resolved_time": {},
                      "status": {},
                      "style": {}
                    },
                    "required": []
                  },
                  "if": {
                    "properties": {
                      "status": {
                        "enum": [
                          "local_failed",
                          "failed"
                        ],
                        "type": "string"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "failcode": {
                        "description": "the numeric onion code returned",
                        "type": "u32"
                      },
                      "failreason": {
                        "description": "the name of the onion code returned",
                        "type": "string"
                      },
                      "fee": {},
                      "fee_msat": {},
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msat": {},
                      "in_msatoshi": {},
                      "out_channel": {},
                      "out_htlc_id": {},
                      "out_msat": {},
                      "out_msatoshi": {},
                      "received_time": {},
                      "resolved_time": {},
                      "status": {},
                      "style": {}
                    },
                    "required": []
                  }
                }
              ],
              "properties": {
                "in_channel": {
                  "description": "the channel that received the HTLC",
                  "type": "short_channel_id"
                },
                "in_htlc_id": {
                  "description": "the unique HTLC id the sender gave this (not present if incoming channel was closed before ugprade to v22.11)",
                  "type": "u64"
                },
                "in_msat": {
                  "description": "the value of the incoming HTLC",
                  "type": "msat"
                },
                "in_msatoshi": {
                  "deprecated": true
                },
                "out_channel": {
                  "description": "the channel that the HTLC (trying to) forward to",
                  "type": "short_channel_id"
                },
                "out_htlc_id": {
                  "description": "the unique HTLC id we gave this when sending (may be missing even if out_channel is present, for old forwards before v22.11)",
                  "type": "u64"
                },
                "received_time": {
                  "description": "the UNIX timestamp when this was received",
                  "type": "number"
                },
                "status": {
                  "description": "still ongoing, completed, failed locally, or failed after forwarding",
                  "enum": [
                    "offered",
                    "settled",
                    "local_failed",
                    "failed"
                  ],
                  "type": "string"
                },
                "style": {
                  "description": "Either a legacy onion format or a modern tlv format",
                  "enum": [
                    "legacy",
                    "tlv"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "in_channel",
                "in_msat",
                "status",
                "received_time"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "forwards"
        ],
        "type": "object"
      }
    },
    "ListFunds": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "spent": {
            "description": "Should outputs that are already spent be included in the result?",
            "type": "boolean"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "channels": {
            "items": {
              "additionalProperties": true,
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "state": {
                        "enum": [
                          "CHANNELD_NORMAL"
                        ],
                        "type": "string"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "amount_msat": {},
                      "channel_sat": {},
                      "channel_total_sat": {},
                      "connected": {},
                      "funding_output": {},
                      "funding_txid": {},
                      "our_amount_msat": {},
                      "peer_id": {},
                      "short_channel_id": {
                        "description": "short channel id of channel",
                        "type": "short_channel_id"
                      },
                      "state": {}
                    },
                    "required": [
                      "short_channel_id"
                    ]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "state": {
                        "enum": [
                          "CHANNELD_SHUTTING_DOWN",
                          "CLOSINGD_SIGEXCHANGE",
                          "CLOSINGD_COMPLETE",
                          "AWAITING_UNILATERAL",
                          "FUNDING_SPEND_SEEN",
                          "ONCHAIN"
                        ],
                        "type": "string"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "amount_msat": {},
                      "channel_sat": {},
                      "channel_total_sat": {},
                      "connected": {},
                      "funding_output": {},
                      "funding_txid": {},
                      "our_amount_msat": {},
                      "peer_id": {},
                      "short_channel_id": {
                        "description": "short channel id of channel (only if funding reached lockin depth before closing)",
                        "type": "short_channel_id"
                      },
                      "state": {}
                    },
                    "required": []
                  }
                }
              ],
              "properties": {
                "amount_msat": {
                  "description": "total channel value",
                  "type": "msat"
                },
                "channel_sat": {
                  "deprecated": true
                },
                "channel_total_sat": {
                  "deprecated": true
                },
                "connected": {
                  "description": "whether the channel peer is connected",
                  "type": "boolean"
                },
                "funding_output": {
                  "description": "the 0-based index of the output in the funding transaction",
                  "type": "u32"
                },
                "funding_txid": {
                  "description": "funding transaction id",
                  "type": "txid"
                },
                "our_amount_msat": {
                  "description": "available satoshis on our node's end of the channel",
                  "type": "msat"
                },
                "peer_id": {
                  "description": "the peer with which the channel is opened",
                  "type": "pubkey"
                },
                "state": {
                  "description": "the channel state, in particular \"CHANNELD_NORMAL\" means the channel can be used normally",
                  "enum": [
                    "OPENINGD",
                    "CHANNELD_AWAITING_LOCKIN",
                    "CHANNELD_NORMAL",
                    "CHANNELD_SHUTTING_DOWN",
                    "CLOSINGD_SIGEXCHANGE",
                    "CLOSINGD_COMPLETE",
                    "AWAITING_UNILATERAL",
                    "FUNDING_SPEND_SEEN",
                    "ONCHAIN",
                    "DUALOPEND_OPEN_INIT",
                    "DUALOPEND_AWAITING_LOCKIN"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "peer_id",
                "our_amount_msat",
                "amount_msat",
                "funding_txid",
                "funding_output",
                "connected",
                "state"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "outputs": {
            "items": {
              "additionalProperties": true,
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "status": {
                        "enum": [
                          "confirmed"
                        ],
                        "type": "string"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "address": {},
                      "amount_msat": {},
                      "blockheight": {
                        "description": "Block height where it was confirmed",
                        "type": "u32"
                      },
                      "output": {},
                      "redeemscript": {},
                      "reserved": {},
                      "reserved_to_block": {},
                      "scriptpubkey": {},
                      "status": {},
                      "txid": {},
                      "value": {}
                    },
                    "required": [
                      "blockheight"
                    ]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "reserved": {
                        "enum": [
                          "true"
                        ],
                        "type": "boolean"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "address": {},
                      "amount_msat": {},
                      "blockheight": {},
                      "output": {},
                      "redeemscript": {},
                      "reserved": {},
                      "reserved_to_block": {
                        "description": "Block height where reservation will expire",
                        "type": "u32"
                      },
                      "scriptpubkey": {},
                      "status": {},
                      "txid": {},
                      "value": {}
                    },
                    "required": [
                      "reserved_to_block"
                    ]
                  }
                }
              ],
              "properties": {
                "address": {
                  "description": "the bitcoin address of the output",
                  "type": "string"
                },
                "amount_msat": {
                  "description": "the amount of the output",
                  "type": "msat"
                },
                "output": {
                  "description": "the index within *txid*",
                  "type": "u32"
                },
                "redeemscript": {
                  "description": "the redeemscript, only if it's p2sh-wrapped",
                  "type": "hex"
                },
                "reserved": {
                  "description": "whether this UTXO is currently reserved for an in-flight tx",
                  "type": "boolean"
                },
                "scriptpubkey": {
                  "description": "the scriptPubkey of the output",
                  "type": "hex"
                },
                "status": {
                  "enum": [
                    "unconfirmed",
                    "confirmed",
                    "spent",
                    "immature"
                  ],
                  "type": "string"
                },
                "txid": {
                  "description": "the ID of the spendable transaction",
                  "type": "txid"
                }
              },
              "required": [
                "txid",
                "output",
                "amount_msat",
                "scriptpubkey",
                "status",
                "reserved"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "outputs",
          "channels"
        ],
        "type": "object"
      }
    },
    "ListInvoices": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "invstring": {
            "description": "",
            "type": "string"
          },
          "label": {
            "oneOf": [
              {
                "description": "",
                "type": "string"
              },
              {
                "description": "",
                "type": "integer"
              }
            ]
          },
          "offer_id": {
            "description": "",
            "type": "string"
          },
          "payment_hash": {
            "description": "",
            "type": "hex"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "invoices": {
            "items": {
              "additionalProperties": true,
              "allOf": [
                {
                  "else": {
                    "additionalProperties": false,
                    "properties": {
                      "amount_msat": {},
                      "bolt11": {},
                      "bolt12": {},
                      "description": {},
                      "expires_at": {},
                      "invreq_payer_note": {},
                      "label": {},
                      "local_offer_id": {},
                      "msatoshi": {},
                      "payment_hash": {},
                      "status": {}
                    }
                  },
                  "if": {
                    "properties": {
                      "status": {
                        "enum": [
                          "paid"
                        ],
                        "type": "string"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "amount_msat": {},
                      "amount_received_msat": {
                        "description": "the amount actually received (could be slightly greater than *amount_msat*, since clients may overpay)",
                        "type": "msat"
                      },
                      "bolt11": {},
                      "bolt12": {},
                      "description": {},
                      "expires_at": {},
                      "invreq_payer_note": {},
                      "label": {},
                      "local_offer_id": {},
                      "msatoshi": {},
                      "msatoshi_received": {
                        "deprecated": true
                      },
                      "paid_at": {
                        "description": "UNIX timestamp of when it was paid",
                        "type": "u64"
                      },
                      "pay_index": {
                        "description": "Unique incrementing index for this payment",
                        "type": "u64"
                      },
                      "payment_hash": {},
                      "payment_preimage": {
                        "description": "proof of payment",
                        "maxLength": 64,
                        "minLength": 64,
                        "type": "secret"
                      },
                      "status": {}
                    },
                    "required": [
                      "pay_index",
                      "amount_received_msat",
                      "paid_at",
                      "payment_preimage"
                    ]
                  }
                }
              ],
              "properties": {
                "amount_msat": {
                  "description": "the amount required to pay this invoice",
                  "type": "msat"
                },
                "bolt11": {
                  "description": "the BOLT11 string (always present unless *bolt12* is)",
                  "type": "string"
                },
                "bolt12": {
                  "description": "the BOLT12 string (always present unless *bolt11* is)",
                  "type": "string"
                },
                "description": {
                  "description": "description used in the invoice",
                  "type": "string"
                },
                "expires_at": {
                  "description": "UNIX timestamp of when it will become / became unpayable",
                  "type": "u64"
                },
                "invreq_payer_note": {
                  "description": "the optional *invreq_payer_note* from invoice_request which created this invoice (**experimental-offers** only).",
                  "type": "string"
                },
                "label": {
                  "description": "unique label supplied at invoice creation",
                  "type": "string"
                },
                "local_offer_id": {
                  "description": "the *id* of our offer which created this invoice (**experimental-offers** only).",
                  "maxLength": 64,
                  "minLength": 64,
                  "type": "hex"
                },
                "msatoshi": {
                  "deprecated": "true"
                },
                "payment_hash": {
                  "description": "the hash of the *payment_preimage* which will prove payment",
                  "maxLength": 64,
                  "minLength": 64,
                  "type": "hash"
                },
                "status": {
                  "description": "Whether it's paid, unpaid or unpayable",
                  "enum": [
                    "unpaid",
                    "paid",
                    "expired"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "label",
                "payment_hash",
                "status",
                "expires_at"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "invoices"
        ],
        "type": "object"
      }
    },
    "ListNodes": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "pubkey"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "nodes": {
            "items": {
              "additionalProperties": true,
              "allOf": [
                {
                  "else": {
                    "additionalProperties": false,
                    "properties": {
                      "nodeid": {}
                    }
                  },
                  "if": {
                    "required": [
                      "last_timestamp"
                    ]
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "addresses": {
                        "description": "The addresses this node advertized",
                        "items": {
                          "additionalProperties": true,
                          "else": {
                            "additionalProperties": false,
                            "properties": {
                              "port": {},
                              "type": {}
                            },
                            "required": [
                              "type",
                              "port"
                            ]
                          },
                          "if": {
                            "properties": {
                              "type": {
                                "enum": [
                                  "dns",
                                  "ipv4",
                                  "ipv6",
                                  "torv2",
                                  "torv3"
                                ],
                                "type": "string"
                              }
                            }
                          },
                          "properties": {
                            "port": {
                              "description": "port number",
                              "type": "u16"
                            },
                            "type": {
                              "description": "Type of connection",
                              "enum": [
                                "dns",
                                "ipv4",
                                "ipv6",
                                "torv2",
                                "torv3",
                                "websocket"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "port"
                          ],
                          "then": {
                            "additionalProperties": false,
                            "properties": {
                              "address": {
                                "description": "address in expected format for **type**",
                                "type": "string"
                              },
                              "port": {},
                              "type": {}
                            },
                            "required": [
                              "type",
                              "address",
                              "port"
                            ]
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "alias": {
                        "description": "The fun alias this node advertized",
                        "maxLength": 32,
                        "type": "string"
                      },
                      "color": {
                        "description": "The favorite RGB color this node advertized",
                        "maxLength": 6,
                        "minLength": 6,
                        "type": "hex"
                      },
                      "features": {
                        "description": "BOLT #9 features bitmap this node advertized",
                        "type": "hex"
                      },
                      "last_timestamp": {},
                      "nodeid": {},
                      "option_will_fund": {}
                    },
                    "required": [
                      "nodeid",
                      "last_timestamp",
                      "alias",
                      "color",
                      "features",
                      "addresses"
                    ]
                  }
                },
                {
                  "if": {
                    "required": [
                      "option_will_fund"
                    ]
                  },
                  "then": {
                    "additionalProperties": true,
                    "properties": {
                      "option_will_fund": {
                        "additionalProperties": false,
                        "properties": {
                          "channel_fee_max_base_msat": {
                            "description": "the maximum base routing fee this node will charge during the lease",
                            "type": "msat"
                          },
                          "channel_fee_max_proportional_thousandths": {
                            "description": "the maximum proportional routing fee this node will charge during the lease (in thousandths, not millionths like channel_update)",
                            "type": "u32"
                          },
                          "compact_lease": {
                            "description": "the lease as represented in the node_announcement",
                            "type": "hex"
                          },
                          "funding_weight": {
                            "description": "the onchain weight you'll have to pay for a lease",
                            "type": "u32"
                          },
                          "lease_fee_base_msat": {
                            "description": "the fixed fee for a lease (whole number of satoshis)",
                            "type": "msat"
                          },
                          "lease_fee_basis": {
                            "description": "the proportional fee in basis points (parts per 10,000) for a lease",
                            "type": "u32"
                          }
                        },
                        "required": [
                          "lease_fee_base_msat",
                          "lease_fee_basis",
                          "funding_weight",
                          "channel_fee_max_base_msat",
                          "channel_fee_max_proportional_thousandths",
                          "compact_lease"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "option_will_fund"
                    ]
                  }
                }
              ],
              "properties": {
                "last_timestamp": {
                  "description": "A node_announcement has been received for this node (UNIX timestamp)",
                  "type": "u32"
                },
                "nodeid": {
                  "description": "the public key of the node",
                  "type": "pubkey"
                }
              },
              "required": [
                "nodeid"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "nodes"
        ],
        "type": "object"
      }
    },
    "ListPays": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "bolt11": {
            "type": "string"
          },
          "payment_hash": {
            "type": "hash"
          },
          "status": {
            "enum": [
              "pending",
              "complete",
              "failed"
            ],
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "pays": {
            "items": {
              "additionalProperties": true,
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "status": {
                        "enum": [
                          "complete"
                        ],
                        "type": "string"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "amount_msat": {},
                      "amount_sent_msat": {},
                      "bolt11": {},
                      "bolt12": {},
                      "completed_at": {},
                      "created_at": {},
                      "description": {},
                      "destination": {},
                      "label": {},
                      "number_of_parts": {
                        "description": "the number of parts for a successful payment (only if more than one).",
                        "type": "u64"
                      },
                      "payment_hash": {},
                      "preimage": {
                        "description": "proof of payment",
                        "maxLength": 64,
                        "minLength": 64,
                        "type": "hex"
                      },
                      "status": {}
                    },
                    "required": [
                      "amount_sent_msat",
                      "preimage"
                    ]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "status": {
                        "enum": [
                          "failed"
                        ],
                        "type": "string"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "amount_sent_msat": {},
                      "bolt11": {},
                      "bolt12": {},
                      "created_at": {},
                      "description": {},
                      "destination": {},
                      "erroronion": {
                        "description": "the error onion returned on failure, if any.",
                        "type": "hex"
                      },
                      "label": {},
                      "payment_hash": {},
                      "status": {}
                    },
                    "required": [
                      "amount_sent_msat"
                    ]
                  }
                }
              ],
              "properties": {
                "bolt11": {
                  "description": "the bolt11 string (if pay supplied one)",
                  "type": "string"
                },
                "bolt12": {
                  "description": "the bolt12 string (if supplied for pay: **experimental-offers** only).",
                  "type": "string"
                },
                "completed_at": {
                  "description": "the UNIX timestamp showing when this payment was completed",
                  "type": "u64"
                },
                "created_at": {
                  "description": "the UNIX timestamp showing when this payment was initiated",
                  "type": "u64"
                },
                "description": {
                  "description": "the description matching the bolt11 description hash (if pay supplied one)",
                  "type": "string"
                },
                "destination": {
                  "description": "the final destination of the payment if known",
                  "type": "pubkey"
                },
                "label": {
                  "description": "the label, if given to sendpay",
                  "type": "string"
                },
                "payment_hash": {
                  "description": "the hash of the *payment_preimage* which will prove payment",
                  "maxLength": 64,
                  "minLength": 64,
                  "type": "hex"
                },
                "status": {
                  "description": "status of the payment",
                  "enum": [
                    "pending",
                    "failed",
                    "complete"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "payment_hash",
                "status",
                "created_at"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "pays"
        ],
        "type": "object"
      }
    },
    "ListPeers": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "If supplied, limits the result to just the peer with the given ID, if it exists.",
            "type": "pubkey"
          },
          "level": {
            "description": "Supplying level will show log entries related to that peer at the given log level. Valid log levels are \u201cio\u201d, \u201cdebug\u201d, \u201cinfo\u201d, and \u201cunusual\u201d.",
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "peers": {
            "items": {
              "additionalProperties": true,
              "allOf": [
                {
                  "if": {
                    "additionalProperties": true,
                    "properties": {
                      "connected": {
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "channels": {},
                      "connected": {},
                      "features": {
                        "description": "bitmap of BOLT #9 features from peer's INIT message",
                        "type": "hex"
                      },
                      "htlcs": {},
                      "id": {},
                      "log": {},
                      "netaddr": {
                        "description": "A single entry array",
                        "items": {
                          "description": "address, e.g. 1.2.3.4:1234",
                          "type": "string"
                        },
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "array"
                      },
                      "remote_addr": {
                        "description": "The public IPv4/6 address the peer sees us from, e.g. 1.2.3.4:1234",
                        "type": "string"
                      }
                    },
                    "required": [
                      "netaddr",
                      "features"
                    ]
                  }
                }
              ],
              "properties": {
                "channels": {
                  "items": {
                    "additionalProperties": true,
                    "allOf": [
                      {
                        "if": {
                          "required": [
                            "close_to"
                          ]
                        },
                        "then": {
                          "additionalProperties": false,
                          "properties": {
                            "alias": {},
                            "channel_id": {},
                            "close_to": {},
                            "close_to_addr": {
                              "description": "The bitcoin address we will close to",
                              "type": "string"
                            },
                            "closer": {},
                            "direction": {},
                            "dust_limit_msat": {},
                            "dust_limit_satoshis": {},
                            "features": {},
                            "fee_base_msat": {},
                            "fee_proportional_millionths": {},
                            "feerate": {},
                            "funding": {},
                            "funding_outnum": {},
                            "funding_txid": {},
                            "htlc_minimum_msat": {},
                            "htlcs": {},
                            "in_fulfilled_msat": {},
                            "in_msatoshi_fulfilled": {},
                            "in_msatoshi_offered": {},
                            "in_offered_msat": {},
                            "in_payments_fulfilled": {},
                            "in_payments_offered": {},
                            "inflight": {},
                            "initial_feerate": {},
                            "last_feerate": {},
                            "last_tx_fee_msat": {},
                            "max_accepted_htlcs": {},
                            "max_htlc_value_in_flight_msat": {},
                            "max_to_us_msat": {},
                            "max_total_htlc_in_msat": {},
                            "maximum_htlc_out_msat": {},
                            "min_to_us_msat": {},
                            "minimum_htlc_in_msat": {},
                            "minimum_htlc_out_msat": {},
                            "msatoshi_to_us": {},
                            "msatoshi_to_us_max": {},
                            "msatoshi_to_us_min": {},
                            "msatoshi_total": {},
                            "next_feerate": {},
                            "opener": {},
                            "our_channel_reserve_satoshis": {},
                            "our_reserve_msat": {},
                            "our_to_self_delay": {},
                            "out_fulfilled_msat": {},
                            "out_msatoshi_fulfilled": {},
                            "out_msatoshi_offered": {},
                            "out_offered_msat": {},
                            "out_payments_fulfilled": {},
                            "out_payments_offered": {},
                            "owner": {},
                            "private": {},
                            "receivable_msat": {},
                            "receivable_msatoshi": {},
                            "receivable_satoshis": {},
                            "scratch_txid": {},
                            "short_channel_id": {},
                            "spendable_msat": {},
                            "spendable_msatoshi": {},
                            "spendable_satoshis": {},
                            "state": {},
                            "state_changes": {},
                            "status": {},
                            "their_channel_reserve_satoshis": {},
                            "their_reserve_msat": {},
                            "their_to_self_delay": {},
                            "to_us_msat": {},
                            "total_msat": {}
                          },
                          "required": []
                        }
                      },
                      {
                        "if": {
                          "required": [
                            "scratch_txid"
                          ]
                        },
                        "then": {
                          "additionalProperties": false,
                          "properties": {
                            "alias": {},
                            "channel_id": {},
                            "close_to": {},
                            "close_to_addr": {},
                            "closer": {},
                            "direction": {},
                            "dust_limit_msat": {},
                            "dust_limit_satoshis": {},
                            "features": {},
                            "fee_base_msat": {},
                            "fee_proportional_millionths": {},
                            "feerate": {},
                            "funding": {},
                            "funding_outnum": {},
                            "funding_txid": {},
                            "htlc_minimum_msat": {},
                            "htlcs": {},
                            "in_fulfilled_msat": {},
                            "in_msatoshi_fulfilled": {},
                            "in_msatoshi_offered": {},
                            "in_offered_msat": {},
                            "in_payments_fulfilled": {},
                            "in_payments_offered": {},
                            "inflight": {},
                            "initial_feerate": {},
                            "last_feerate": {},
                            "last_tx_fee_msat": {
                              "description": "fee attached to this the current tx",
                              "type": "msat"
                            },
                            "max_accepted_htlcs": {},
                            "max_htlc_value_in_flight_msat": {},
                            "max_to_us_msat": {},
                            "max_total_htlc_in_msat": {},
                            "maximum_htlc_out_msat": {},
                            "min_to_us_msat": {},
                            "minimum_htlc_in_msat": {},
                            "minimum_htlc_out_msat": {},
                            "msatoshi_to_us": {},
                            "msatoshi_to_us_max": {},
                            "msatoshi_to_us_min": {},
                            "msatoshi_total": {},
                            "next_feerate": {},
                            "opener": {},
                            "our_channel_reserve_satoshis": {},
                            "our_reserve_msat": {},
                            "our_to_self_delay": {},
                            "out_fulfilled_msat": {},
                            "out_msatoshi_fulfilled": {},
                            "out_msatoshi_offered": {},
                            "out_offered_msat": {},
                            "out_payments_fulfilled": {},
                            "out_payments_offered": {},
                            "owner": {},
                            "private": {},
                            "receivable_msat": {},
                            "receivable_msatoshi": {},
                            "receivable_satoshis": {},
                            "scratch_txid": {},
                            "short_channel_id": {},
                            "spendable_msat": {},
                            "spendable_msatoshi": {},
                            "spendable_satoshis": {},
                            "state": {},
                            "state_changes": {},
                            "status": {},
                            "their_channel_reserve_satoshis": {},
                            "their_reserve_msat": {},
                            "their_to_self_delay": {},
                            "to_us_msat": {},
                            "total_msat": {}
                          },
                          "required": [
                            "last_tx_fee_msat"
                          ]
                        }
                      },
                      {
                        "if": {
                          "required": [
                            "short_channel_id"
                          ]
                        },
                        "then": {
                          "additionalProperties": false,
                          "properties": {
                            "alias": {},
                            "channel_id": {},
                            "close_to": {},
                            "close_to_addr": {},
                            "closer": {},
                            "direction": {
                              "description": "0 if we're the lesser node_id, 1 if we're the greater",
                              "type": "u32"
                            },
                            "dust_limit_msat": {},
                            "dust_limit_satoshis": {},
                            "features": {},
                            "fee_base_msat": {},
                            "fee_proportional_millionths": {},
                            "feerate": {},
                            "funding": {},
                            "funding_outnum": {},
                            "funding_txid": {},
                            "htlc_minimum_msat": {},
                            "htlcs": {},
                            "in_fulfilled_msat": {},
                            "in_msatoshi_fulfilled": {},
                            "in_msatoshi_offered": {},
                            "in_offered_msat": {},
                            "in_payments_fulfilled": {},
                            "in_payments_offered": {},
                            "inflight": {},
                            "initial_feerate": {},
                            "last_feerate": {},
                            "last_tx_fee_msat": {},
                            "max_accepted_htlcs": {},
                            "max_htlc_value_in_flight_msat": {},
                            "max_to_us_msat": {},
                            "max_total_htlc_in_msat": {},
                            "maximum_htlc_out_msat": {},
                            "min_to_us_msat": {},
                            "minimum_htlc_in_msat": {},
                            "minimum_htlc_out_msat": {},
                            "msatoshi_to_us": {},
                            "msatoshi_to_us_max": {},
                            "msatoshi_to_us_min": {},
                            "msatoshi_total": {},
                            "next_feerate": {},
                            "opener": {},
                            "our_channel_reserve_satoshis": {},
                            "our_reserve_msat": {},
                            "our_to_self_delay": {},
                            "out_fulfilled_msat": {},
                            "out_msatoshi_fulfilled": {},
                            "out_msatoshi_offered": {},
                            "out_offered_msat": {},
                            "out_payments_fulfilled": {},
                            "out_payments_offered": {},
                            "owner": {},
                            "private": {},
                            "receivable_msat": {},
                            "receivable_msatoshi": {},
                            "receivable_satoshis": {},
                            "scratch_txid": {},
                            "short_channel_id": {},
                            "spendable_msat": {},
                            "spendable_msatoshi": {},
                            "spendable_satoshis": {},
                            "state": {},
                            "state_changes": {},
                            "status": {},
                            "their_channel_reserve_satoshis": {},
                            "their_reserve_msat": {},
                            "their_to_self_delay": {},
                            "to_us_msat": {},
                            "total_msat": {}
                          },
                          "required": [
                            "direction"
                          ]
                        }
                      },
                      {
                        "if": {
                          "required": [
                            "inflight"
                          ]
                        },
                        "then": {
                          "additionalProperties": false,
                          "properties": {
                            "alias": {},
                            "channel_id": {},
                            "close_to": {},
                            "close_to_addr": {},
                            "closer": {},
                            "direction": {},
                            "dust_limit_msat": {},
                            "dust_limit_satoshis": {},
                            "features": {},
                            "fee_base_msat": {},
                            "fee_proportional_millionths": {},
                            "feerate": {},
                            "funding": {},
                            "funding_outnum": {},
                            "funding_txid": {},
                            "htlc_minimum_msat": {},
                            "htlcs": {},
                            "in_fulfilled_msat": {},
                            "in_msatoshi_fulfilled": {},
                            "in_msatoshi_offered": {},
                            "in_offered_msat": {},
                            "in_payments_fulfilled": {},
                            "in_payments_offered": {},
                            "inflight": {},
                            "initial_feerate": {
                              "description": "The feerate for the initial funding transaction in per-1000-weight, with \"kpw\" appended",
                              "type": "string"
                            },
                            "last_feerate": {
                              "description": "The feerate for the latest funding transaction in per-1000-weight, with \"kpw\" appended",
                              "type": "string"
                            },
                            "last_tx_fee_msat": {},
                            "max_accepted_htlcs": {},
                            "max_htlc_value_in_flight_msat": {},
                            "max_to_us_msat": {},
                            "max_total_htlc_in_msat": {},
                            "maximum_htlc_out_msat": {},
                            "min_to_us_msat": {},
                            "minimum_htlc_in_msat": {},
                            "minimum_htlc_out_msat": {},
                            "msatoshi_to_us": {},
                            "msatoshi_to_us_max": {},
                            "msatoshi_to_us_min": {},
                            "msatoshi_total": {},
                            "next_feerate": {
                              "description": "The minimum feerate for the next funding transaction in per-1000-weight, with \"kpw\" appended",
                              "type": "string"
                            },
                            "opener": {},
                            "our_channel_reserve_satoshis": {},
                            "our_reserve_msat": {},
                            "our_to_self_delay": {},
                            "out_fulfilled_msat": {},
                            "out_msatoshi_fulfilled": {},
                            "out_msatoshi_offered": {},
                            "out_offered_msat": {},
                            "out_payments_fulfilled": {},
                            "out_payments_offered": {},
                            "owner": {},
                            "private": {},
                            "receivable_msat": {},
                            "receivable_msatoshi": {},
                            "receivable_satoshis": {},
                            "scratch_txid": {},
                            "short_channel_id": {},
                            "spendable_msat": {},
                            "spendable_msatoshi": {},
                            "spendable_satoshis": {},
                            "state": {},
                            "state_changes": {},
                            "status": {},
                            "their_channel_reserve_satoshis": {},
                            "their_reserve_msat": {},
                            "their_to_self_delay": {},
                            "to_us_msat": {},
                            "total_msat": {}
                          },
                          "required": [
                            "initial_feerate",
                            "last_feerate",
                            "next_feerate"
                          ]
                        }
                      }
                    ],
                    "properties": {
                      "alias": {
                        "properties": {
                          "local": {
                            "description": "An alias assigned by this node to this channel, used for outgoing payments",
                            "type": "short_channel_id"
                          },
                          "remote": {
                            "description": "An alias assigned by the remote node to this channel, usable in routehints and invoices",
                            "type": "short_channel_id"
                          }
                        },
                        "required": [],
                        "type": "object"
                      },
                      "channel_id": {
                        "description": "The full channel_id",
                        "maxLength": 64,
                        "minLength": 64,
                        "type": "hash"
                      },
                      "close_to": {
                        "description": "scriptPubkey which we have to close to if we mutual close",
                        "type": "hex"
                      },
                      "closer": {
                        "description": "Who initiated the channel close",
                        "enum": [
                          "local",
                          "remote"
                        ],
                        "type": "string"
                      },
                      "dust_limit_msat": {
                        "description": "minimum amount for an output on the channel transactions",
                        "type": "msat"
                      },
                      "dust_limit_satoshis": {
                        "deprecated": true
                      },
                      "features": {
                        "items": {
                          "description": "BOLT #9 features which apply to this channel",
                          "enum": [
                            "option_static_remotekey",
                            "option_anchor_outputs",
                            "option_zeroconf"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "fee_base_msat": {
                        "description": "amount we charge to use the channel",
                        "type": "msat"
                      },
                      "fee_proportional_millionths": {
                        "description": "amount we charge to use the channel in parts-per-million",
                        "type": "u32"
                      },
                      "feerate": {
                        "additionalProperties": false,
                        "description": "Feerates for the current tx",
                        "properties": {
                          "perkb": {
                            "description": "Feerate per 1000 virtual bytes",
                            "type": "u32"
                          },
                          "perkw": {
                            "description": "Feerate per 1000 weight (i.e kSipa)",
                            "type": "u32"
                          }
                        },
                        "required": [
                          "perkw",
                          "perkb"
                        ],
                        "type": "object"
                      },
                      "funding": {
                        "additionalProperties": false,
                        "properties": {
                          "fee_paid_msat": {
                            "description": "Amount we paid peer at open",
                            "type": "msat"
                          },
                          "fee_rcvd_msat": {
                            "description": "Amount we were paid by peer at open",
                            "type": "msat"
                          },
                          "local_funds_msat": {
                            "description": "Amount of channel we funded",
                            "type": "msat"
                          },
                          "local_msat": {
                            "description": "Amount of channel we funded (deprecated)",
                            "type": "msat"
                          },
                          "pushed_msat": {
                            "description": "Amount pushed from opener to peer",
                            "type": "msat"
                          },
                          "remote_funds_msat": {
                            "description": "Amount of channel they funded",
                            "type": "msat"
                          },
                          "remote_msat": {
                            "description": "Amount of channel they funded (deprecated)",
                            "type": "msat"
                          }
                        },
                        "required": [
                          "local_funds_msat",
                          "remote_funds_msat"
                        ],
                        "type": "object"
                      },
                      "funding_outnum": {
                        "description": "The 0-based output number of the funding transaction which opens the channel",
                        "type": "u32"
                      },
                      "funding_txid": {
                        "description": "ID of the funding transaction",
                        "type": "txid"
                      },
                      "htlc_minimum_msat": {
                        "deprecated": true
                      },
                      "htlcs": {
                        "description": "current HTLCs in this channel",
                        "items": {
                          "additionalProperties": true,
                          "allOf": [
                            {
                              "if": {
                                "properties": {
                                  "direction": {
                                    "enum": [
                                      "out"
                                    ]
                                  }
                                }
                              },
                              "then": {
                                "additionalProperties": false,
                                "properties": {
                                  "alias": {},
                                  "amount_msat": {},
                                  "direction": {},
                                  "expiry": {},
                                  "id": {},
                                  "local_trimmed": {},
                                  "msatoshi": {},
                                  "payment_hash": {},
                                  "state": {
                                    "description": "Status of the HTLC",
                                    "enum": [
                                      "SENT_ADD_HTLC",
                                      "SENT_ADD_COMMIT",
                                      "RCVD_ADD_REVOCATION",
                                      "RCVD_ADD_ACK_COMMIT",
                                      "SENT_ADD_ACK_REVOCATION",
                                      "RCVD_REMOVE_HTLC",
                                      "RCVD_REMOVE_COMMIT",
                                      "SENT_REMOVE_REVOCATION",
                                      "SENT_REMOVE_ACK_COMMIT",
                                      "RCVD_REMOVE_ACK_REVOCATION"
                                    ],
                                    "type": "string"
                                  },
                                  "status": {}
                                },
                                "required": [
                                  "state"
                                ]
                              }
                            },
                            {
                              "if": {
                                "properties": {
                                  "direction": {
                                    "enum": [
                                      "in"
                                    ]
                                  }
                                }
                              },
                              "then": {
                                "additionalProperties": false,
                                "properties": {
                                  "amount_msat": {},
                                  "direction": {},
                                  "expiry": {},
                                  "id": {},
                                  "local_trimmed": {},
                                  "msatoshi": {},
                                  "payment_hash": {},
                                  "state": {
                                    "description": "Status of the HTLC",
                                    "enum": [
                                      "RCVD_ADD_HTLC",
                                      "RCVD_ADD_COMMIT",
                                      "SENT_ADD_REVOCATION",
                                      "SENT_ADD_ACK_COMMIT",
                                      "RCVD_ADD_ACK_REVOCATION",
                                      "SENT_REMOVE_HTLC",
                                      "SENT_REMOVE_COMMIT",
                                      "RCVD_REMOVE_REVOCATION",
                                      "RCVD_REMOVE_ACK_COMMIT",
                                      "SENT_REMOVE_ACK_REVOCATION"
                                    ],
                                    "type": "string"
                                  },
                                  "status": {}
                                },
                                "required": [
                                  "state"
                                ]
                              }
                            }
                          ],
                          "properties": {
                            "amount_msat": {
                              "description": "Amount send/received for this HTLC",
                              "type": "msat"
                            },
                            "direction": {
                              "description": "Whether it came from peer, or is going to peer",
                              "enum": [
                                "in",
                                "out"
                              ],
                              "type": "string"
                            },
                            "expiry": {
                              "description": "Block this HTLC expires at",
                              "type": "u32"
                            },
                            "id": {
                              "description": "Unique ID for this htlc on this channel in this direction",
                              "type": "u64"
                            },
                            "local_trimmed": {
                              "description": "if this is too small to enforce onchain",
                              "enum": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "msatoshi": {
                              "deprecated": true
                            },
                            "payment_hash": {
                              "description": "the hash of the payment_preimage which will prove payment",
                              "maxLength": 64,
                              "minLength": 64,
                              "type": "hash"
                            },
                            "status": {
                              "description": "set if this HTLC is currently waiting on a hook (and shows what plugin)",
                              "type": "string"
                            }
                          },
                          "required": [
                            "direction",
                            "id",
                            "amount_msat",
                            "expiry",
                            "payment_hash",
                            "state"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "in_fulfilled_msat": {
                        "description": "Total amount of successful incoming payment attempts",
                        "type": "msat"
                      },
                      "in_msatoshi_fulfilled": {
                        "deprecated": true
                      },
                      "in_msatoshi_offered": {
                        "deprecated": true
                      },
                      "in_offered_msat": {
                        "description": "Total amount of incoming payment attempts",
                        "type": "msat"
                      },
                      "in_payments_fulfilled": {
                        "description": "Number of successful incoming payment attempts",
                        "type": "u64"
                      },
                      "in_payments_offered": {
                        "description": "Number of incoming payment attempts",
                        "type": "u64"
                      },
                      "inflight": {
                        "description": "Current candidate funding transactions (only for dual-funding)",
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "feerate": {
                              "description": "The feerate for this funding transaction in per-1000-weight, with \"kpw\" appended",
                              "type": "string"
                            },
                            "funding_outnum": {
                              "description": "The 0-based output number of the funding transaction which opens the channel",
                              "type": "u32"
                            },
                            "funding_txid": {
                              "description": "ID of the funding transaction",
                              "type": "txid"
                            },
                            "our_funding_msat": {
                              "description": "amount we have in the channel",
                              "type": "msat"
                            },
                            "scratch_txid": {
                              "description": "The commitment transaction txid we would use if we went onchain now",
                              "type": "txid"
                            },
                            "total_funding_msat": {
                              "description": "total amount in the channel",
                              "type": "msat"
                            }
                          },
                          "required": [
                            "funding_txid",
                            "funding_outnum",
                            "feerate",
                            "total_funding_msat",
                            "our_funding_msat",
                            "scratch_txid"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "initial_feerate": {
                        "description": "For inflight opens, the first feerate used to initiate the channel open",
                        "type": "string"
                      },
                      "last_feerate": {
                        "description": "For inflight opens, the most recent feerate used on the channel open",
                        "type": "string"
                      },
                      "max_accepted_htlcs": {
                        "description": "Maximum number of incoming HTLC we will accept at once",
                        "type": "u32"
                      },
                      "max_htlc_value_in_flight_msat": {
                        "deprecated": true
                      },
                      "max_to_us_msat": {
                        "description": "most amount owed to us ever",
                        "type": "msat"
                      },
                      "max_total_htlc_in_msat": {
                        "description": "max amount accept in a single payment",
                        "type": "msat"
                      },
                      "maximum_htlc_out_msat": {
                        "description": "the maximum amount HTLC we will send",
                        "type": "msat"
                      },
                      "min_to_us_msat": {
                        "description": "least amount owed to us ever",
                        "type": "msat"
                      },
                      "minimum_htlc_in_msat": {
                        "description": "the minimum amount HTLC we accept",
                        "type": "msat"
                      },
                      "minimum_htlc_out_msat": {
                        "description": "the minimum amount HTLC we will send",
                        "type": "msat"
                      },
                      "msatoshi_to_us": {
                        "deprecated": true
                      },
                      "msatoshi_to_us_max": {
                        "deprecated": true
                      },
                      "msatoshi_to_us_min": {
                        "deprecated": true
                      },
                      "msatoshi_total": {
                        "deprecated": true
                      },
                      "next_fee_step": {
                        "description": "For inflight opens, the next feerate step we'll use for the channel open",
                        "type": "u32"
                      },
                      "next_feerate": {
                        "description": "For inflight opens, the next feerate we'll use for the channel open",
                        "type": "string"
                      },
                      "opener": {
                        "description": "Who initiated the channel",
                        "enum": [
                          "local",
                          "remote"
                        ],
                        "type": "string"
                      },
                      "our_channel_reserve_satoshis": {
                        "deprecated": true
                      },
                      "our_reserve_msat": {
                        "description": "minimum they insist we keep in channel",
                        "type": "msat"
                      },
                      "our_to_self_delay": {
                        "description": "the number of blocks before we can take our funds if we unilateral close",
                        "type": "u32"
                      },
                      "out_fulfilled_msat": {
                        "description": "Total amount of successful outgoing payment attempts",
                        "type": "msat"
                      },
                      "out_msatoshi_fulfilled": {
                        "deprecated": true
                      },
                      "out_msatoshi_offered": {
                        "deprecated": true
                      },
                      "out_offered_msat": {
                        "description": "Total amount of outgoing payment attempts",
                        "type": "msat"
                      },
                      "out_payments_fulfilled": {
                        "description": "Number of successful outgoing payment attempts",
                        "type": "u64"
                      },
                      "out_payments_offered": {
                        "description": "Number of outgoing payment attempts",
                        "type": "u64"
                      },
                      "owner": {
                        "description": "The current subdaemon controlling this connection",
                        "type": "string"
                      },
                      "private": {
                        "description": "if False, we will not announce this channel",
                        "type": "boolean"
                      },
                      "receivable_msat": {
                        "description": "total peer could send through channel",
                        "type": "msat"
                      },
                      "receivable_msatoshi": {
                        "deprecated": true
                      },
                      "scratch_txid": {
                        "description": "The txid we would use if we went onchain now",
                        "type": "txid"
                      },
                      "short_channel_id": {
                        "description": "The short_channel_id (once locked in)",
                        "type": "short_channel_id"
                      },
                      "spendable_msat": {
                        "description": "total we could send through channel",
                        "type": "msat"
                      },
                      "spendable_msatoshi": {
                        "deprecated": true
                      },
                      "state": {
                        "description": "the channel state, in particular \"CHANNELD_NORMAL\" means the channel can be used normally",
                        "enum": [
                          "OPENINGD",
                          "CHANNELD_AWAITING_LOCKIN",
                          "CHANNELD_NORMAL",
                          "CHANNELD_SHUTTING_DOWN",
                          "CLOSINGD_SIGEXCHANGE",
                          "CLOSINGD_COMPLETE",
                          "AWAITING_UNILATERAL",
                          "FUNDING_SPEND_SEEN",
                          "ONCHAIN",
                          "DUALOPEND_OPEN_INIT",
                          "DUALOPEND_AWAITING_LOCKIN"
                        ],
                        "type": "string"
                      },
                      "state_changes": {
                        "description": "Prior state changes",
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "cause": {
                              "description": "What caused the change",
                              "enum": [
                                "unknown",
                                "local",
                                "user",
                                "remote",
                                "protocol",
                                "onchain"
                              ],
                              "type": "string"
                            },
                            "message": {
                              "description": "Human-readable explanation",
                              "type": "string"
                            },
                            "new_state": {
                              "description": "New state",
                              "enum": [
                                "OPENINGD",
                                "CHANNELD_AWAITING_LOCKIN",
                                "CHANNELD_NORMAL",
                                "CHANNELD_SHUTTING_DOWN",
                                "CLOSINGD_SIGEXCHANGE",
                                "CLOSINGD_COMPLETE",
                                "AWAITING_UNILATERAL",
                                "FUNDING_SPEND_SEEN",
                                "ONCHAIN",
                                "DUALOPEND_OPEN_INIT",
                                "DUALOPEND_AWAITING_LOCKIN"
                              ],
                              "type": "string"
                            },
                            "old_state": {
                              "description": "Previous state",
                              "enum": [
                                "OPENINGD",
                                "CHANNELD_AWAITING_LOCKIN",
                                "CHANNELD_NORMAL",
                                "CHANNELD_SHUTTING_DOWN",
                                "CLOSINGD_SIGEXCHANGE",
                                "CLOSINGD_COMPLETE",
                                "AWAITING_UNILATERAL",
                                "FUNDING_SPEND_SEEN",
                                "ONCHAIN",
                                "DUALOPEND_OPEN_INIT",
                                "DUALOPEND_AWAITING_LOCKIN"
                              ],
                              "type": "string"
                            },
                            "timestamp": {
                              "description": "UTC timestamp of form YYYY-mm-ddTHH:MM:SS.%03dZ",
                              "type": "string"
                            }
                          },
                          "required": [
                            "timestamp",
                            "old_state",
                            "new_state",
                            "cause",
                            "message"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "status": {
                        "items": {
                          "description": "Billboard log of significant changes",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "their_channel_reserve_satoshis": {
                        "deprecated": true
                      },
                      "their_reserve_msat": {
                        "description": "minimum we insist they keep in channel",
                        "type": "msat"
                      },
                      "their_to_self_delay": {
                        "description": "the number of blocks before they can take their funds if they unilateral close",
                        "type": "u32"
                      },
                      "to_us_msat": {
                        "description": "how much of channel is owed to us",
                        "type": "msat"
                      },
                      "total_msat": {
                        "description": "total amount in the channel",
                        "type": "msat"
                      }
                    },
                    "required": [
                      "state",
                      "opener",
                      "features"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "connected": {
                  "description": "True if the peer is currently connected",
                  "type": "boolean"
                },
                "id": {
                  "description": "the public key of the peer",
                  "type": "pubkey"
                },
                "log": {
                  "description": "if *level* is specified, logs for this peer",
                  "items": {
                    "additionalProperties": true,
                    "allOf": [
                      {
                        "if": {
                          "properties": {
                            "type": {
                              "enum": [
                                "SKIPPED"
                              ]
                            }
                          }
                        },
                        "then": {
                          "additionalProperties": false,
                          "properties": {
                            "num_skipped": {
                              "description": "number of deleted/omitted entries",
                              "type": "u32"
                            },
                            "type": {}
                          },
                          "required": [
                            "num_skipped"
                          ],
                          "type": "object"
                        }
                      },
                      {
                        "if": {
                          "properties": {
                            "type": {
                              "enum": [
                                "BROKEN",
                                "UNUSUAL",
                                "INFO",
                                "DEBUG"
                              ]
                            }
                          }
                        },
                        "then": {
                          "additionalProperties": false,
                          "properties": {
                            "log": {
                              "description": "The actual log message",
                              "type": "string"
                            },
                            "node_id": {
                              "description": "The peer this is associated with",
                              "type": "pubkey"
                            },
                            "source": {
                              "description": "The particular logbook this was found in",
                              "type": "string"
                            },
                            "time": {
                              "description": "UNIX timestamp with 9 decimal places",
                              "type": "string"
                            },
                            "type": {}
                          },
                          "required": [
                            "time",
                            "source",
                            "log",
                            "node_id"
                          ],
                          "type": "object"
                        }
                      },
                      {
                        "if": {
                          "properties": {
                            "type": {
                              "enum": [
                                "IO_IN",
                                "IO_OUT"
                              ]
                            }
                          }
                        },
                        "then": {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "description": "The IO which occurred",
                              "type": "hex"
                            },
                            "log": {
                              "description": "The actual log message",
                              "type": "string"
                            },
                            "node_id": {
                              "description": "The peer this is associated with",
                              "type": "pubkey"
                            },
                            "source": {
                              "description": "The particular logbook this was found in",
                              "type": "string"
                            },
                            "time": {
                              "description": "UNIX timestamp with 9 decimal places",
                              "type": "string"
                            },
                            "type": {}
                          },
                          "required": [
                            "time",
                            "source",
                            "log",
                            "node_id",
                            "data"
                          ],
                          "type": "object"
                        }
                      }
                    ],
                    "properties": {
                      "type": {
                        "enum": [
                          "SKIPPED",
                          "BROKEN",
                          "UNUSUAL",
                          "INFO",
                          "DEBUG",
                          "IO_IN",
                          "IO_OUT"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "id",
                "connected",
                "channels"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "peers"
        ],
        "type": "object"
      }
    },
    "ListSendPays": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "bolt11": {
            "type": "string"
          },
          "payment_hash": {
            "type": "hash"
          },
          "status": {
            "enum": [
              "pending",
              "complete",
              "failed"
            ],
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "payments": {
            "items": {
              "additionalProperties": true,
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "status": {
                        "enum": [
                          "complete"
                        ],
                        "type": "string"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "amount_msat": {},
                      "amount_sent_msat": {},
                      "bolt11": {},
                      "bolt12": {},
                      "completed_at": {},
                      "created_at": {},
                      "description": {},
                      "destination": {},
                      "groupid": {},
                      "id": {},
                      "label": {},
                      "msatoshi": {},
                      "msatoshi_sent": {},
                      "partid": {},
                      "payment_hash": {},
                      "payment_preimage": {
                        "description": "the proof of payment: SHA256 of this **payment_hash**",
                        "maxLength": 64,
                        "minLength": 64,
                        "type": "secret"
                      },
                      "status": {}
                    },
                    "required": [
                      "payment_preimage"
                    ]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "status": {
                        "enum": [
                          "failed"
                        ],
                        "type": "string"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "amount_msat": {},
                      "amount_sent_msat": {},
                      "bolt11": {},
                      "bolt12": {},
                      "completed_at": {},
                      "created_at": {},
                      "description": {},
                      "destination": {},
                      "erroronion": {
                        "description": "the onion message returned",
                        "type": "hex"
                      },
                      "groupid": {},
                      "id": {},
                      "label": {},
                      "msatoshi": {},
                      "msatoshi_sent": {},
                      "partid": {},
                      "payment_hash": {},
                      "status": {}
                    },
                    "required": []
                  }
                },
                {
                  "if": {
                    "properties": {
                      "status": {
                        "enum": [
                          "pending"
                        ],
                        "type": "string"
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "properties": {
                      "amount_msat": {},
                      "amount_sent_msat": {},
                      "bolt11": {},
                      "bolt12": {},
                      "created_at": {},
                      "description": {},
                      "destination": {},
                      "groupid": {},
                      "id": {},
                      "label": {},
                      "msatoshi": {},
                      "msatoshi_sent": {},
                      "partid": {},
                      "payment_hash": {},
                      "status": {}
                    },
                    "required": []
                  }
                }
              ],
              "properties": {
                "amount_msat": {
                  "description": "The amount delivered to destination (if known)",
                  "type": "msat"
                },
                "amount_sent_msat": {
                  "description": "The amount sent",
                  "type": "msat"
                },
                "bolt11": {
                  "description": "the bolt11 string (if pay supplied one)",
                  "type": "string"
                },
                "bolt12": {
                  "description": "the bolt12 string (if supplied for pay: **experimental-offers** only).",
                  "type": "string"
                },
                "created_at": {
                  "description": "the UNIX timestamp showing when this payment was initiated",
                  "type": "u64"
                },
                "description": {
                  "description": "the description matching the bolt11 description hash (if pay supplied one)",
                  "type": "string"
                },
                "destination": {
                  "description": "the final destination of the payment if known",
                  "type": "pubkey"
                },
                "groupid": {
                  "description": "Grouping key to disambiguate multiple attempts to pay an invoice or the same payment_hash",
                  "type": "u64"
                },
                "id": {
                  "description": "unique ID for this payment attempt",
                  "type": "u64"
                },
                "label": {
                  "description": "the label, if given to sendpay",
                  "type": "string"
                },
                "msatoshi": {
                  "deprecated": true
                },
                "msatoshi_sent": {
                  "deprecated": true
                },
                "payment_hash": {
                  "description": "the hash of the *payment_preimage* which will prove payment",
                  "maxLength": 64,
                  "minLength": 64,
                  "type": "hash"
                },
                "status": {
                  "description": "status of the payment",
                  "enum": [
                    "pending",
                    "failed",
                    "complete"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "id",
                "payment_hash",
                "status",
                "groupid",
                "created_at",
                "amount_sent_msat"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "payments"
        ],
        "type": "object"
      }
    },
    "ListTransactions": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {},
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "transactions": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "blockheight": {
                  "description": "the block height of this tx",
                  "type": "u32"
                },
                "channel": {
                  "description": "the channel this transaction is associated with (*EXPERIMENTAL_FEATURES* only)",
                  "type": "short_channel_id"
                },
                "hash": {
                  "description": "the transaction id",
                  "type": "txid"
                },
                "inputs": {
                  "description": "Each input, in order",
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "channel": {
                        "description": "the channel this input is associated with (*EXPERIMENTAL_FEATURES* only)",
                        "type": "short_channel_id"
                      },
                      "index": {
                        "description": "the output spent",
                        "type": "u32"
                      },
                      "sequence": {
                        "description": "the nSequence value",
                        "type": "u32"
                      },
                      "txid": {
                        "description": "the transaction id spent",
                        "type": "txid"
                      },
                      "type": {
                        "description": "the purpose of this input (*EXPERIMENTAL_FEATURES* only)",
                        "enum": [
                          "theirs",
                          "deposit",
                          "withdraw",
                          "channel_funding",
                          "channel_mutual_close",
                          "channel_unilateral_close",
                          "channel_sweep",
                          "channel_htlc_success",
                          "channel_htlc_timeout",
                          "channel_penalty",
                          "channel_unilateral_cheat"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "txid",
                      "index",
                      "sequence"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "locktime": {
                  "description": "The nLocktime for this tx",
                  "type": "u32"
                },
                "outputs": {
                  "description": "Each output, in order",
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "amount_msat": {
                        "description": "the amount of the output",
                        "type": "msat"
                      },
                      "channel": {
                        "description": "the channel this output is associated with (*EXPERIMENTAL_FEATURES* only)",
                        "type": "short_channel_id"
                      },
                      "index": {
                        "description": "the 0-based output number",
                        "type": "u32"
                      },
                      "msat": {
                        "deprecated": true
                      },
                      "scriptPubKey": {
                        "description": "the scriptPubKey",
                        "type": "hex"
                      },
                      "type": {
                        "description": "the purpose of this output (*EXPERIMENTAL_FEATURES* only)",
                        "enum": [
                          "theirs",
                          "deposit",
                          "withdraw",
                          "channel_funding",
                          "channel_mutual_close",
                          "channel_unilateral_close",
                          "channel_sweep",
                          "channel_htlc_success",
                          "channel_htlc_timeout",
                          "channel_penalty",
                          "channel_unilateral_cheat"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "index",
                      "amount_msat",
                      "scriptPubKey"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "rawtx": {
                  "description": "the raw transaction",
                  "type": "hex"
                },
                "txindex": {
                  "description": "the transaction number within the block",
                  "type": "u32"
                },
                "type": {
                  "items": {
                    "description": "Reason we care about this transaction (*EXPERIMENTAL_FEATURES* only)",
                    "enum": [
                      "theirs",
                      "deposit",
                      "withdraw",
                      "channel_funding",
                      "channel_mutual_close",
                      "channel_unilateral_close",
                      "channel_sweep",
                      "channel_htlc_success",
                      "channel_htlc_timeout",
                      "channel_penalty",
                      "channel_unilateral_cheat"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "The nVersion for this tx",
                  "type": "u32"
                }
              },
              "required": [
                "hash",
                "rawtx",
                "blockheight",
                "txindex",
                "locktime",
                "version",
                "inputs",
                "outputs"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "transactions"
        ],
        "type": "object"
      }
    },
    "NewAddr": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "addresstype": {
            "enum": [
              "bech32",
              "p2sh-segwit",
              "all"
            ],
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "bech32": {
            "description": "The bech32 (native segwit) address",
            "type": "string"
          },
          "p2sh-segwit": {
            "description": "The p2sh-wrapped address",
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      }
    },
    "Pay": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "amount_msat": {
            "type": "msat"
          },
          "bolt11": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "exclude": {
            "items": {
              "oneOf": [
                {
                  "type": "short_channel_id_dir"
                },
                {
                  "type": "pubkey"
                }
              ]
            },
            "type": "array"
          },
          "exemptfee": {
            "type": "msat"
          },
          "label": {
            "type": "string"
          },
          "localinvreqid": {
            "type": "hex"
          },
          "maxdelay": {
            "type": "u16"
          },
          "maxfee": {
            "type": "msat"
          },
          "maxfeepercent": {
            "type": "number"
          },
          "retry_for": {
            "type": "u16"
          },
          "riskfactor": {
            "type": "number"
          }
        },
        "required": [
          "bolt11"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "amount_msat": {
            "description": "Amount the recipient received",
            "type": "msat"
          },
          "amount_sent_msat": {
            "description": "Total amount we sent (including fees)",
            "type": "msat"
          },
          "created_at": {
            "description": "the UNIX timestamp showing when this payment was initiated",
            "type": "number"
          },
          "destination": {
            "description": "the final destination of the payment",
            "type": "pubkey"
          },
          "msatoshi": {
            "deprecated": true
          },
          "msatoshi_sent": {
            "deprecated": true
          },
          "parts": {
            "description": "how many attempts this took",
            "type": "u32"
          },
          "payment_hash": {
            "description": "the hash of the *payment_preimage* which will prove payment",
            "maxLength": 64,
            "minLength": 64,
            "type": "hash"
          },
          "payment_preimage": {
            "description": "the proof of payment: SHA256 of this **payment_hash**",
            "maxLength": 64,
            "minLength": 64,
            "type": "secret"
          },
          "status": {
            "description": "status of payment",
            "enum": [
              "complete",
              "pending",
              "failed"
            ],
            "type": "string"
          },
          "warning_partial_completion": {
            "description": "Not all parts of a multi-part payment have completed",
            "type": "string"
          }
        },
        "required": [
          "payment_preimage",
          "payment_hash",
          "created_at",
          "parts",
          "amount_msat",
          "amount_sent_msat",
          "status"
        ],
        "type": "object"
      }
    },
    "Ping": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "pubkey"
          },
          "len": {
            "type": "number"
          },
          "pongbytes": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "totlen": {
            "description": "the answer length of the reply message (including header: 0 means no reply expected)",
            "type": "u16"
          }
        },
        "required": [
          "totlen"
        ],
        "type": "object"
      }
    },
    "SendOnion": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "amount_msat": {
            "type": "msat"
          },
          "bolt11": {
            "type": "string"
          },
          "destination": {
            "type": "pubkey"
          },
          "first_hop": {
            "properties": {
              "amount_msat": {
                "type": "msat"
              },
              "delay": {
                "type": "u16"
              },
              "id": {
                "type": "pubkey"
              }
            },
            "required": [
              "id",
              "amount_msat",
              "delay"
            ],
            "type": "object"
          },
          "groupid": {
            "type": "u64"
          },
          "label": {
            "type": "string"
          },
          "localinvreqid": {
            "type": "hash"
          },
          "onion": {
            "type": "hex"
          },
          "partid": {
            "type": "u16"
          },
          "payment_hash": {
            "type": "hash"
          },
          "shared_secrets": {
            "items": {
              "type": "secret"
            },
            "type": "array"
          }
        },
        "required": [
          "onion",
          "first_hop",
          "payment_hash"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": true,
        "allOf": [
          {
            "if": {
              "properties": {
                "status": {
                  "enum": [
                    "complete"
                  ],
                  "type": "string"
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "amount_sent_msat": {},
                "bolt11": {},
                "bolt12": {},
                "created_at": {},
                "destination": {},
                "groupid": {},
                "id": {},
                "label": {},
                "msatoshi": {},
                "msatoshi_sent": {},
                "partid": {},
                "payment_hash": {},
                "payment_preimage": {
                  "description": "the proof of payment: SHA256 of this **payment_hash**",
                  "maxLength": 64,
                  "minLength": 64,
                  "type": "secret"
                },
                "status": {}
              },
              "required": [
                "payment_preimage"
              ]
            }
          },
          {
            "if": {
              "properties": {
                "status": {
                  "enum": [
                    "pending"
                  ],
                  "type": "string"
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "amount_sent_msat": {},
                "bolt11": {},
                "bolt12": {},
                "created_at": {},
                "destination": {},
                "groupid": {},
                "id": {},
                "label": {},
                "message": {
                  "description": "Monitor status with listpays or waitsendpay",
                  "type": "string"
                },
                "msatoshi": {},
                "msatoshi_sent": {},
                "partid": {},
                "payment_hash": {},
                "status": {}
              },
              "required": []
            }
          }
        ],
        "properties": {
          "amount_msat": {
            "description": "The amount delivered to destination (if known)",
            "type": "msat"
          },
          "amount_sent_msat": {
            "description": "The amount sent",
            "type": "msat"
          },
          "bolt11": {
            "description": "the bolt11 string (if supplied)",
            "type": "string"
          },
          "bolt12": {
            "description": "the bolt12 string (if supplied: **experimental-offers** only).",
            "type": "string"
          },
          "created_at": {
            "description": "the UNIX timestamp showing when this payment was initiated",
            "type": "u64"
          },
          "destination": {
            "description": "the final destination of the payment if known",
            "type": "pubkey"
          },
          "id": {
            "description": "unique ID for this payment attempt",
            "type": "u64"
          },
          "label": {
            "description": "the label, if given to sendpay",
            "type": "string"
          },
          "msatoshi": {
            "deprecated": true
          },
          "msatoshi_sent": {
            "deprecated": true
          },
          "partid": {
            "description": "the partid (if supplied) to sendonion/sendpay",
            "type": "u64"
          },
          "payment_hash": {
            "description": "the hash of the *payment_preimage* which will prove payment",
            "maxLength": 64,
            "minLength": 64,
            "type": "hash"
          },
          "status": {
            "description": "status of the payment (could be complete if already sent previously)",
            "enum": [
              "pending",
              "complete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "payment_hash",
          "status",
          "created_at",
          "amount_sent_msat"
        ],
        "type": "object"
      }
    },
    "SendPay": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "amount_msat": {
            "type": "msat"
          },
          "bolt11": {
            "type": "string"
          },
          "groupid": {
            "type": "u64"
          },
          "label": {
            "type": "string"
          },
          "localinvreqid": {
            "type": "hex"
          },
          "partid": {
            "type": "u16"
          },
          "payment_hash": {
            "type": "hash"
          },
          "payment_secret": {
            "type": "secret"
          },
          "route": {
            "items": {
              "properties": {
                "amount_msat": {
                  "type": "msat"
                },
                "channel": {
                  "type": "short_channel_id"
                },
                "delay": {
                  "type": "u16"
                },
                "id": {
                  "type": "pubkey"
                },
                "msatoshi": {
                  "deprecated": "true"
                }
              },
              "required": [
                "amount_msat",
                "id",
                "delay",
                "channel"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "route",
          "payment_hash"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": true,
        "allOf": [
          {
            "if": {
              "properties": {
                "status": {
                  "enum": [
                    "complete"
                  ],
                  "type": "string"
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "amount_sent_msat": {},
                "bolt11": {},
                "bolt12": {},
                "completed_at": {},
                "created_at": {},
                "destination": {},
                "groupid": {},
                "id": {},
                "label": {},
                "msatoshi": {},
                "msatoshi_sent": {},
                "partid": {},
                "payment_hash": {},
                "payment_preimage": {
                  "description": "the proof of payment: SHA256 of this **payment_hash**",
                  "maxLength": 64,
                  "minLength": 64,
                  "type": "secret"
                },
                "status": {}
              },
              "required": [
                "payment_preimage"
              ]
            }
          },
          {
            "if": {
              "properties": {
                "status": {
                  "enum": [
                    "pending"
                  ],
                  "type": "string"
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "amount_sent_msat": {},
                "bolt11": {},
                "bolt12": {},
                "completed_at": {},
                "created_at": {},
                "destination": {},
                "groupid": {},
                "id": {},
                "label": {},
                "message": {
                  "description": "Monitor status with listpays or waitsendpay",
                  "type": "string"
                },
                "msatoshi": {},
                "msatoshi_sent": {},
                "partid": {},
                "payment_hash": {},
                "status": {}
              },
              "required": [
                "message"
              ]
            }
          }
        ],
        "properties": {
          "amount_msat": {
            "description": "The amount delivered to destination (if known)",
            "type": "msat"
          },
          "amount_sent_msat": {
            "description": "The amount sent",
            "type": "msat"
          },
          "bolt11": {
            "description": "the bolt11 string (if supplied)",
            "type": "string"
          },
          "bolt12": {
            "description": "the bolt12 string (if supplied: **experimental-offers** only).",
            "type": "string"
          },
          "completed_at": {
            "description": "the UNIX timestamp showing when this payment was completed",
            "type": "u64"
          },
          "created_at": {
            "description": "the UNIX timestamp showing when this payment was initiated",
            "type": "u64"
          },
          "destination": {
            "description": "the final destination of the payment if known",
            "type": "pubkey"
          },
          "groupid": {
            "description": "Grouping key to disambiguate multiple attempts to pay an invoice or the same payment_hash",
            "type": "u64"
          },
          "id": {
            "description": "unique ID for this payment attempt",
            "type": "u64"
          },
          "label": {
            "description": "the *label*, if given to sendpay",
            "type": "string"
          },
          "msatoshi": {
            "deprecated": true
          },
          "msatoshi_sent": {
            "deprecated": true
          },
          "partid": {
            "description": "the *partid*, if given to sendpay",
            "type": "u64"
          },
          "payment_hash": {
            "description": "the hash of the *payment_preimage* which will prove payment",
            "maxLength": 64,
            "minLength": 64,
            "type": "hash"
          },
          "status": {
            "description": "status of the payment (could be complete if already sent previously)",
            "enum": [
              "pending",
              "complete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "payment_hash",
          "status",
          "created_at",
          "amount_sent_msat"
        ],
        "type": "object"
      }
    },
    "SendPsbt": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "psbt": {
            "type": "string"
          },
          "reserve": {
            "type": "boolean"
          }
        },
        "required": [
          "psbt"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "tx": {
            "description": "The raw transaction which was sent",
            "type": "hex"
          },
          "txid": {
            "description": "The txid of the **tx**",
            "type": "txid"
          }
        },
        "required": [
          "tx",
          "txid"
        ],
        "type": "object"
      }
    },
    "SetChannel": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "enforcedelay": {
            "type": "u32"
          },
          "feebase": {
            "type": "msat"
          },
          "feeppm": {
            "type": "u32"
          },
          "htlcmax": {
            "type": "msat"
          },
          "htlcmin": {
            "type": "msat"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "channels": {
            "description": "channel(s) set, and their resulting configuration",
            "items": {
              "additionalProperties": false,
              "properties": {
                "channel_id": {
                  "description": "The channel_id of the channel",
                  "maxLength": 64,
                  "minLength": 64,
                  "type": "hex"
                },
                "fee_base_msat": {
                  "description": "The resulting feebase (this is the BOLT #7 name)",
                  "type": "msat"
                },
                "fee_proportional_millionths": {
                  "description": "The resulting feeppm (this is the BOLT #7 name)",
                  "type": "u32"
                },
                "maximum_htlc_out_msat": {
                  "description": "The resulting htlcmax we will advertize (the BOLT #7 name is htlc_maximum_msat)",
                  "type": "msat"
                },
                "minimum_htlc_out_msat": {
                  "description": "The resulting htlcmin we will advertize (the BOLT #7 name is htlc_minimum_msat)",
                  "type": "msat"
                },
                "peer_id": {
                  "description": "The node_id of the peer",
                  "type": "pubkey"
                },
                "short_channel_id": {
                  "description": "the short_channel_id (if locked in)",
                  "type": "short_channel_id"
                },
                "warning_htlcmax_too_high": {
                  "description": "The requested htlcmax was greater than the channel capacity, so we set it to the channel capacity",
                  "type": "string"
                },
                "warning_htlcmin_too_low": {
                  "description": "The requested htlcmin was too low for this peer, so we set it to the minimum they will allow",
                  "type": "string"
                }
              },
              "required": [
                "peer_id",
                "channel_id",
                "fee_base_msat",
                "fee_proportional_millionths",
                "minimum_htlc_out_msat",
                "maximum_htlc_out_msat"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "channels"
        ],
        "type": "object"
      }
    },
    "SignMessage": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "recid": {
            "description": "The recovery id (0, 1, 2 or 3)",
            "maxLength": 2,
            "minLength": 2,
            "type": "hex"
          },
          "signature": {
            "description": "The signature",
            "maxLength": 128,
            "minLength": 128,
            "type": "hex"
          },
          "zbase": {
            "description": "*signature* and *recid* encoded in a style compatible with **lnd**'s [SignMessageRequest](https://api.lightning.community/#grpc-request-signmessagerequest)",
            "type": "string"
          }
        },
        "required": [
          "signature",
          "recid",
          "zbase"
        ],
        "type": "object"
      }
    },
    "SignPsbt": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "psbt": {
            "type": "string"
          },
          "signonly": {
            "items": {
              "type": "u32"
            },
            "type": "array"
          }
        },
        "required": [
          "psbt"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "signed_psbt": {
            "description": "The fully signed PSBT",
            "type": "string"
          }
        },
        "required": [
          "signed_psbt"
        ],
        "type": "object"
      }
    },
    "Stop": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {},
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "enum": [
          "Shutdown complete"
        ],
        "type": "string"
      }
    },
    "TxDiscard": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "txid": {
            "type": "txid"
          }
        },
        "required": [
          "txid"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "txid": {
            "description": "the transaction id of *unsigned_tx*",
            "type": "txid"
          },
          "unsigned_tx": {
            "description": "the unsigned transaction",
            "type": "hex"
          }
        },
        "required": [
          "unsigned_tx",
          "txid"
        ],
        "type": "object"
      }
    },
    "TxPrepare": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "feerate": {
            "type": "feerate"
          },
          "minconf": {
            "type": "u32"
          },
          "outputs": {
            "items": {
              "type": "outputdesc"
            },
            "type": "array"
          },
          "utxos": {
            "items": {
              "type": "outpoint"
            },
            "type": "array"
          }
        },
        "required": [
          "outputs"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "psbt": {
            "description": "the PSBT representing the unsigned transaction",
            "type": "string"
          },
          "txid": {
            "description": "the transaction id of *unsigned_tx*; you hand this to lightning-txsend(7) or lightning-txdiscard(7), as the inputs of this transaction are reserved.",
            "type": "txid"
          },
          "unsigned_tx": {
            "description": "the unsigned transaction",
            "type": "hex"
          }
        },
        "required": [
          "psbt",
          "unsigned_tx",
          "txid"
        ],
        "type": "object"
      }
    },
    "TxSend": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "txid": {
            "type": "txid"
          }
        },
        "required": [
          "txid"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "psbt": {
            "description": "the completed PSBT representing the signed transaction",
            "type": "string"
          },
          "tx": {
            "description": "the fully signed transaction",
            "type": "hex"
          },
          "txid": {
            "description": "the transaction id of *tx*",
            "type": "txid"
          }
        },
        "required": [
          "psbt",
          "tx",
          "txid"
        ],
        "type": "object"
      }
    },
    "UtxoPsbt": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "excess_as_change": {
            "type": "boolean"
          },
          "feerate": {
            "type": "feerate"
          },
          "locktime": {
            "type": "u32"
          },
          "min_witness_weight": {
            "type": "u32"
          },
          "reserve": {
            "description": "reserve is a number: if non-zero number then reserveinputs is called (successfully, with exclusive true) on the returned PSBT for this number of blocks (default: 72).",
            "type": "u32"
          },
          "reservedok": {
            "type": "boolean"
          },
          "satoshi": {
            "type": "msat"
          },
          "startweight": {
            "type": "u32"
          },
          "utxos": {
            "items": {
              "type": "outpoint"
            },
            "type": "array"
          }
        },
        "required": [
          "satoshi",
          "feerate",
          "startweight",
          "utxos"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "change_outnum": {
            "description": "The 0-based output number where change was placed (only if parameter *excess_as_change* was true and there was sufficient funds)",
            "type": "u32"
          },
          "estimated_final_weight": {
            "description": "The estimated weight of the transaction once fully signed",
            "type": "u32"
          },
          "excess_msat": {
            "description": "The amount above *satoshi* which is available.  This could be zero, or dust; it will be zero if *change_outnum* is also returned",
            "type": "msat"
          },
          "feerate_per_kw": {
            "description": "The feerate used to create the PSBT, in satoshis-per-kiloweight",
            "type": "u32"
          },
          "psbt": {
            "description": "Unsigned PSBT which fulfills the parameters given",
            "type": "string"
          },
          "reservations": {
            "description": "If *reserve* was true or a non-zero number, just as per lightning-reserveinputs(7)",
            "items": {
              "additionalProperties": false,
              "properties": {
                "reserved": {
                  "description": "Whether this output is now reserved",
                  "enum": [
                    true
                  ],
                  "type": "boolean"
                },
                "reserved_to_block": {
                  "description": "The blockheight the reservation will expire",
                  "type": "u32"
                },
                "txid": {
                  "description": "The txid of the transaction",
                  "type": "txid"
                },
                "vout": {
                  "description": "The 0-based output number",
                  "type": "u32"
                },
                "was_reserved": {
                  "description": "Whether this output was previously reserved",
                  "type": "boolean"
                }
              },
              "required": [
                "txid",
                "vout",
                "was_reserved",
                "reserved",
                "reserved_to_block"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "psbt",
          "feerate_per_kw",
          "estimated_final_weight",
          "excess_msat"
        ],
        "type": "object"
      }
    },
    "WaitAnyInvoice": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "lastpay_index": {
            "type": "u64"
          },
          "timeout": {
            "type": "u64"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": true,
        "allOf": [
          {
            "else": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "bolt11": {},
                "bolt12": {},
                "description": {},
                "expires_at": {},
                "label": {},
                "msatoshi": {},
                "payment_hash": {},
                "status": {}
              }
            },
            "if": {
              "properties": {
                "status": {
                  "enum": [
                    "paid"
                  ],
                  "type": "string"
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "amount_received_msat": {
                  "description": "the amount actually received (could be slightly greater than *amount_msat*, since clients may overpay)",
                  "type": "msat"
                },
                "bolt11": {},
                "bolt12": {},
                "description": {},
                "expires_at": {},
                "label": {},
                "msatoshi": {},
                "msatoshi_received": {
                  "deprecated": true
                },
                "paid_at": {
                  "description": "UNIX timestamp of when it was paid",
                  "type": "u64"
                },
                "pay_index": {
                  "description": "Unique incrementing index for this payment",
                  "type": "u64"
                },
                "payment_hash": {},
                "payment_preimage": {
                  "description": "proof of payment",
                  "maxLength": 64,
                  "minLength": 64,
                  "type": "secret"
                },
                "status": {}
              },
              "required": [
                "pay_index",
                "amount_received_msat",
                "paid_at",
                "payment_preimage"
              ]
            }
          }
        ],
        "properties": {
          "amount_msat": {
            "description": "the amount required to pay this invoice",
            "type": "msat"
          },
          "bolt11": {
            "description": "the BOLT11 string (always present unless *bolt12* is)",
            "type": "string"
          },
          "bolt12": {
            "description": "the BOLT12 string (always present unless *bolt11* is)",
            "type": "string"
          },
          "description": {
            "description": "description used in the invoice",
            "type": "string"
          },
          "expires_at": {
            "description": "UNIX timestamp of when it will become / became unpayable",
            "type": "u64"
          },
          "label": {
            "description": "unique label supplied at invoice creation",
            "type": "string"
          },
          "msatoshi": {
            "deprecated": "true"
          },
          "payment_hash": {
            "description": "the hash of the *payment_preimage* which will prove payment",
            "maxLength": 64,
            "minLength": 64,
            "type": "hash"
          },
          "status": {
            "description": "Whether it's paid or expired",
            "enum": [
              "paid",
              "expired"
            ],
            "type": "string"
          }
        },
        "required": [
          "label",
          "description",
          "payment_hash",
          "status",
          "expires_at"
        ],
        "type": "object"
      }
    },
    "WaitInvoice": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "label": {
            "type": "string"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": true,
        "allOf": [
          {
            "else": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "bolt11": {},
                "bolt12": {},
                "description": {},
                "expires_at": {},
                "label": {},
                "msatoshi": {},
                "payment_hash": {},
                "status": {}
              }
            },
            "if": {
              "properties": {
                "status": {
                  "enum": [
                    "paid"
                  ],
                  "type": "string"
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "amount_received_msat": {
                  "description": "the amount actually received (could be slightly greater than *amount_msat*, since clients may overpay)",
                  "type": "msat"
                },
                "bolt11": {},
                "bolt12": {},
                "description": {},
                "expires_at": {},
                "label": {},
                "msatoshi": {},
                "msatoshi_received": {
                  "deprecated": true
                },
                "paid_at": {
                  "description": "UNIX timestamp of when it was paid",
                  "type": "u64"
                },
                "pay_index": {
                  "description": "Unique incrementing index for this payment",
                  "type": "u64"
                },
                "payment_hash": {},
                "payment_preimage": {
                  "description": "proof of payment",
                  "maxLength": 64,
                  "minLength": 64,
                  "type": "secret"
                },
                "status": {}
              },
              "required": [
                "pay_index",
                "amount_received_msat",
                "paid_at",
                "payment_preimage"
              ]
            }
          }
        ],
        "properties": {
          "amount_msat": {
            "description": "the amount required to pay this invoice",
            "type": "msat"
          },
          "bolt11": {
            "description": "the BOLT11 string (always present unless *bolt12* is)",
            "type": "string"
          },
          "bolt12": {
            "description": "the BOLT12 string (always present unless *bolt11* is)",
            "type": "string"
          },
          "description": {
            "description": "description used in the invoice",
            "type": "string"
          },
          "expires_at": {
            "description": "UNIX timestamp of when it will become / became unpayable",
            "type": "u64"
          },
          "label": {
            "description": "unique label supplied at invoice creation",
            "type": "string"
          },
          "msatoshi": {
            "deprecated": "true"
          },
          "payment_hash": {
            "description": "the hash of the *payment_preimage* which will prove payment",
            "maxLength": 64,
            "minLength": 64,
            "type": "hash"
          },
          "status": {
            "description": "Whether it's paid or expired",
            "enum": [
              "paid",
              "expired"
            ],
            "type": "string"
          }
        },
        "required": [
          "label",
          "description",
          "payment_hash",
          "status",
          "expires_at"
        ],
        "type": "object"
      }
    },
    "WaitSendPay": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "groupid": {
            "type": "u64"
          },
          "partid": {
            "type": "u64"
          },
          "payment_hash": {
            "type": "hash"
          },
          "timeout": {
            "type": "u32"
          }
        },
        "required": [
          "payment_hash"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": true,
        "allOf": [
          {
            "if": {
              "properties": {
                "status": {
                  "enum": [
                    "complete"
                  ],
                  "type": "string"
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "amount_msat": {},
                "amount_sent_msat": {},
                "bolt11": {},
                "bolt12": {},
                "completed_at": {},
                "created_at": {},
                "destination": {},
                "groupid": {},
                "id": {},
                "label": {},
                "msatoshi": {},
                "msatoshi_sent": {},
                "partid": {},
                "payment_hash": {},
                "payment_preimage": {
                  "description": "the proof of payment: SHA256 of this **payment_hash**",
                  "maxLength": 64,
                  "minLength": 64,
                  "type": "secret"
                },
                "status": {}
              },
              "required": [
                "payment_preimage"
              ]
            }
          }
        ],
        "properties": {
          "amount_msat": {
            "description": "The amount delivered to destination (if known)",
            "type": "msat"
          },
          "amount_sent_msat": {
            "description": "The amount sent",
            "type": "msat"
          },
          "bolt11": {
            "description": "the bolt11 string (if pay supplied one)",
            "type": "string"
          },
          "bolt12": {
            "description": "the bolt12 string (if supplied for pay: **experimental-offers** only).",
            "type": "string"
          },
          "completed_at": {
            "description": "the UNIX timestamp showing when this payment was completed",
            "type": "number"
          },
          "created_at": {
            "description": "the UNIX timestamp showing when this payment was initiated",
            "type": "u64"
          },
          "destination": {
            "description": "the final destination of the payment if known",
            "type": "pubkey"
          },
          "groupid": {
            "description": "Grouping key to disambiguate multiple attempts to pay an invoice or the same payment_hash",
            "type": "u64"
          },
          "id": {
            "description": "unique ID for this payment attempt",
            "type": "u64"
          },
          "label": {
            "description": "the label, if given to sendpay",
            "type": "string"
          },
          "msatoshi": {
            "deprecated": true
          },
          "msatoshi_sent": {
            "deprecated": true
          },
          "partid": {
            "description": "the *partid*, if given to sendpay",
            "type": "u64"
          },
          "payment_hash": {
            "description": "the hash of the *payment_preimage* which will prove payment",
            "maxLength": 64,
            "minLength": 64,
            "type": "hash"
          },
          "status": {
            "description": "status of the payment",
            "enum": [
              "complete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "payment_hash",
          "status",
          "created_at",
          "amount_sent_msat"
        ],
        "type": "object"
      }
    },
    "Withdraw": {
      "request": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "properties": {
          "destination": {
            "type": "string"
          },
          "feerate": {
            "type": "feerate"
          },
          "minconf": {
            "type": "u16"
          },
          "satoshi": {
            "type": "msat_or_all"
          },
          "utxos": {
            "items": {
              "type": "outpoint"
            },
            "type": "array"
          }
        },
        "required": [
          "destination"
        ],
        "type": "object"
      },
      "response": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "psbt": {
            "description": "the PSBT representing the unsigned transaction",
            "type": "string"
          },
          "tx": {
            "description": "the fully signed bitcoin transaction",
            "type": "hex"
          },
          "txid": {
            "description": "the transaction id of *tx*",
            "type": "txid"
          }
        },
        "required": [
          "psbt",
          "tx",
          "txid"
        ],
        "type": "object"
      }
    }
  }
}