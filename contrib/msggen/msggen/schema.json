{
  "methods": {
    "lightning-addgossip.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "addgossip",
      "title": "Command for injecting a gossip message (low-level)",
      "description": [
        "The **addgossip** RPC command injects a hex-encoded gossip message into the gossip daemon. It may return an error if it is malformed, or may update its internal state using the gossip message.",
        "",
        "Note that currently some paths will still silently reject the gossip: it is best effort.",
        "",
        "This is particularly used by plugins which may receive channel_update messages within error replies."
      ],
      "request": {
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "hex",
            "description": [
              "The raw, hex-encoded, gossip message to add to the local gossip view."
            ]
          }
        }
      },
      "response": {
        "properties": {}
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-pay(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:addgossip#1",
            "method": "addgossip",
            "params": {
              "message": "010078c3314666731e339c0b8434f7824797a084ed7ca3655991a672da068e2c44cb53b57b53a296c133bc879109a8931dc31e6913a4bda3d58559b99b95663e6d52775579447ef5526300e1bb89bc6af8557aa1c3810a91814eafad6d103f43182e17b16644cb38c1d58a8edd094303959a9f1f9d42ff6c32a21f9c118531f512c8679cabaccc6e39dbd95a4dac90e75a258893c3aa3f733d1b8890174d5ddea8003cadffe557773c54d2c07ca1d535c4bf85885f879ae466c16a516e8ffcfec1740e3f5c98ca9ce13f452e867befef5517f306ed6aa5119b79059bcc6f68f329986b665d16de7bc7df64e3537504c91eeabe0e59d3a2b68e4216ead2b0f6e3ef7c000006226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910f0000670000010000022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d590266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c0351802e3bd38009866c9da8ec4aa99cc4ea9c6c0dd46df15c61ef0ce1f271291714e5702324266de8403b3ab157a09f1f784d587af61831c998c151bcc21bb74c2b2314b"
            }
          },
          "response": {}
        },
        {
          "request": {
            "id": "example:addgossip#2",
            "method": "addgossip",
            "params": {
              "message": "0102420526c8eb62ec6999bbee5f1de4841cab734374ec642b7deeb0259e76220bf82e97a241c907d5ff52019655f7f9a614c285bb35690f3a1a2b928d7b2349a79e06226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910f000067000001000065b32a0e010100060000000000000000000000010000000a000000003b023380"
            }
          },
          "response": {}
        }
      ]
    },
    "lightning-addpsbtoutput.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.11",
      "rpc": "addpsbtoutput",
      "title": "Command to populate PSBT outputs from the wallet",
      "description": [
        "`addpsbtoutput` is a low-level RPC command which creates or modifies a PSBT by adding a single output of amount *satoshi*.",
        "",
        "This is used to receive funds into the on-chain wallet interactively using PSBTs."
      ],
      "request": {
        "required": [
          "satoshi"
        ],
        "properties": {
          "satoshi": {
            "type": "sat",
            "description": [
              "The satoshi value of the output. It can be a whole number, a whole number ending in *sat*, or a number with 1 to 8 decimal places ending in *btc*."
            ]
          },
          "initialpsbt": {
            "type": "string",
            "description": [
              "Base 64 encoded PSBT to add the output to. If not specified, one will be generated automatically."
            ]
          },
          "locktime": {
            "type": "u32",
            "description": [
              "If not set, it is set to a recent block height (if no initial psbt is specified)."
            ]
          },
          "destination": {
            "type": "string",
            "description": [
              "If it is not set, an internal address is generated."
            ]
          }
        }
      },
      "response": {
        "required": [
          "psbt",
          "estimated_added_weight",
          "outnum"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "Unsigned PSBT which fulfills the parameters given."
            ]
          },
          "estimated_added_weight": {
            "type": "u32",
            "description": [
              "The estimated weight of the added output."
            ]
          },
          "outnum": {
            "type": "u32",
            "description": [
              "The 0-based number where the output was placed."
            ]
          }
        }
      },
      "author": [
        "Dusty <<@dusty_daemon>> is mainly responsible."
      ],
      "see_also": [
        "lightning-fundpsbt(7)",
        "lightning-utxopsbt(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "description": [
            "Here is a command to make a PSBT with a 1,000,000 sat output that leads to the on-chain wallet:"
          ],
          "request": {
            "id": "example:addpsbtoutput#1",
            "method": "addpsbtoutput",
            "params": {
              "satoshi": 1000000,
              "locktime": 111
            }
          },
          "response": {
            "psbt": "cHNidP8BAgQCAAAAAQMEbwAAAAEEAQABBQEBAQYBAwH7BAIAAAAAAQMIQEIPAAAAAAABBCJRIO7yw3zIUblRUcdhCLSjdFxJsYHu2s0Y29bT0bGAGdcbAA==",
            "estimated_added_weight": 172,
            "outnum": 0
          }
        },
        {
          "request": {
            "id": "example:addpsbtoutput#2",
            "method": "addpsbtoutput",
            "params": [
              3333333,
              "cHNidP8BAgQCAAAAAQMEbwAAAAEEAQABBQECAQYBAwH7BAIAAAAAAQMIQEIPAAAAAAABBCJRIO7yw3zIUblRUcdhCLSjdFxJsYHu2s0Y29bT0bGAGdcbAAEDCNXcMgAAAAAAAQQiUSA2cYCeVGcxdSZII2urHpalr5osmF2lPbYRaw1nKyPcmQA="
            ]
          },
          "response": {
            "psbt": "cHNidP8BAgQCAAAAAQMEbwAAAAEEAQABBQECAQYBAwH7BAIAAAAAAQMIQEIPAAAAAAABBCJRIO7yw3zIUblRUcdhCLSjdFxJsYHu2s0Y29bT0bGAGdcbAAEDCNXcMgAAAAAAAQQiUSA2cYCeVGcxdSZII2urHpalr5osmF2lPbYRaw1nKyPcmQA=",
            "estimated_added_weight": 172,
            "outnum": 1
          }
        },
        {
          "request": {
            "id": "example:addpsbtoutput#3",
            "method": "addpsbtoutput",
            "params": {
              "satoshi": 3333333,
              "initialpsbt": "cHNidP8BAgQCAAAAAQMEbwAAAAEEAQABBQECAQYBAwH7BAIAAAAAAQMIQEIPAAAAAAABBCJRIO7yw3zIUblRUcdhCLSjdFxJsYHu2s0Y29bT0bGAGdcbAAEDCNXcMgAAAAAAAQQiUSA2cYCeVGcxdSZII2urHpalr5osmF2lPbYRaw1nKyPcmQA=",
              "destination": "bcrt1p52spc7t99z0wu444elxahxzkcu86gakzvnfp7ugudf567am2uspsuneuq9"
            }
          },
          "response": {
            "psbt": "cHNidP8BAgQCAAAAAQMEbwAAAAEEAQABBQEDAQYBAwH7BAIAAAAAAQMIQEIPAAAAAAABBCJRIO7yw3zIUblRUcdhCLSjdFxJsYHu2s0Y29bT0bGAGdcbAAEDCNXcMgAAAAAAAQQiUSA2cYCeVGcxdSZII2urHpalr5osmF2lPbYRaw1nKyPcmQABAwjV3DIAAAAAAAEEIlEgoqAceWUonu5Wtc/N25hWxw+kdsJk0h9xHGppr3dq5AMA",
            "estimated_added_weight": 172,
            "outnum": 2
          }
        }
      ]
    },
    "lightning-askrene-age.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "askrene-age",
      "title": "Command for expiring information in a layer (EXPERIMENTAL)",
      "description": [
        "WARNING: experimental, so API may change.",
        "",
        "The **askrene-age** RPC command tells askrene that information added to a layer by *askrene-inform-channel* beyond a certain age is less useful.  It currently completely forgets constraints older than *cutoff*."
      ],
      "request": {
        "required": [
          "layer",
          "cutoff"
        ],
        "properties": {
          "layer": {
            "type": "string",
            "description": [
              "The name of the layer to apply this change to."
            ]
          },
          "cutoff": {
            "type": "u64",
            "description": [
              "The UNIX timestamp: constraints older than this will be forgotten."
            ]
          }
        }
      },
      "response": {
        "required": [
          "layer",
          "num_removed"
        ],
        "properties": {
          "layer": {
            "type": "string",
            "description": [
              "The *layer* parameter provided."
            ]
          },
          "num_removed": {
            "type": "u64",
            "description": [
              "The number of constraints removed from *layer*"
            ]
          }
        }
      },
      "see_also": [
        "lightning-getroutes(7)",
        "lightning-askrene-inform-channel(7)",
        "lightning-askrene-listlayers(7)"
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ]
    },
    "lightning-askrene-create-channel.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "askrene-create-channel",
      "title": "Command to add a channel to layer (EXPERIMENTAL)",
      "description": [
        "WARNING: experimental, so API may change.",
        "",
        "The **askrene-create-channel** RPC command tells askrene to populate one direction of a channel in the given layer.  If the channel already exists, it will be overridden.  If the layer does not exist, it will be created."
      ],
      "request": {
        "required": [
          "layer",
          "source",
          "destination",
          "short_channel_id",
          "capacity_msat",
          "htlc_min",
          "htlc_max",
          "base_fee",
          "proportional_fee",
          "delay"
        ],
        "properties": {
          "layer": {
            "type": "string",
            "description": [
              "The name of the layer to apply this change to."
            ]
          },
          "source": {
            "type": "pubkey",
            "description": [
              "The source node id for the channel."
            ]
          },
          "destination": {
            "type": "pubkey",
            "description": [
              "The destination node id for the channel."
            ]
          },
          "short_channel_id": {
            "type": "short_channel_id",
            "description": [
              "The short channel id for the channel.  If a channel with this short channel id already exists in *layer*, the *source*, *destination* and *capacity_msat* must be the same."
            ]
          },
          "capacity_msat": {
            "type": "msat",
            "description": [
              "The capacity (onchain size) of the channel."
            ]
          },
          "htlc_min": {
            "type": "msat",
            "description": [
              "The minimum value allowed in this direction."
            ]
          },
          "htlc_max": {
            "type": "msat",
            "description": [
              "The maximum value allowed in this direction."
            ]
          },
          "base_fee": {
            "type": "msat",
            "description": [
              "The base fee to apply to use the channel in this direction."
            ]
          },
          "proportional_fee": {
            "type": "u32",
            "description": [
              "The proportional fee (in parts per million) to apply to use the channel in this direction."
            ]
          },
          "delay": {
            "type": "u16",
            "description": [
              "The CLTV delay required for this direction."
            ]
          }
        }
      },
      "response": {
        "required": [],
        "properties": {}
      },
      "see_also": [
        "lightning-getroutes(7)",
        "lightning-askrene-disable-node(7)",
        "lightning-askrene-inform-channel(7)",
        "lightning-askrene-listlayers(7)",
        "lightning-askrene-age(7)"
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ]
    },
    "lightning-askrene-disable-node.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "askrene-disable-node",
      "title": "Command to disable all channels to/from a node in a layer (EXPERIMENTAL)",
      "description": [
        "WARNING: experimental, so API may change.",
        "",
        "The **askrene-disable-node** RPC command tells askrene to disable all channels connected to a node whenever the given layer is used.  This is mainly useful to force the use of alternate paths: while individual channels can be disabled using askrene-create-channel or askrene-inform-channel, that would be racy if new channels appeared."
      ],
      "request": {
        "required": [
          "layer",
          "node"
        ],
        "properties": {
          "layer": {
            "type": "string",
            "description": [
              "The name of the layer to apply this change to."
            ]
          },
          "node": {
            "type": "pubkey",
            "description": [
              "The node to disable.  It does not need to exist."
            ]
          }
        }
      },
      "response": {
        "required": [],
        "properties": {}
      },
      "see_also": [
        "lightning-getroutes(7)",
        "lightning-askrene-create-channel(7)",
        "lightning-askrene-inform-channel(7)",
        "lightning-askrene-listlayers(7)",
        "lightning-askrene-age(7)"
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ]
    },
    "lightning-askrene-inform-channel.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "askrene-inform-channel",
      "title": "Command to add channel capacity restrictions to layer (EXPERIMENTAL)",
      "description": [
        "WARNING: experimental, so API may change.",
        "",
        "The **askrene-inform-channel** RPC command tells askrene about the minimum or maximum current capacity of a given channel.  It can be applied whether the curren channel exists or not.  If the layer does not exist, it will be created."
      ],
      "request": {
        "required": [
          "layer",
          "short_channel_id",
          "direction"
        ],
        "properties": {
          "layer": {
            "type": "string",
            "description": [
              "The name of the layer to apply this change to."
            ]
          },
          "short_channel_id": {
            "type": "short_channel_id",
            "description": [
              "The short channel id to apply this change to."
            ]
          },
          "direction": {
            "type": "u32",
            "description": [
              "The direction to apply this change to."
            ]
          },
          "minimum_msat": {
            "type": "msat",
            "description": [
              "The minumum value which this channel could pass.  This or *minimum_msat* must be specified, but not both."
            ]
          },
          "maximum_msat": {
            "type": "msat",
            "description": [
              "The maximum value which this channel could pass.  This or *minimum_msat* must be specified, but not both."
            ]
          }
        }
      },
      "response": {
        "required": [
          "constraint"
        ],
        "properties": {
          "constraint": {
            "type": "object",
            "required": [
              "short_channel_id",
              "direction",
              "timestamp"
            ],
            "properties": {
              "short_channel_id": {
                "type": "short_channel_id",
                "description": [
                  "The *short_channel_id* specified."
                ]
              },
              "direction": {
                "type": "u32",
                "description": [
                  "The *direction* specified."
                ]
              },
              "timestamp": {
                "type": "u64",
                "description": [
                  "The UNIX time (seconds since 1970) this was created."
                ]
              },
              "maximum_msat": {
                "type": "msat",
                "description": [
                  "The *minimum_msat* (if specified)"
                ]
              },
              "minimum_msat": {
                "type": "msat",
                "description": [
                  "The *maximum_msat* (if specified)"
                ]
              }
            }
          }
        }
      },
      "see_also": [
        "lightning-getroutes(7)",
        "lightning-askrene-disable-node(7)",
        "lightning-askrene-create-channel(7)",
        "lightning-askrene-listlayers(7)",
        "lightning-askrene-age(7)"
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ]
    },
    "lightning-askrene-listlayers.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "askrene-listlayers",
      "title": "Command to display information about layers (EXPERIMENTAL)",
      "description": [
        "WARNING: experimental, so API may change.",
        "",
        "The **askrene-listlayers** RPC command reports any modifications each layer (or, the layer specified) would make to the topology, if it were used for *getroutes*."
      ],
      "request": {
        "required": [],
        "properties": {
          "layer": {
            "type": "string",
            "description": [
              "The name of the layer to report on."
            ]
          }
        }
      },
      "response": {
        "required": [
          "layers"
        ],
        "properties": {
          "layers": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "layer",
                "disabled_nodes",
                "created_channels",
                "constraints"
              ],
              "properties": {
                "layer": {
                  "type": "string",
                  "description": [
                    "The name of the layer."
                  ]
                },
                "disabled_nodes": {
                  "type": "array",
                  "items": {
                    "type": "pubkey",
                    "description": [
                      "The id of the disabled node."
                    ]
                  }
                },
                "created_channels": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "source",
                      "destination",
                      "short_channel_id",
                      "capacity_msat",
                      "htlc_minimum_msat",
                      "htlc_maximum_msat",
                      "fee_base_msat",
                      "fee_proportional_millionths",
                      "delay"
                    ],
                    "properties": {
                      "source": {
                        "type": "pubkey",
                        "description": [
                          "The source node id for the channel."
                        ]
                      },
                      "destination": {
                        "type": "pubkey",
                        "description": [
                          "The destination node id for the channel."
                        ]
                      },
                      "short_channel_id": {
                        "type": "short_channel_id",
                        "description": [
                          "The short channel id for the channel."
                        ]
                      },
                      "capacity_msat": {
                        "type": "msat",
                        "description": [
                          "The capacity (onchain size) of the channel."
                        ]
                      },
                      "htlc_minimum_msat": {
                        "type": "msat",
                        "description": [
                          "The minimum value allowed in this direction."
                        ]
                      },
                      "htlc_maximum_msat": {
                        "type": "msat",
                        "description": [
                          "The maximum value allowed in this direction."
                        ]
                      },
                      "fee_base_msat": {
                        "type": "msat",
                        "description": [
                          "The base fee to apply to use the channel in this direction."
                        ]
                      },
                      "fee_proportional_millionths": {
                        "type": "u32",
                        "description": [
                          "The proportional fee (in parts per million) to apply to use the channel in this direction."
                        ]
                      },
                      "delay": {
                        "type": "u16",
                        "description": [
                          "The CLTV delay required for this direction."
                        ]
                      }
                    }
                  }
                },
                "constraints": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "short_channel_id",
                      "direction"
                    ],
                    "properties": {
                      "short_channel_id": {
                        "type": "short_channel_id",
                        "description": [
                          "The short channel id."
                        ]
                      },
                      "direction": {
                        "type": "u32",
                        "description": [
                          "The direction."
                        ]
                      },
                      "maximum_msat": {
                        "type": "msat",
                        "description": [
                          "The maximum value which this channel could pass.  This or *minimum_msat* will be present, but not both."
                        ]
                      },
                      "minimum_msat": {
                        "type": "msat",
                        "description": [
                          "The minimum value which this channel could pass.  This or *minimum_msat* will be present, but not both."
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "see_also": [
        "lightning-getroutes(7)",
        "lightning-askrene-disable-node(7)",
        "lightning-askrene-create-channel(7)",
        "lightning-askrene-inform-channel(7)",
        "lightning-askrene-age(7)"
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ]
    },
    "lightning-askrene-reserve.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "askrene-reserve",
      "title": "Command for informing askrene that you are trying a path (EXPERIMENTAL)",
      "description": [
        "WARNING: experimental, so API may change.",
        "",
        "The **askrene-reserve** RPC command tells askrene that a path is being attempted.  This allows it to take that into account when other *getroutes* calls are made.  You should call **askrene-unreserve** after the attempt has completed.",
        "",
        "Note that additional properties inside the *path* elements are ignored, which is useful when used with the result of *getroutes*."
      ],
      "request": {
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "short_channel_id",
                "direction",
                "amount_msat"
              ],
              "properties": {
                "short_channel_id": {
                  "type": "short_channel_id",
                  "description": [
                    "The channel joining these nodes."
                  ]
                },
                "direction": {
                  "type": "u32",
                  "description": [
                    "0 if this channel is traversed from lesser to greater **id**, otherwise 1."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount to send into this hop."
                  ]
                }
              }
            }
          }
        }
      },
      "response": {
        "required": [],
        "properties": {}
      },
      "see_also": [
        "lightning-getroutes(7)",
        "lightning-askrene-unreserve(7)",
        "lightning-askrene-disable-node(7)",
        "lightning-askrene-create-channel(7)",
        "lightning-askrene-inform-channel(7)",
        "lightning-askrene-listlayers(7)",
        "lightning-askrene-age(7)"
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ]
    },
    "lightning-askrene-unreserve.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "askrene-unreserve",
      "title": "Command for informing askrene that you are no longer trying a path (EXPERIMENTAL)",
      "description": [
        "WARNING: experimental, so API may change.",
        "",
        "The **askrene-unreserve** RPC command tells askrene that a path attempt has finished: it should only be called after a successful **askrene-reserve** call.",
        "",
        "Note that additional properties inside the *path* elements are ignored, which is useful when used with the result of *getroutes*."
      ],
      "request": {
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "short_channel_id",
                "direction",
                "amount_msat"
              ],
              "properties": {
                "short_channel_id": {
                  "type": "short_channel_id",
                  "description": [
                    "The channel joining these nodes."
                  ]
                },
                "direction": {
                  "type": "u32",
                  "description": [
                    "0 if this channel is traversed from lesser to greater **id**, otherwise 1."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount to send into this hop."
                  ]
                }
              }
            }
          }
        }
      },
      "response": {
        "required": [],
        "properties": {}
      },
      "see_also": [
        "lightning-getroutes(7)",
        "lightning-askrene-reserve(7)",
        "lightning-askrene-disable-node(7)",
        "lightning-askrene-create-channel(7)",
        "lightning-askrene-inform-channel(7)",
        "lightning-askrene-listlayers(7)",
        "lightning-askrene-age(7)"
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ]
    },
    "lightning-autoclean-once.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "autoclean-once",
      "title": "A single deletion of old invoices/payments/forwards",
      "description": [
        "The **autoclean-once** RPC command tell the `autoclean` plugin to do a single sweep to delete old entries. This is a manual alternative (or addition) to the various `autoclean-...-age` parameters which cause autoclean to run once per hour: see lightningd-config(5)."
      ],
      "request": {
        "required": [
          "subsystem",
          "age"
        ],
        "properties": {
          "subsystem": {
            "type": "string",
            "enum": [
              "succeededforwards",
              "failedforwards",
              "succeededpays",
              "failedpays",
              "paidinvoices",
              "expiredinvoices"
            ],
            "description": [
              "What subsystem to clean. Currently supported subsystems are:",
              "    * `failedforwards`: routed payments which did not succeed (`failed` or `local_failed` in listforwards `status`).",
              "    * `succeededforwards`: routed payments which succeeded (`settled` in listforwards `status`).",
              "    * `failedpays`: payment attempts which did not succeed (`failed` in listpays `status`).",
              "    * `succeededpays`: payment attempts which succeeded (`complete` in listpays `status`).",
              "    * `expiredinvoices`: invoices which were not paid (and cannot be) (`expired` in listinvoices `status`).",
              "    * `paidinvoices`: invoices which were paid (`paid` in listinvoices `status)."
            ]
          },
          "age": {
            "type": "u64",
            "description": [
              "Non-zero number in seconds. How many seconds old an entry must be to delete it."
            ]
          }
        }
      },
      "response": {
        "required": [
          "autoclean"
        ],
        "properties": {
          "autoclean": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "succeededforwards": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "cleaned",
                  "uncleaned"
                ],
                "properties": {
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done this run."
                    ]
                  },
                  "uncleaned": {
                    "type": "u64",
                    "description": [
                      "The total number of entries *not* deleted this run."
                    ]
                  }
                }
              },
              "failedforwards": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "cleaned",
                  "uncleaned"
                ],
                "properties": {
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done this run."
                    ]
                  },
                  "uncleaned": {
                    "type": "u64",
                    "description": [
                      "The total number of entries *not* deleted this run."
                    ]
                  }
                }
              },
              "succeededpays": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "cleaned",
                  "uncleaned"
                ],
                "properties": {
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done this run."
                    ]
                  },
                  "uncleaned": {
                    "type": "u64",
                    "description": [
                      "The total number of entries *not* deleted this run."
                    ]
                  }
                }
              },
              "failedpays": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "cleaned",
                  "uncleaned"
                ],
                "properties": {
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done this run."
                    ]
                  },
                  "uncleaned": {
                    "type": "u64",
                    "description": [
                      "The total number of entries *not* deleted this run."
                    ]
                  }
                }
              },
              "paidinvoices": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "cleaned",
                  "uncleaned"
                ],
                "properties": {
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done this run."
                    ]
                  },
                  "uncleaned": {
                    "type": "u64",
                    "description": [
                      "The total number of entries *not* deleted this run."
                    ]
                  }
                }
              },
              "expiredinvoices": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "cleaned",
                  "uncleaned"
                ],
                "properties": {
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done this run."
                    ]
                  },
                  "uncleaned": {
                    "type": "u64",
                    "description": [
                      "The total number of entries *not* deleted this run."
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightningd-config(5)",
        "lightning-autoclean-status(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:autoclean-once#1",
            "method": "autoclean-once",
            "params": [
              "failedpays",
              1
            ]
          },
          "response": {
            "autoclean": {
              "failedpays": {
                "cleaned": 0,
                "uncleaned": 7
              }
            }
          }
        },
        {
          "request": {
            "id": "example:autoclean-once#2",
            "method": "autoclean-once",
            "params": [
              "succeededpays",
              1
            ]
          },
          "response": {
            "autoclean": {
              "succeededpays": {
                "cleaned": 7,
                "uncleaned": 0
              }
            }
          }
        }
      ]
    },
    "lightning-autoclean-status.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "autoclean-status",
      "title": "Examine auto-delete of old invoices/payments/forwards",
      "description": [
        "The **autoclean-status** RPC command tells you about the status of the autclean plugin, optionally for only one subsystem."
      ],
      "request": {
        "required": [],
        "properties": {
          "subsystem": {
            "type": "string",
            "enum": [
              "succeededforwards",
              "failedforwards",
              "succeededpays",
              "failedpays",
              "paidinvoices",
              "expiredinvoices"
            ],
            "description": [
              "What subsystem to ask about. Currently supported subsystems are:",
              "    * `failedforwards`: routed payments which did not succeed (`failed` or `local_failed` in listforwards `status`).",
              "    * `succeededforwards`: routed payments which succeeded (`settled` in listforwards `status`).",
              "    * `failedpays`: payment attempts which did not succeed (`failed` in listpays `status`).",
              "    * `succeededpays`: payment attempts which succeeded (`complete` in listpays `status`).",
              "    * `expiredinvoices`: invoices which were not paid (and cannot be) (`expired` in listinvoices `status`).",
              "    * `paidinvoices`: invoices which were paid (`paid` in listinvoices `status)."
            ]
          }
        }
      },
      "response": {
        "required": [
          "autoclean"
        ],
        "properties": {
          "autoclean": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "succeededforwards": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "enabled",
                  "cleaned"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": [
                      "Whether autocleaning is enabled for successful listforwards."
                    ]
                  },
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done (ever)."
                    ]
                  }
                },
                "if": {
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "age",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {},
                    "age": {
                      "type": "u64",
                      "description": [
                        "Age (in seconds) to delete successful listforwards."
                      ]
                    }
                  }
                },
                "else": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {}
                  }
                }
              },
              "failedforwards": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "enabled",
                  "cleaned"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": [
                      "Whether autocleaning is enabled for failed listforwards."
                    ]
                  },
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done (ever)."
                    ]
                  }
                },
                "if": {
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "age",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {},
                    "age": {
                      "type": "u64",
                      "description": [
                        "Age (in seconds) to delete failed listforwards."
                      ]
                    }
                  }
                },
                "else": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {}
                  }
                }
              },
              "succeededpays": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "enabled",
                  "cleaned"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": [
                      "Whether autocleaning is enabled for successful listpays/listsendpays."
                    ]
                  },
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done (ever)."
                    ]
                  }
                },
                "if": {
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "age",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {},
                    "age": {
                      "type": "u64",
                      "description": [
                        "Age (in seconds) to delete successful listpays/listsendpays."
                      ]
                    }
                  }
                },
                "else": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {}
                  }
                }
              },
              "failedpays": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "enabled",
                  "cleaned"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": [
                      "Whether autocleaning is enabled for failed listpays/listsendpays."
                    ]
                  },
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done (ever)."
                    ]
                  }
                },
                "if": {
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "age",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {},
                    "age": {
                      "type": "u64",
                      "description": [
                        "Age (in seconds) to delete failed listpays/listsendpays."
                      ]
                    }
                  }
                },
                "else": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {}
                  }
                }
              },
              "paidinvoices": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "enabled",
                  "cleaned"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": [
                      "Whether autocleaning is enabled for paid listinvoices."
                    ]
                  },
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done (ever)."
                    ]
                  }
                },
                "if": {
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "age",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {},
                    "age": {
                      "type": "u64",
                      "description": [
                        "Age (in seconds) to paid listinvoices."
                      ]
                    }
                  }
                },
                "else": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {}
                  }
                }
              },
              "expiredinvoices": {
                "type": "object",
                "additionalProperties": true,
                "required": [
                  "enabled",
                  "cleaned"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": [
                      "Whether autocleaning is enabled for expired (unpaid) listinvoices."
                    ]
                  },
                  "cleaned": {
                    "type": "u64",
                    "description": [
                      "Total number of deletions done (ever)."
                    ]
                  }
                },
                "if": {
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "age",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {},
                    "age": {
                      "type": "u64",
                      "description": [
                        "Age (in seconds) to expired listinvoices."
                      ]
                    }
                  }
                },
                "else": {
                  "additionalProperties": false,
                  "required": [
                    "enabled",
                    "cleaned"
                  ],
                  "properties": {
                    "enabled": {},
                    "cleaned": {}
                  }
                }
              }
            }
          }
        },
        "pre_return_value_notes": [
          "Note that the ages parameters are set by various `autoclean-...-age` parameters in your configuration: see lightningd-config(5)."
        ]
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightningd-config(5)",
        "lightning-listinvoices(7)",
        "lightning-listpays(7)",
        "lightning-listforwards(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:autoclean-status#1",
            "method": "autoclean-status",
            "params": {
              "subsystem": "expiredinvoices"
            }
          },
          "response": {
            "autoclean": {
              "expiredinvoices": {
                "enabled": true,
                "age": 300,
                "cleaned": 0
              }
            }
          }
        },
        {
          "request": {
            "id": "example:autoclean-status#2",
            "method": "autoclean-status",
            "params": {}
          },
          "response": {
            "autoclean": {
              "succeededforwards": {
                "enabled": false,
                "cleaned": 0
              },
              "failedforwards": {
                "enabled": false,
                "cleaned": 0
              },
              "succeededpays": {
                "enabled": false,
                "cleaned": 7
              },
              "failedpays": {
                "enabled": false,
                "cleaned": 0
              },
              "paidinvoices": {
                "enabled": false,
                "cleaned": 0
              },
              "expiredinvoices": {
                "enabled": true,
                "age": 300,
                "cleaned": 0
              }
            }
          }
        }
      ]
    },
    "lightning-batching.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "batching",
      "title": "Command to allow database batching.",
      "description": [
        "The **batching** RPC command allows (but does not guarantee!) database commitments to be deferred when multiple commands are issued on this RPC connection. This is only useful if many commands are being given at once, in which case it can offer a performance improvement (the cost being that if there is a crash, it's unclear how many of the commands will have been persisted)."
      ],
      "request": {
        "required": [
          "enable"
        ],
        "properties": {
          "enable": {
            "type": "boolean",
            "description": [
              "Whether to enable or disable transaction batching."
            ],
            "default": "False"
          }
        }
      },
      "response": {
        "properties": {}
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters."
      ],
      "author": [
        "Rusty Russell <<rusty@blockstream.com>> wrote the initial version of this man page."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:batching#1",
            "method": "batching",
            "params": {
              "enable": true
            }
          },
          "response": {}
        }
      ]
    },
    "lightning-bkpr-channelsapy.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "bkpr-channelsapy",
      "title": "Command to list stats on channel earnings",
      "description": [
        "The **bkpr-channelsapy** RPC command lists stats on routing income, leasing income, and various calculated APYs for channel routed funds."
      ],
      "request": {
        "required": [],
        "properties": {
          "start_time": {
            "type": "u64",
            "description": [
              "UNIX timestamp (in seconds) to filter events after the provided timestamp."
            ],
            "default": "zero"
          },
          "end_time": {
            "type": "u64",
            "description": [
              "UNIX timestamp (in seconds) to filter events up to and at the provided timestamp."
            ],
            "default": "max-int"
          }
        }
      },
      "response": {
        "required": [
          "channels_apy"
        ],
        "properties": {
          "channels_apy": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "account",
                "routed_out_msat",
                "routed_in_msat",
                "lease_fee_paid_msat",
                "lease_fee_earned_msat",
                "pushed_out_msat",
                "pushed_in_msat",
                "our_start_balance_msat",
                "channel_start_balance_msat",
                "fees_out_msat",
                "utilization_out",
                "utilization_in",
                "apy_out",
                "apy_in",
                "apy_total"
              ],
              "properties": {
                "account": {
                  "type": "string",
                  "description": [
                    "The account name. If the account is a channel, the channel_id. The 'net' entry is the rollup of all channel accounts."
                  ]
                },
                "routed_out_msat": {
                  "type": "msat",
                  "description": [
                    "Sats routed (outbound)."
                  ]
                },
                "routed_in_msat": {
                  "type": "msat",
                  "description": [
                    "Sats routed (inbound)."
                  ]
                },
                "lease_fee_paid_msat": {
                  "type": "msat",
                  "description": [
                    "Sats paid for leasing inbound (liquidity ads)."
                  ]
                },
                "lease_fee_earned_msat": {
                  "type": "msat",
                  "description": [
                    "Sats earned for leasing outbound (liquidity ads)."
                  ]
                },
                "pushed_out_msat": {
                  "type": "msat",
                  "description": [
                    "Sats pushed to peer at open."
                  ]
                },
                "pushed_in_msat": {
                  "type": "msat",
                  "description": [
                    "Sats pushed in from peer at open."
                  ]
                },
                "our_start_balance_msat": {
                  "type": "msat",
                  "description": [
                    "Starting balance in channel at funding. Note that if our start balance is zero, any _initial field will be omitted (can't divide by zero)."
                  ]
                },
                "channel_start_balance_msat": {
                  "type": "msat",
                  "description": [
                    "Total starting balance at funding."
                  ]
                },
                "fees_out_msat": {
                  "type": "msat",
                  "description": [
                    "Fees earned on routed outbound."
                  ]
                },
                "fees_in_msat": {
                  "type": "msat",
                  "description": [
                    "Fees earned on routed inbound."
                  ]
                },
                "utilization_out": {
                  "type": "string",
                  "description": [
                    "Sats routed outbound / total start balance."
                  ]
                },
                "utilization_out_initial": {
                  "type": "string",
                  "description": [
                    "Sats routed outbound / our start balance."
                  ]
                },
                "utilization_in": {
                  "type": "string",
                  "description": [
                    "Sats routed inbound / total start balance."
                  ]
                },
                "utilization_in_initial": {
                  "type": "string",
                  "description": [
                    "Sats routed inbound / our start balance."
                  ]
                },
                "apy_out": {
                  "type": "string",
                  "description": [
                    "Fees earned on outbound routed payments / total start balance for the length of time this channel has been open amortized to a year (APY)."
                  ]
                },
                "apy_out_initial": {
                  "type": "string",
                  "description": [
                    "Fees earned on outbound routed payments / our start balance for the length of time this channel has been open amortized to a year (APY)."
                  ]
                },
                "apy_in": {
                  "type": "string",
                  "description": [
                    "Fees earned on inbound routed payments / total start balance for the length of time this channel has been open amortized to a year (APY)."
                  ]
                },
                "apy_in_initial": {
                  "type": "string",
                  "description": [
                    "Fees earned on inbound routed payments / our start balance for the length of time this channel has been open amortized to a year (APY)."
                  ]
                },
                "apy_total": {
                  "type": "string",
                  "description": [
                    "Total fees earned on routed payments / total start balance for the length of time this channel has been open amortized to a year (APY)."
                  ]
                },
                "apy_total_initial": {
                  "type": "string",
                  "description": [
                    "Total fees earned on routed payments / our start balance for the length of time this channel has been open amortized to a year (APY)."
                  ]
                },
                "apy_lease": {
                  "type": "string",
                  "description": [
                    "Lease fees earned over total amount leased for the lease term, amortized to a year (APY). Only appears if channel was leased out by us."
                  ]
                }
              }
            }
          }
        }
      },
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-bkpr-listincome(7)",
        "lightning-bkpr-listfunds(7)",
        "lightning-bkpr-listaccountevents(7)",
        "lightning-bkpr-dumpincomecsv(7)",
        "lightning-listpeers(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:bkpr-channelsapy#1",
            "method": "bkpr-channelsapy",
            "params": {}
          },
          "response": {
            "channels_apy": [
              {
                "account": "252d1b0a1e57895e84137f28cf19ab2c35847e284c112fefdecc7afeaa5c1de7",
                "routed_out_msat": 1000000,
                "routed_in_msat": 510081208,
                "lease_fee_paid_msat": 0,
                "lease_fee_earned_msat": 0,
                "pushed_out_msat": 0,
                "pushed_in_msat": 0,
                "our_start_balance_msat": 0,
                "channel_start_balance_msat": 1000000000,
                "fees_out_msat": 0,
                "fees_in_msat": 106,
                "utilization_out": "0.1000%",
                "utilization_in": "51.0081%",
                "utilization_in_initial": "51.0081%",
                "apy_out": "0.0000%",
                "apy_in": "0.0252%",
                "apy_in_initial": "0.0252%",
                "apy_total": "0.0252%"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "routed_out_msat": 510181102,
                "routed_in_msat": 0,
                "lease_fee_paid_msat": 0,
                "lease_fee_earned_msat": 0,
                "pushed_out_msat": 0,
                "pushed_in_msat": 0,
                "our_start_balance_msat": 1000000000,
                "channel_start_balance_msat": 1000000000,
                "fees_out_msat": 106,
                "fees_in_msat": 0,
                "utilization_out": "51.0181%",
                "utilization_out_initial": "51.0181%",
                "utilization_in": "0.0000%",
                "apy_out": "0.0505%",
                "apy_out_initial": "0.0505%",
                "apy_in": "0.0000%",
                "apy_total": "0.0505%",
                "apy_total_initial": "0.0505%"
              },
              {
                "account": "f8fc83a432cbfb2fffe222cc06727fdd977b5dd10ebd6707158e799e6f522d9f",
                "routed_out_msat": 500000000,
                "routed_in_msat": 0,
                "lease_fee_paid_msat": 0,
                "lease_fee_earned_msat": 0,
                "pushed_out_msat": 0,
                "pushed_in_msat": 0,
                "our_start_balance_msat": 1000000000,
                "channel_start_balance_msat": 1000000000,
                "fees_out_msat": 0,
                "fees_in_msat": 0,
                "utilization_out": "50.0000%",
                "utilization_out_initial": "50.0000%",
                "utilization_in": "0.0000%",
                "apy_out": "0.0000%",
                "apy_out_initial": "0.0000%",
                "apy_in": "0.0000%",
                "apy_total": "0.0000%",
                "apy_total_initial": "0.0000%"
              },
              {
                "account": "net",
                "routed_out_msat": 1011181102,
                "routed_in_msat": 510081208,
                "lease_fee_paid_msat": 0,
                "lease_fee_earned_msat": 0,
                "pushed_out_msat": 0,
                "pushed_in_msat": 0,
                "our_start_balance_msat": 2000000000,
                "channel_start_balance_msat": 3000000000,
                "fees_out_msat": 106,
                "fees_in_msat": 106,
                "utilization_out": "33.7060%",
                "utilization_out_initial": "50.5591%",
                "utilization_in": "17.0027%",
                "utilization_in_initial": "51.0081%",
                "apy_out": "0.0084%",
                "apy_out_initial": "0.0126%",
                "apy_in": "0.0084%",
                "apy_in_initial": "0.0252%",
                "apy_total": "0.0168%",
                "apy_total_initial": "0.0168%"
              }
            ]
          }
        }
      ]
    },
    "lightning-bkpr-dumpincomecsv.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "bkpr-dumpincomecsv",
      "title": "Command to emit a CSV of income events",
      "description": [
        "The **bkpr-dumpincomcsv** RPC command writes a CSV file to disk at *csv_file* location. This is a formatted output of the **listincome** RPC command."
      ],
      "request": {
        "required": [
          "csv_format"
        ],
        "properties": {
          "csv_format": {
            "type": "string",
            "description": [
              "CSV format to use. See RETURN VALUE for options."
            ]
          },
          "csv_file": {
            "type": "string",
            "description": [
              "On-disk destination of the generated CSV file."
            ]
          },
          "consolidate_fees": {
            "type": "boolean",
            "description": [
              "If true, we emit a single, consolidated event for any onchain-fees for a txid and account. Otherwise, events for every update to the onchain fee calculation for this account and txid will be printed. Note that this means that the events emitted are non-stable, i.e. calling **dumpincomecsv** twice may result in different onchain fee events being emitted, depending on how much information we've logged for that transaction."
            ],
            "default": "True"
          },
          "start_time": {
            "type": "u64",
            "description": [
              "UNIX timestamp (in seconds) that filters events after the provided timestamp."
            ],
            "default": "zero"
          },
          "end_time": {
            "type": "u64",
            "description": [
              "UNIX timestamp (in seconds) that filters events up to and at the provided timestamp."
            ],
            "default": "max-int"
          }
        }
      },
      "response": {
        "required": [
          "csv_file",
          "csv_format"
        ],
        "properties": {
          "csv_file": {
            "type": "string",
            "description": [
              "File that the csv was generated to."
            ]
          },
          "csv_format": {
            "type": "string",
            "enum": [
              "cointracker",
              "koinly",
              "harmony",
              "quickbooks"
            ],
            "description": [
              "Format to print csv as."
            ]
          }
        }
      },
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-bkpr-listincome(7)",
        "lightning-bkpr-listfunds(7)",
        "lightning-bkpr-listaccountevents(7)",
        "lightning-bkpr-channelsapy(7)",
        "lightning-listpeers(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:bkpr-dumpincomecsv#1",
            "method": "bkpr-dumpincomecsv",
            "params": [
              "koinly",
              "koinly.csv"
            ]
          },
          "response": {
            "csv_file": "koinly.csv",
            "csv_format": "koinly"
          }
        }
      ]
    },
    "lightning-bkpr-inspect.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "bkpr-inspect",
      "title": "Command to show onchain footprint of a channel",
      "description": [
        "The **bkpr-inspect** RPC command lists all known on-chain transactions and associated events for the provided account. Useful for inspecting unilateral closes for a given channel account. Only valid for channel accounts."
      ],
      "request": {
        "required": [
          "account"
        ],
        "properties": {
          "account": {
            "type": "string",
            "description": [
              "Channel account to inspect."
            ]
          }
        }
      },
      "response": {
        "required": [
          "txs"
        ],
        "properties": {
          "txs": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "txid",
                "fees_paid_msat",
                "outputs"
              ],
              "properties": {
                "txid": {
                  "type": "txid",
                  "description": [
                    "Transaction id."
                  ]
                },
                "blockheight": {
                  "type": "u32",
                  "description": [
                    "Blockheight of transaction."
                  ]
                },
                "fees_paid_msat": {
                  "type": "msat",
                  "description": [
                    "Amount paid in sats for this tx."
                  ]
                },
                "outputs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "account",
                      "outnum",
                      "output_value_msat",
                      "currency"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "account": {
                        "type": "string",
                        "description": [
                          "Account this output affected."
                        ]
                      },
                      "outnum": {
                        "type": "u32",
                        "description": [
                          "Index of output."
                        ]
                      },
                      "output_value_msat": {
                        "type": "msat",
                        "description": [
                          "Value of the output."
                        ]
                      },
                      "currency": {
                        "type": "string",
                        "description": [
                          "Human-readable bech32 part for this coin type."
                        ]
                      },
                      "credit_msat": {
                        "type": "msat",
                        "description": [
                          "Amount credited to account."
                        ]
                      },
                      "debit_msat": {
                        "type": "msat",
                        "description": [
                          "Amount debited from account."
                        ]
                      },
                      "originating_account": {
                        "type": "string",
                        "description": [
                          "Account this output originated from."
                        ]
                      },
                      "output_tag": {
                        "type": "string",
                        "description": [
                          "Description of output creation event."
                        ]
                      },
                      "spend_tag": {
                        "type": "string",
                        "description": [
                          "Description of output spend event."
                        ]
                      },
                      "spending_txid": {
                        "type": "txid",
                        "description": [
                          "Transaction this output was spent in."
                        ]
                      },
                      "payment_id": {
                        "type": "hex",
                        "description": [
                          "Lightning payment identifier. For an htlc, this will be the preimage."
                        ]
                      }
                    },
                    "allOf": [
                      {
                        "if": {
                          "required": [
                            "credit_msat"
                          ]
                        },
                        "then": {
                          "required": [
                            "output_tag"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "account": {},
                            "outnum": {},
                            "output_value_msat": {},
                            "currency": {},
                            "credit_msat": {},
                            "originating_account": {},
                            "debit_msat": {},
                            "output_tag": {},
                            "spend_tag": {},
                            "spending_txid": {},
                            "payment_id": {}
                          }
                        }
                      },
                      {
                        "if": {
                          "required": [
                            "spending_txid"
                          ]
                        },
                        "then": {
                          "required": [
                            "spend_tag",
                            "debit_msat"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "account": {},
                            "outnum": {},
                            "output_value_msat": {},
                            "currency": {},
                            "credit_msat": {},
                            "originating_account": {},
                            "debit_msat": {},
                            "output_tag": {},
                            "spend_tag": {},
                            "spending_txid": {},
                            "payment_id": {}
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listbalances(7)",
        "lightning-listfunds(7)",
        "lightning-listpeers(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:bkpr-inspect#1",
            "method": "bkpr-inspect",
            "params": {
              "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2"
            }
          },
          "response": {
            "txs": [
              {
                "txid": "cd23f0517eefc27194981253eb07b19b055246df77033e052c66eaf2bbb00483",
                "blockheight": 111,
                "fees_paid_msat": 4927000,
                "outputs": [
                  {
                    "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                    "outnum": 0,
                    "output_tag": "channel_open",
                    "output_value_msat": 1000000000,
                    "credit_msat": 1000000000,
                    "currency": "bcrt",
                    "spend_tag": "channel_close",
                    "spending_txid": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305",
                    "debit_msat": 489818898
                  }
                ]
              },
              {
                "txid": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305",
                "blockheight": 121,
                "fees_paid_msat": 2895898,
                "outputs": [
                  {
                    "account": "wallet",
                    "outnum": 0,
                    "output_tag": "deposit",
                    "output_value_msat": 486923000,
                    "credit_msat": 486923000,
                    "currency": "bcrt"
                  },
                  {
                    "account": "external",
                    "outnum": 1,
                    "output_tag": "to_them",
                    "output_value_msat": 510181000,
                    "credit_msat": 510181000,
                    "currency": "bcrt",
                    "originating_account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "lightning-bkpr-listaccountevents.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "bkpr-listaccountevents",
      "title": "Command for listing recorded bookkeeping events",
      "description": [
        "The **bkpr-listaccountevents** RPC command is a list of all bookkeeping events that have been recorded for this node.",
        "",
        "If the optional parameter **account** is set, we only emit events for the specified account, if exists.",
        "",
        "If the optional parameter **payment_id** is set, we only emit events which have that value as payment hash or as transaction id.",
        "",
        "The parameters **account** and **payment_id** are mutually exclusive.",
        "",
        "Note that the type **onchain_fees** that are emitted are of opposite credit/debit than as they appear in **listincome**, as **listincome** shows all events from the perspective of the node, whereas **listaccountevents** just dumps the event data as we've got it. Onchain fees are updated/recorded as we get more information about input and output spends -- the total onchain fees that were recorded for a transaction for an account can be found by summing all onchain fee events and taking the difference between the **credit_msat** and **debit_msat** for these events. We do this so that successive calls to **listaccountevents** always produce the same list of events -- no previously emitted event will be subsequently updated, rather we add a new event to the list."
      ],
      "request": {
        "required": [],
        "properties": {
          "account": {
            "type": "string",
            "description": [
              "Receive events for the specified account."
            ]
          },
          "payment_id": {
            "type": "string",
            "added": "v24.08",
            "description": [
              "Receive events for the specified payment id."
            ]
          }
        }
      },
      "response": {
        "required": [
          "events"
        ],
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "account",
                "type",
                "tag",
                "credit_msat",
                "debit_msat",
                "currency",
                "timestamp"
              ],
              "properties": {
                "account": {
                  "type": "string",
                  "description": [
                    "The account name. If the account is a channel, the channel_id."
                  ]
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "onchain_fee",
                    "chain",
                    "channel"
                  ],
                  "description": [
                    "Coin movement type."
                  ]
                },
                "tag": {
                  "type": "string",
                  "description": [
                    "Description of movement."
                  ]
                },
                "credit_msat": {
                  "type": "msat",
                  "description": [
                    "Amount credited."
                  ]
                },
                "debit_msat": {
                  "type": "msat",
                  "description": [
                    "Amount debited."
                  ]
                },
                "currency": {
                  "type": "string",
                  "description": [
                    "Human-readable bech32 part for this coin type."
                  ]
                },
                "timestamp": {
                  "type": "u32",
                  "description": [
                    "Timestamp this event was recorded by the node. For consolidated events such as onchain_fees, the most recent timestamp."
                  ]
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "chain"
                        ]
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "account": {},
                      "type": {},
                      "tag": {},
                      "credit_msat": {},
                      "debit_msat": {},
                      "currency": {},
                      "timestamp": {},
                      "outpoint": {
                        "type": "string",
                        "description": [
                          "The txid:outnum for this event."
                        ]
                      },
                      "blockheight": {
                        "type": "u32",
                        "description": [
                          "For chain events, blockheight this occured at."
                        ]
                      },
                      "origin": {
                        "type": "string",
                        "description": [
                          "The account this movement originated from."
                        ]
                      },
                      "payment_id": {
                        "type": "hex",
                        "description": [
                          "Lightning payment identifier. For an htlc, this will be the preimage."
                        ]
                      },
                      "txid": {
                        "type": "txid",
                        "description": [
                          "The txid of the transaction that created this event."
                        ]
                      },
                      "description": {
                        "type": "string",
                        "description": [
                          "The description of this event."
                        ]
                      }
                    },
                    "required": [
                      "outpoint",
                      "blockheight"
                    ],
                    "additionalProperties": false
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "onchain_fee"
                        ]
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "account": {},
                      "type": {},
                      "tag": {},
                      "credit_msat": {},
                      "debit_msat": {},
                      "currency": {},
                      "timestamp": {},
                      "description": {},
                      "txid": {
                        "type": "txid",
                        "description": [
                          "The txid of the transaction that created this event."
                        ]
                      }
                    },
                    "required": [
                      "txid"
                    ],
                    "additionalProperties": false
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "channel"
                        ]
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "account": {},
                      "type": {},
                      "tag": {},
                      "credit_msat": {},
                      "debit_msat": {},
                      "currency": {},
                      "timestamp": {},
                      "description": {},
                      "fees_msat": {
                        "type": "msat",
                        "description": [
                          "Amount paid in fees."
                        ]
                      },
                      "is_rebalance": {
                        "type": "boolean",
                        "description": [
                          "Is this payment part of a rebalance."
                        ]
                      },
                      "payment_id": {
                        "type": "hex",
                        "description": [
                          "Lightning payment identifier. For an htlc, this will be the preimage."
                        ]
                      },
                      "part_id": {
                        "type": "u32",
                        "description": [
                          "Counter for multi-part payments."
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                }
              ]
            }
          }
        }
      },
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-bkpr-listincome(7)",
        "lightning-listfunds(7)",
        "lightning-bkpr-listbalances(7)",
        "lightning-bkpr-channelsapy(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:bkpr-listaccountevents#1",
            "method": "bkpr-listaccountevents",
            "params": {}
          },
          "response": {
            "events": [
              {
                "account": "wallet",
                "type": "chain",
                "tag": "deposit",
                "credit_msat": 200000000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "386ad532212a5cffd753a39c2d7260793e0c885fc28bc1235362c2b133a4f6a4:0",
                "timestamp": 1722303635,
                "blockheight": 105
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "chain",
                "tag": "channel_open",
                "credit_msat": 0,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "cd23f0517eefc27194981253eb07b19b055246df77033e052c66eaf2bbb00483:0",
                "timestamp": 1722303653,
                "blockheight": 111
              },
              {
                "account": "wallet",
                "type": "chain",
                "tag": "deposit",
                "credit_msat": 2000000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "b19a249c64f2c952b4b9a400bdec159b56af2af63939c9ecb8fd937f344a7056:0",
                "timestamp": 1722303656,
                "blockheight": 112
              },
              {
                "account": "wallet",
                "type": "chain",
                "tag": "withdrawal",
                "credit_msat": 0,
                "debit_msat": 2000000000,
                "currency": "bcrt",
                "outpoint": "b19a249c64f2c952b4b9a400bdec159b56af2af63939c9ecb8fd937f344a7056:0",
                "txid": "5aab7d37b6ed1d78de32f4f91122ab9bbf0924b21732206b63ce06639ecc3fe2",
                "timestamp": 1722303659,
                "blockheight": 113
              },
              {
                "account": "wallet",
                "type": "chain",
                "tag": "deposit",
                "credit_msat": 995073000,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "5aab7d37b6ed1d78de32f4f91122ab9bbf0924b21732206b63ce06639ecc3fe2:0",
                "timestamp": 1722303659,
                "blockheight": 113
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "type": "chain",
                "tag": "channel_open",
                "credit_msat": 1000000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "5aab7d37b6ed1d78de32f4f91122ab9bbf0924b21732206b63ce06639ecc3fe2:1",
                "timestamp": 1722303659,
                "blockheight": 113
              },
              {
                "account": "wallet",
                "type": "onchain_fee",
                "tag": "onchain_fee",
                "credit_msat": 1004927000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303659,
                "txid": "5aab7d37b6ed1d78de32f4f91122ab9bbf0924b21732206b63ce06639ecc3fe2"
              },
              {
                "account": "wallet",
                "type": "onchain_fee",
                "tag": "onchain_fee",
                "credit_msat": 0,
                "debit_msat": 1004927000,
                "currency": "bcrt",
                "timestamp": 1722303659,
                "txid": "5aab7d37b6ed1d78de32f4f91122ab9bbf0924b21732206b63ce06639ecc3fe2"
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "type": "onchain_fee",
                "tag": "onchain_fee",
                "credit_msat": 4927000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303659,
                "txid": "5aab7d37b6ed1d78de32f4f91122ab9bbf0924b21732206b63ce06639ecc3fe2"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 500000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "7f74f064ff4528b7ec7c578df662617657cae9af4a74f5f24f68cb8465b18670",
                "part_id": 0,
                "timestamp": 1722303673,
                "description": "description send some sats l2 to l3",
                "is_rebalance": false
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 0,
                "debit_msat": 500000000,
                "currency": "bcrt",
                "payment_id": "365522e0e6c2fe84987153324cc9fac02986855d849bbd650426ba6064463166",
                "part_id": 0,
                "timestamp": 1722303675,
                "description": "description send some sats l3 to l4",
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2",
                "part_id": 0,
                "timestamp": 1722303677,
                "description": "Invoice description l31",
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "80ff407792947a23f193f9a1968e9a437b071364ae3159f83631335c9a453c1b",
                "part_id": 0,
                "timestamp": 1722303679,
                "description": "keysend",
                "is_rebalance": false
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "type": "channel",
                "tag": "routed",
                "credit_msat": 0,
                "debit_msat": 10000000,
                "fees_msat": 101,
                "currency": "bcrt",
                "payment_id": "3b80a3028343b16f8ab7261343eae40ff73ba833b0b7d4dcbfd42a3078dc322b",
                "part_id": 0,
                "timestamp": 1722303682,
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "routed",
                "credit_msat": 10000101,
                "debit_msat": 0,
                "fees_msat": 101,
                "currency": "bcrt",
                "payment_id": "3b80a3028343b16f8ab7261343eae40ff73ba833b0b7d4dcbfd42a3078dc322b",
                "part_id": 0,
                "timestamp": 1722303682,
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "0458c01fdd3aa0b9829002390301f92083e78dc27bb293bc3e7caee5d4ed7259",
                "part_id": 0,
                "timestamp": 1722303686,
                "description": "keysend",
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 50000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "788aea729ede48d315a199ce5ded76169601a61dd52e9734e707eb7c52e4e79e",
                "part_id": 0,
                "timestamp": 1722303688,
                "description": "l32 description",
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 100000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "2c66dc1dc3e5979fb692acc135e9796f5973e44ca9dbb1d8199c6b57f6531e68",
                "part_id": 0,
                "timestamp": 1722303689,
                "description": "l33 description",
                "is_rebalance": false
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "type": "channel",
                "tag": "routed",
                "credit_msat": 0,
                "debit_msat": 1000,
                "fees_msat": 1,
                "currency": "bcrt",
                "payment_id": "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13",
                "part_id": 0,
                "timestamp": 1722303692,
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "routed",
                "credit_msat": 1001,
                "debit_msat": 0,
                "fees_msat": 1,
                "currency": "bcrt",
                "payment_id": "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13",
                "part_id": 0,
                "timestamp": 1722303692,
                "is_rebalance": false
              },
              {
                "account": "wallet",
                "type": "chain",
                "tag": "deposit",
                "credit_msat": 510181000,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305:1",
                "timestamp": 1722303693,
                "blockheight": 121
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "type": "chain",
                "tag": "channel_close",
                "credit_msat": 0,
                "debit_msat": 489999000,
                "currency": "bcrt",
                "outpoint": "5aab7d37b6ed1d78de32f4f91122ab9bbf0924b21732206b63ce06639ecc3fe2:1",
                "txid": "2849a5c5cd182ebec02d18ba6348bb01e70a544d0ce9aa8b5533fb09d24c969e",
                "timestamp": 1722303693,
                "blockheight": 121
              },
              {
                "account": "external",
                "origin": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "type": "chain",
                "tag": "to_them",
                "credit_msat": 510001000,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "2849a5c5cd182ebec02d18ba6348bb01e70a544d0ce9aa8b5533fb09d24c969e:1",
                "timestamp": 1722303693,
                "blockheight": 121
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "chain",
                "tag": "channel_close",
                "credit_msat": 0,
                "debit_msat": 510181102,
                "currency": "bcrt",
                "outpoint": "cd23f0517eefc27194981253eb07b19b055246df77033e052c66eaf2bbb00483:0",
                "txid": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305",
                "timestamp": 1722303693,
                "blockheight": 121
              },
              {
                "account": "external",
                "origin": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "chain",
                "tag": "to_them",
                "credit_msat": 486923000,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305:0",
                "timestamp": 1722303693,
                "blockheight": 121
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "onchain_fee",
                "tag": "onchain_fee",
                "credit_msat": 102,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303693,
                "txid": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305"
              },
              {
                "account": "ecabe6d86abdd57565b3fb7e7c5d724e60ca1a07633951769b5dbfa48dc884b3",
                "type": "chain",
                "tag": "channel_open",
                "credit_msat": 0,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "f2f4e67dbf2791a3b57dd986418156b116b452c5fc27b077da7c529db82f06f5:1",
                "timestamp": 1722303702,
                "blockheight": 123
              },
              {
                "account": "wallet",
                "type": "chain",
                "tag": "deposit",
                "credit_msat": 2000000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "4c4b46acfd0c9d4b8393a2c3fbc27cb70bfa9270bf47ade3348c4acd949b770b:0",
                "timestamp": 1722303705,
                "blockheight": 124
              },
              {
                "account": "wallet",
                "type": "chain",
                "tag": "withdrawal",
                "credit_msat": 0,
                "debit_msat": 510181000,
                "currency": "bcrt",
                "outpoint": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305:1",
                "txid": "416618f92bc774497a510c55f8aee76e80135bc0abe1933ebe473eeb07b41dee",
                "timestamp": 1722303708,
                "blockheight": 125
              },
              {
                "account": "wallet",
                "type": "chain",
                "tag": "withdrawal",
                "credit_msat": 0,
                "debit_msat": 2000000000,
                "currency": "bcrt",
                "outpoint": "4c4b46acfd0c9d4b8393a2c3fbc27cb70bfa9270bf47ade3348c4acd949b770b:0",
                "txid": "416618f92bc774497a510c55f8aee76e80135bc0abe1933ebe473eeb07b41dee",
                "timestamp": 1722303708,
                "blockheight": 125
              },
              {
                "account": "wallet",
                "type": "chain",
                "tag": "deposit",
                "credit_msat": 1503221000,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "416618f92bc774497a510c55f8aee76e80135bc0abe1933ebe473eeb07b41dee:0",
                "timestamp": 1722303708,
                "blockheight": 125
              },
              {
                "account": "7512083907c74ed3a045e9bf772b3d72948eb93daf84a1cee57108800451aaf2",
                "type": "chain",
                "tag": "channel_open",
                "credit_msat": 1000000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "416618f92bc774497a510c55f8aee76e80135bc0abe1933ebe473eeb07b41dee:1",
                "timestamp": 1722303708,
                "blockheight": 125
              },
              {
                "account": "wallet",
                "type": "onchain_fee",
                "tag": "onchain_fee",
                "credit_msat": 1006960000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303708,
                "txid": "416618f92bc774497a510c55f8aee76e80135bc0abe1933ebe473eeb07b41dee"
              },
              {
                "account": "wallet",
                "type": "onchain_fee",
                "tag": "onchain_fee",
                "credit_msat": 0,
                "debit_msat": 1006960000,
                "currency": "bcrt",
                "timestamp": 1722303708,
                "txid": "416618f92bc774497a510c55f8aee76e80135bc0abe1933ebe473eeb07b41dee"
              },
              {
                "account": "7512083907c74ed3a045e9bf772b3d72948eb93daf84a1cee57108800451aaf2",
                "type": "onchain_fee",
                "tag": "onchain_fee",
                "credit_msat": 6960000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303708,
                "txid": "416618f92bc774497a510c55f8aee76e80135bc0abe1933ebe473eeb07b41dee"
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:bkpr-listaccountevents#2",
            "method": "bkpr-listaccountevents",
            "params": [
              "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2"
            ]
          },
          "response": {
            "events": [
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "chain",
                "tag": "channel_open",
                "credit_msat": 0,
                "debit_msat": 0,
                "currency": "bcrt",
                "outpoint": "cd23f0517eefc27194981253eb07b19b055246df77033e052c66eaf2bbb00483:0",
                "timestamp": 1722303653,
                "blockheight": 111
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 500000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "7f74f064ff4528b7ec7c578df662617657cae9af4a74f5f24f68cb8465b18670",
                "part_id": 0,
                "timestamp": 1722303673,
                "description": "description send some sats l2 to l3",
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2",
                "part_id": 0,
                "timestamp": 1722303677,
                "description": "Invoice description l31",
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "80ff407792947a23f193f9a1968e9a437b071364ae3159f83631335c9a453c1b",
                "part_id": 0,
                "timestamp": 1722303679,
                "description": "keysend",
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "routed",
                "credit_msat": 10000101,
                "debit_msat": 0,
                "fees_msat": 101,
                "currency": "bcrt",
                "payment_id": "3b80a3028343b16f8ab7261343eae40ff73ba833b0b7d4dcbfd42a3078dc322b",
                "part_id": 0,
                "timestamp": 1722303682,
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "0458c01fdd3aa0b9829002390301f92083e78dc27bb293bc3e7caee5d4ed7259",
                "part_id": 0,
                "timestamp": 1722303686,
                "description": "keysend",
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 50000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "788aea729ede48d315a199ce5ded76169601a61dd52e9734e707eb7c52e4e79e",
                "part_id": 0,
                "timestamp": 1722303688,
                "description": "l32 description",
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "invoice",
                "credit_msat": 100000,
                "debit_msat": 0,
                "currency": "bcrt",
                "payment_id": "2c66dc1dc3e5979fb692acc135e9796f5973e44ca9dbb1d8199c6b57f6531e68",
                "part_id": 0,
                "timestamp": 1722303689,
                "description": "l33 description",
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "channel",
                "tag": "routed",
                "credit_msat": 1001,
                "debit_msat": 0,
                "fees_msat": 1,
                "currency": "bcrt",
                "payment_id": "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13",
                "part_id": 0,
                "timestamp": 1722303692,
                "is_rebalance": false
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "chain",
                "tag": "channel_close",
                "credit_msat": 0,
                "debit_msat": 510181102,
                "currency": "bcrt",
                "outpoint": "cd23f0517eefc27194981253eb07b19b055246df77033e052c66eaf2bbb00483:0",
                "txid": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305",
                "timestamp": 1722303693,
                "blockheight": 121
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "type": "onchain_fee",
                "tag": "onchain_fee",
                "credit_msat": 102,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303693,
                "txid": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305"
              }
            ]
          }
        }
      ]
    },
    "lightning-bkpr-listbalances.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "bkpr-listbalances",
      "title": "Command for listing current channel + wallet balances",
      "description": [
        "The **bkpr-listbalances** RPC command is a list of all current and historical account balances. An account is either the on-chain *wallet* or a channel balance. Any funds sent to an *external* account will not be accounted for here.",
        "",
        "Note that any channel that was recorded will be listed. Closed channel balances will be 0msat."
      ],
      "request": {
        "required": [],
        "properties": {}
      },
      "response": {
        "required": [
          "accounts"
        ],
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "account",
                "balances"
              ],
              "properties": {
                "account": {
                  "type": "string",
                  "description": [
                    "The account name. If the account is a channel, the channel_id."
                  ]
                },
                "balances": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "balance_msat",
                      "coin_type"
                    ],
                    "properties": {
                      "balance_msat": {
                        "type": "msat",
                        "description": [
                          "Current account balance."
                        ]
                      },
                      "coin_type": {
                        "type": "string",
                        "description": [
                          "Coin type, same as HRP for bech32."
                        ]
                      }
                    }
                  }
                }
              },
              "if": {
                "required": [
                  "peer_id"
                ]
              },
              "then": {
                "required": [
                  "account",
                  "balances",
                  "peer_id",
                  "we_opened",
                  "account_closed",
                  "account_resolved"
                ],
                "additionalProperties": false,
                "properties": {
                  "account": {},
                  "balances": {},
                  "peer_id": {
                    "type": "pubkey",
                    "description": [
                      "Node id for the peer this account is with."
                    ]
                  },
                  "we_opened": {
                    "type": "boolean",
                    "description": [
                      "Did we initiate this account open (open the channel)."
                    ]
                  },
                  "account_closed": {
                    "type": "boolean",
                    "description": [
                      "",
                      ""
                    ]
                  },
                  "account_resolved": {
                    "type": "boolean",
                    "description": [
                      "Has this channel been closed and all outputs resolved?"
                    ]
                  },
                  "resolved_at_block": {
                    "type": "u32",
                    "description": [
                      "Blockheight account resolved on chain."
                    ]
                  }
                }
              },
              "else": {
                "properties": {
                  "account": {},
                  "balances": {}
                },
                "additionalProperties": false
              }
            }
          }
        }
      },
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-bkpr-listincome(7)",
        "lightning-listfunds(7)",
        "lightning-bkpr-listaccountevents(7)",
        "lightning-bkpr-channelsapy(7)",
        "lightning-listpeers(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:bkpr-listbalances#1",
            "method": "bkpr-listbalances",
            "params": {}
          },
          "response": {
            "accounts": [
              {
                "account": "wallet",
                "balances": [
                  {
                    "balance_msat": 202498294000,
                    "coin_type": "bcrt"
                  }
                ]
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "peer_id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "we_opened": false,
                "account_closed": true,
                "account_resolved": true,
                "resolved_at_block": 121,
                "balances": [
                  {
                    "balance_msat": 0,
                    "coin_type": "bcrt"
                  }
                ]
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "peer_id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "we_opened": true,
                "account_closed": true,
                "account_resolved": false,
                "balances": [
                  {
                    "balance_msat": 0,
                    "coin_type": "bcrt"
                  }
                ]
              },
              {
                "account": "ecabe6d86abdd57565b3fb7e7c5d724e60ca1a07633951769b5dbfa48dc884b3",
                "peer_id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "we_opened": false,
                "account_closed": false,
                "account_resolved": false,
                "balances": [
                  {
                    "balance_msat": 0,
                    "coin_type": "bcrt"
                  }
                ]
              },
              {
                "account": "7512083907c74ed3a045e9bf772b3d72948eb93daf84a1cee57108800451aaf2",
                "peer_id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "we_opened": true,
                "account_closed": false,
                "account_resolved": false,
                "balances": [
                  {
                    "balance_msat": 1000000000,
                    "coin_type": "bcrt"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "lightning-bkpr-listincome.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "pre-v0.10.1",
      "rpc": "bkpr-listincome",
      "title": "Command for listing all income impacting events",
      "description": [
        "The **bkpr-listincome** RPC command is a list of all income impacting events that the bookkeeper plugin has recorded for this node."
      ],
      "request": {
        "required": [],
        "properties": {
          "consolidate_fees": {
            "type": "boolean",
            "description": [
              "If true, we emit a single, consolidated event for any onchain-fees for a txid and account. Otherwise, events for every update to the onchain fee calculation for this account and txid will be printed. Note that this means that the events emitted are non-stable, i.e. calling **listincome** twice may result in different onchain fee events being emitted, depending on how much information we've logged for that transaction."
            ],
            "default": "True"
          },
          "start_time": {
            "type": "u32",
            "description": [
              "UNIX timestamp (in seconds) that filters events after the provided timestamp."
            ],
            "default": "zero"
          },
          "end_time": {
            "type": "u32",
            "description": [
              "UNIX timestamp (in seconds) that filters events up to and at the provided timestamp."
            ],
            "default": "max-int"
          }
        }
      },
      "response": {
        "required": [
          "income_events"
        ],
        "properties": {
          "income_events": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "account",
                "tag",
                "credit_msat",
                "debit_msat",
                "currency",
                "timestamp"
              ],
              "properties": {
                "account": {
                  "type": "string",
                  "description": [
                    "The account name. If the account is a channel, the channel_id."
                  ]
                },
                "tag": {
                  "type": "string",
                  "description": [
                    "Type of income event."
                  ]
                },
                "credit_msat": {
                  "type": "msat",
                  "description": [
                    "Amount earned (income)."
                  ]
                },
                "debit_msat": {
                  "type": "msat",
                  "description": [
                    "Amount spent (expenses)."
                  ]
                },
                "currency": {
                  "type": "string",
                  "description": [
                    "Human-readable bech32 part for this coin type."
                  ]
                },
                "timestamp": {
                  "type": "u32",
                  "description": [
                    "Timestamp this event was recorded by the node. For consolidated events such as onchain_fees, the most recent timestamp."
                  ]
                },
                "description": {
                  "type": "string",
                  "description": [
                    "More information about this event. If a `invoice` type, typically the bolt11/bolt12 description."
                  ]
                },
                "outpoint": {
                  "type": "string",
                  "description": [
                    "The txid:outnum for this event, if applicable."
                  ]
                },
                "txid": {
                  "type": "txid",
                  "description": [
                    "The txid of the transaction that created this event, if applicable."
                  ]
                },
                "payment_id": {
                  "type": "hex",
                  "description": [
                    "Lightning payment identifier. For an htlc, this will be the preimage."
                  ]
                }
              }
            }
          }
        }
      },
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-bkpr-listaccountevents(7)",
        "lightning-listfunds(7)",
        "lightning-bkpr-listbalances(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:bkpr-listincome#1",
            "method": "bkpr-listincome",
            "params": {}
          },
          "response": {
            "income_events": [
              {
                "account": "wallet",
                "tag": "deposit",
                "credit_msat": 200000000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303635,
                "outpoint": "386ad532212a5cffd753a39c2d7260793e0c885fc28bc1235362c2b133a4f6a4:0"
              },
              {
                "account": "wallet",
                "tag": "deposit",
                "credit_msat": 2000000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303656,
                "outpoint": "b19a249c64f2c952b4b9a400bdec159b56af2af63939c9ecb8fd937f344a7056:0"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 500000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303673,
                "description": "description send some sats l2 to l3",
                "payment_id": "7f74f064ff4528b7ec7c578df662617657cae9af4a74f5f24f68cb8465b18670"
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "tag": "invoice",
                "credit_msat": 0,
                "debit_msat": 500000000,
                "currency": "bcrt",
                "timestamp": 1722303675,
                "description": "description send some sats l3 to l4",
                "payment_id": "365522e0e6c2fe84987153324cc9fac02986855d849bbd650426ba6064463166"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303677,
                "description": "Invoice description l31",
                "payment_id": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303679,
                "description": "keysend",
                "payment_id": "80ff407792947a23f193f9a1968e9a437b071364ae3159f83631335c9a453c1b"
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "tag": "routed",
                "credit_msat": 101,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303682,
                "payment_id": "3b80a3028343b16f8ab7261343eae40ff73ba833b0b7d4dcbfd42a3078dc322b"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303686,
                "description": "keysend",
                "payment_id": "0458c01fdd3aa0b9829002390301f92083e78dc27bb293bc3e7caee5d4ed7259"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 50000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303688,
                "description": "l32 description",
                "payment_id": "788aea729ede48d315a199ce5ded76169601a61dd52e9734e707eb7c52e4e79e"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 100000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303689,
                "description": "l33 description",
                "payment_id": "2c66dc1dc3e5979fb692acc135e9796f5973e44ca9dbb1d8199c6b57f6531e68"
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "tag": "routed",
                "credit_msat": 1,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303692,
                "payment_id": "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "onchain_fee",
                "credit_msat": 0,
                "debit_msat": 102,
                "currency": "bcrt",
                "timestamp": 1722303693,
                "txid": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305"
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "tag": "onchain_fee",
                "credit_msat": 0,
                "debit_msat": 4927000,
                "currency": "bcrt",
                "timestamp": 1722303659,
                "txid": "5aab7d37b6ed1d78de32f4f91122ab9bbf0924b21732206b63ce06639ecc3fe2"
              },
              {
                "account": "wallet",
                "tag": "deposit",
                "credit_msat": 2000000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303705,
                "outpoint": "4c4b46acfd0c9d4b8393a2c3fbc27cb70bfa9270bf47ade3348c4acd949b770b:0"
              },
              {
                "account": "7512083907c74ed3a045e9bf772b3d72948eb93daf84a1cee57108800451aaf2",
                "tag": "onchain_fee",
                "credit_msat": 0,
                "debit_msat": 6960000,
                "currency": "bcrt",
                "timestamp": 1722303708,
                "txid": "416618f92bc774497a510c55f8aee76e80135bc0abe1933ebe473eeb07b41dee"
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:bkpr-listincome#2",
            "method": "bkpr-listincome",
            "params": {
              "consolidate_fees": false
            }
          },
          "response": {
            "income_events": [
              {
                "account": "wallet",
                "tag": "deposit",
                "credit_msat": 200000000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303635,
                "outpoint": "386ad532212a5cffd753a39c2d7260793e0c885fc28bc1235362c2b133a4f6a4:0"
              },
              {
                "account": "wallet",
                "tag": "deposit",
                "credit_msat": 2000000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303656,
                "outpoint": "b19a249c64f2c952b4b9a400bdec159b56af2af63939c9ecb8fd937f344a7056:0"
              },
              {
                "account": "wallet",
                "tag": "onchain_fee",
                "credit_msat": 0,
                "debit_msat": 1004927000,
                "currency": "bcrt",
                "timestamp": 1722303659,
                "txid": "5aab7d37b6ed1d78de32f4f91122ab9bbf0924b21732206b63ce06639ecc3fe2"
              },
              {
                "account": "wallet",
                "tag": "onchain_fee",
                "credit_msat": 1004927000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303659,
                "txid": "5aab7d37b6ed1d78de32f4f91122ab9bbf0924b21732206b63ce06639ecc3fe2"
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "tag": "onchain_fee",
                "credit_msat": 0,
                "debit_msat": 4927000,
                "currency": "bcrt",
                "timestamp": 1722303659,
                "txid": "5aab7d37b6ed1d78de32f4f91122ab9bbf0924b21732206b63ce06639ecc3fe2"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 500000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303673,
                "description": "description send some sats l2 to l3",
                "payment_id": "7f74f064ff4528b7ec7c578df662617657cae9af4a74f5f24f68cb8465b18670"
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "tag": "invoice",
                "credit_msat": 0,
                "debit_msat": 500000000,
                "currency": "bcrt",
                "timestamp": 1722303675,
                "description": "description send some sats l3 to l4",
                "payment_id": "365522e0e6c2fe84987153324cc9fac02986855d849bbd650426ba6064463166"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303677,
                "description": "Invoice description l31",
                "payment_id": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303679,
                "description": "keysend",
                "payment_id": "80ff407792947a23f193f9a1968e9a437b071364ae3159f83631335c9a453c1b"
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "tag": "routed",
                "credit_msat": 101,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303682,
                "payment_id": "3b80a3028343b16f8ab7261343eae40ff73ba833b0b7d4dcbfd42a3078dc322b"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 10000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303686,
                "description": "keysend",
                "payment_id": "0458c01fdd3aa0b9829002390301f92083e78dc27bb293bc3e7caee5d4ed7259"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 50000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303688,
                "description": "l32 description",
                "payment_id": "788aea729ede48d315a199ce5ded76169601a61dd52e9734e707eb7c52e4e79e"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "invoice",
                "credit_msat": 100000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303689,
                "description": "l33 description",
                "payment_id": "2c66dc1dc3e5979fb692acc135e9796f5973e44ca9dbb1d8199c6b57f6531e68"
              },
              {
                "account": "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
                "tag": "routed",
                "credit_msat": 1,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303692,
                "payment_id": "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13"
              },
              {
                "account": "a397dd9b3e44afcb67f3f3ce1d649b74a8ade63e35505985e4cc1828634f69a2",
                "tag": "onchain_fee",
                "credit_msat": 0,
                "debit_msat": 102,
                "currency": "bcrt",
                "timestamp": 1722303693,
                "txid": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305"
              },
              {
                "account": "wallet",
                "tag": "deposit",
                "credit_msat": 2000000000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303705,
                "outpoint": "4c4b46acfd0c9d4b8393a2c3fbc27cb70bfa9270bf47ade3348c4acd949b770b:0"
              },
              {
                "account": "wallet",
                "tag": "onchain_fee",
                "credit_msat": 0,
                "debit_msat": 1006960000,
                "currency": "bcrt",
                "timestamp": 1722303708,
                "txid": "416618f92bc774497a510c55f8aee76e80135bc0abe1933ebe473eeb07b41dee"
              },
              {
                "account": "wallet",
                "tag": "onchain_fee",
                "credit_msat": 1006960000,
                "debit_msat": 0,
                "currency": "bcrt",
                "timestamp": 1722303708,
                "txid": "416618f92bc774497a510c55f8aee76e80135bc0abe1933ebe473eeb07b41dee"
              },
              {
                "account": "7512083907c74ed3a045e9bf772b3d72948eb93daf84a1cee57108800451aaf2",
                "tag": "onchain_fee",
                "credit_msat": 0,
                "debit_msat": 6960000,
                "currency": "bcrt",
                "timestamp": 1722303708,
                "txid": "416618f92bc774497a510c55f8aee76e80135bc0abe1933ebe473eeb07b41dee"
              }
            ]
          }
        }
      ]
    },
    "lightning-blacklistrune.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.08",
      "rpc": "blacklistrune",
      "title": "Command to prevent a rune from working",
      "description": [
        "The **blacklistrune** RPC command allows you to effectively revoke the rune you have created (and any runes derived from that rune with additional restictions). Attempting to use these runes will be resulted in a `Blacklisted rune` error message.",
        "",
        "Destroy a rune like in olden times with the **destroyrune** command.",
        "",
        "All runes created by lightning have a unique sequential id within them and can be blacklisted in ranges for efficiency. The command always returns the blacklisted ranges on success. If no parameters are specified, no changes have been made. If start specified without end, that single rune is blacklisted. If end is also specified, every rune from start till end inclusive is blacklisted."
      ],
      "request": {
        "required": [],
        "properties": {
          "start": {
            "type": "u64",
            "description": [
              "First rune unique id to blacklist."
            ]
          },
          "end": {
            "type": "u64",
            "description": [
              "Final rune unique id to blacklist (defaults to start)."
            ]
          }
        },
        "dependentUpon": {
          "start": [
            "end"
          ]
        }
      },
      "response": {
        "required": [
          "blacklist"
        ],
        "properties": {
          "blacklist": {
            "type": "array",
            "description": [
              "The resulting blacklist ranges after the command."
            ],
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "start",
                "end"
              ],
              "properties": {
                "start": {
                  "type": "u64",
                  "description": [
                    "Unique id of first rune in this blacklist range."
                  ]
                },
                "end": {
                  "type": "u64",
                  "description": [
                    "Unique id of last rune in this blacklist range."
                  ]
                }
              }
            }
          }
        }
      },
      "author": [
        "Shahana Farooqui <<sfarooqui@blockstream.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-commando-blacklist(7)",
        "lightning-showrunes(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:blacklistrune#1",
            "method": "blacklistrune",
            "params": {
              "start": 1
            }
          },
          "response": {
            "blacklist": [
              {
                "start": 1,
                "end": 3
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:blacklistrune#2",
            "method": "blacklistrune",
            "params": {
              "start": 0,
              "end": 2
            }
          },
          "response": {
            "blacklist": [
              {
                "start": 0,
                "end": 3
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:blacklistrune#3",
            "method": "blacklistrune",
            "params": {
              "start": 3,
              "end": 4
            }
          },
          "response": {
            "blacklist": [
              {
                "start": 0,
                "end": 4
              }
            ]
          }
        }
      ]
    },
    "lightning-check.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "check",
      "title": "Command for verifying parameters",
      "description": [
        "The **check** RPC command verifies another command without actually making any changes.",
        "",
        "This is guaranteed to be safe, and will do all checks up to the point where something in the system would need to be altered (such as checking that channels are in the right state, peers connected, etc).",
        "",
        "It does not guarantee successful execution of the command in all cases. For example, a call to lightning-getroute(7) may still fail to find a route even if checking the parameters succeeds."
      ],
      "request": {
        "required": [
          "command_to_check"
        ],
        "properties": {
          "command_to_check": {
            "type": "string",
            "description": [
              "Name of the relevant command."
            ]
          }
        }
      },
      "response": {
        "properties": {
          "command_to_check": {
            "type": "string",
            "description": [
              "The *command_to_check* argument."
            ]
          }
        },
        "required": [
          "command_to_check"
        ]
      },
      "author": [
        "Mark Beckwith <<wythe@intrig.com>> and Rusty Russell <<rusty@rustcorp.com.au>> are mainly responsible."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:check#1",
            "method": "check",
            "params": {
              "command_to_check": "sendpay",
              "route": [
                {
                  "amount_msat": 1011,
                  "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                  "delay": 20,
                  "channel": "111x1x0"
                },
                {
                  "amount_msat": 1000,
                  "id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                  "delay": 10,
                  "channel": "113x1x1"
                }
              ],
              "payment_hash": "0000000000000000000000000000000000000000000000000000000000000000"
            }
          },
          "response": {
            "command_to_check": "sendpay"
          }
        },
        {
          "request": {
            "id": "example:check#2",
            "method": "check",
            "params": {
              "command_to_check": "dev",
              "subcommand": "slowcmd",
              "msec": 1000
            }
          },
          "response": {
            "command_to_check": "dev"
          }
        },
        {
          "request": {
            "id": "example:check#3",
            "method": "check",
            "params": {
              "command_to_check": "recover",
              "hsmsecret": "6c696768746e696e672d31000000000000000000000000000000000000000000"
            }
          },
          "response": {
            "command_to_check": "recover"
          }
        }
      ]
    },
    "lightning-checkmessage.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "checkmessage",
      "title": "Command to check if a signature is from a node",
      "description": [
        "The **checkmessage** RPC command is the counterpart to **signmessage**: given a node id (*pubkey*), signature (*zbase*) and a *message*, it verifies that the signature was generated by that node for that message (more technically: by someone who knows that node's secret).",
        "",
        "As a special case, if *pubkey* is not specified, we will try every known node key (as per *listnodes*), and verification succeeds if it matches for any one of them. Note: this is implemented far more efficiently than trying each one, so performance is not a concern."
      ],
      "request": {
        "required": [
          "message",
          "zbase"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": [
              "Message to be checked against the signature."
            ]
          },
          "zbase": {
            "type": "string",
            "description": [
              "The Zbase32 encoded signature to verify."
            ]
          },
          "pubkey": {
            "type": "pubkey",
            "description": [
              "The Zbase32 encoded signature to verify."
            ]
          }
        }
      },
      "response": {
        "required": [
          "verified",
          "pubkey"
        ],
        "properties": {
          "verified": {
            "type": "boolean",
            "enum": [
              true
            ],
            "description": [
              "Whether the signature was valid."
            ]
          },
          "pubkey": {
            "type": "pubkey",
            "description": [
              "The *pubkey* parameter, or the pubkey found by looking for known nodes."
            ]
          }
        }
      },
      "errors": [
        "On failure, an error is returned and core lightning exit with the following error code:",
        "",
        "- -32602: Parameter missed or malformed;",
        "- 1301: *pubkey* not found in the graph."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-signmessage(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:checkmessage#1",
            "method": "checkmessage",
            "params": {
              "message": "testcase to check new rpc error",
              "zbase": "d66bqz3qsku5fxtqsi37j11pci47ydxa95iusphutggz9ezaxt56neh77kxe5hyr41kwgkncgiu94p9ecxiexgpgsz8daoq4tw8kj8yx",
              "pubkey": "03be3b0e9992153b1d5a6e1623670b6c3663f72ce6cf2e0dd39c0a373a7de5a3b7"
            }
          },
          "response": {
            "pubkey": "03be3b0e9992153b1d5a6e1623670b6c3663f72ce6cf2e0dd39c0a373a7de5a3b7",
            "verified": true
          }
        },
        {
          "request": {
            "id": "example:checkmessage#2",
            "method": "checkmessage",
            "params": {
              "message": "this is a test!",
              "zbase": "d6tqaeuonjhi98mmont9m4wag7gg4krg1f4txonug3h31e9h6p6k6nbwjondnj46dkyausobstnk7fhyy998bhgc1yr98dfmhb4k54d7"
            }
          },
          "response": {
            "pubkey": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
            "verified": true
          }
        }
      ]
    },
    "lightning-checkrune.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.08",
      "rpc": "checkrune",
      "title": "Command to Validate Rune",
      "description": [
        "The **checkrune** RPC command checks the validity/authorization rights of specified rune for the given nodeid, method, and params.",
        "",
        "If successful, the rune \"usage\" counter (used for ratelimiting) is incremented.",
        "",
        "See lightning-createrune(7) for the fields in the rune which are checked."
      ],
      "request": {
        "required": [
          "rune"
        ],
        "properties": {
          "rune": {
            "type": "string",
            "description": [
              "Rune to check for authorization."
            ]
          },
          "nodeid": {
            "type": "string",
            "description": [
              "Node id of requesting node *(required until v23.11)*."
            ]
          },
          "method": {
            "type": "string",
            "description": [
              "Method for which rune needs to be validated *(required until v23.11)*."
            ]
          },
          "params": {
            "oneOf": [
              {
                "type": "array",
                "description": [
                  "Array of positional parameters."
                ]
              },
              {
                "type": "object",
                "description": [
                  "Parameters for method."
                ]
              }
            ]
          }
        }
      },
      "response": {
        "required": [
          "valid"
        ],
        "properties": {
          "valid": {
            "type": "boolean",
            "description": [
              "True if the rune is valid."
            ]
          }
        }
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- 1501 (RUNE_NOT_AUTHORIZED): rune is not for this node (or perhaps completely invalid)",
        "- 1502 (RUNE_NOT_PERMITTED): rune does not allow this usage (includes a detailed reason why)",
        "- 1503 (RUNE_BLACKLISTED): rune has been explicitly blacklisted."
      ],
      "author": [
        "Shahana Farooqui <<sfarooqui@blockstream.com>> is mainly responsible for consolidating logic from commando."
      ],
      "see_also": [
        "lightning-createrune(7)",
        "lightning-blacklistrune(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:checkrune#1",
            "method": "checkrune",
            "params": {
              "nodeid": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
              "rune": "_RWaZZRI7wAYU2hqlFBmYgC_dFczcpAdI_9O87YbDpg9MCZtZXRob2RebGlzdHxtZXRob2ReZ2V0fG1ldGhvZD1zdW1tYXJ5Jm1ldGhvZC9saXN0ZGF0YXN0b3Jl",
              "method": "listpeers",
              "params": {}
            }
          },
          "response": {
            "valid": true
          }
        },
        {
          "request": {
            "id": "example:checkrune#2",
            "method": "checkrune",
            "params": {
              "nodeid": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
              "rune": "QUJEYMLGgiaJvMDv_MhR2hiMKIBTbq-PrL-KxcIlirQ9MiZtZXRob2Q9cGF5JnBuYW1lYW1vdW50bXNhdDwxMDAwMA==",
              "method": "pay",
              "params": {
                "amount_msat": 9999
              }
            }
          },
          "response": {
            "valid": true
          }
        }
      ]
    },
    "lightning-close.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "close",
      "title": "Command for closing channels with direct peers",
      "description": [
        "The **close** RPC command attempts to close the channel cooperatively with the peer, or unilaterally after *unilateraltimeout*, and the to-local output will be sent to the address specified in *destination*.",
        "",
        "The peer needs to be live and connected in order to negotiate a mutual close. The default of unilaterally closing after 48 hours is usually a reasonable indication that you can no longer contact the peer."
      ],
      "request": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": [
              "Peer id, channel id or short_channel_id. If the given *id* is a peer ID (66 hex digits as a string), then it applies to the active channel of the direct peer corresponding to the given peer ID. If the given *id* is a channel ID (64 hex digits as a string, or the short channel ID *blockheight:txindex:outindex* form), then it applies to that channel."
            ]
          },
          "unilateraltimeout": {
            "type": "u32",
            "description": [
              "If it is not zero, the command will unilaterally close the channel when that number of seconds is reached. If *unilateraltimeout* is zero, then the command will wait indefinitely until the peer is online and can negotiate a mutual close."
            ],
            "default": "2 days (172800 seconds)"
          },
          "destination": {
            "type": "string",
            "description": [
              "Any Bitcoin bech32 type. If the peer hasn't offered the option_shutdown_anysegwit feature, then taproot addresses (or other v1+ segwit) are not allowed. Tell your friends to upgrade!"
            ],
            "default": "a Core Lightning wallet address"
          },
          "fee_negotiation_step": {
            "type": "string",
            "description": [
              "It controls how closing fee negotiation is performed assuming the peer proposes a fee that is different than our estimate. (Note that modern peers use the quick-close protocol which does not allow negotiation: see *feerange* instead).",
              "",
              "On every negotiation step we must give up some amount from our proposal towards the peer's proposal. This parameter can be an integer in which case it is interpreted as number of satoshis to step at a time. Or it can be an integer followed by `%` to designate a percentage of the interval to give up. A few examples, assuming the peer proposes a closing fee of 3000 satoshi and our estimate shows it must be 4000:",
              "    * `10`: our next proposal will be 4000-10=3990.",
              "    * `10%`: our next proposal will be 4000-(10% of (4000-3000))=3900.",
              "    * '1': our next proposal will be 3999. This is the most extreme case when we insist on our fee as much as possible.",
              "    * `100%`: our next proposal will be 3000. This is the most relaxed case when we quickly accept the peer's proposal."
            ],
            "default": "`50%`"
          },
          "wrong_funding": {
            "type": "outpoint",
            "description": [
              "It can only be specified if both sides have offered the `shutdown_wrong_funding` feature (enabled by the **experimental-shutdown-wrong-funding** option). It must be a transaction id followed by a colon then the output number. Instead of negotiating a shutdown to spend the expected funding transaction, the shutdown transaction will spend this output instead. This is only allowed if this peer opened the channel and the channel is unused: it can rescue openings which have been manually miscreated."
            ]
          },
          "force_lease_closed": {
            "type": "boolean",
            "description": [
              "If the channel has funds leased to the peer (option_will_fund), we prevent initiation of a mutual close unless this flag is passed in."
            ],
            "default": "False"
          },
          "feerange": {
            "type": "array",
            "items": {
              "type": "feerate"
            },
            "description": [
              "An optional array [ *min*, *max* ], indicating the minimum and maximum feerates to offer: the peer will obey these if it supports the quick-close protocol. *slow* and *unilateral_close* are the defaults. Note that the maximum fee will be capped at the final commitment transaction fee (unless the experimental anchor-outputs option is negotiated)."
            ]
          }
        }
      },
      "response": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mutual",
              "unilateral",
              "unopened"
            ],
            "description": [
              "Whether we successfully negotiated a mutual close, closed without them, or discarded not-yet-opened channel."
            ]
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "mutual",
                    "unilateral"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [
                "tx",
                "txid"
              ],
              "properties": {
                "type": {},
                "tx": {
                  "type": "hex",
                  "description": [
                    "The raw bitcoin transaction used to close the channel (if it was open)."
                  ]
                },
                "txid": {
                  "type": "txid",
                  "description": [
                    "The transaction id of the *tx* field."
                  ]
                }
              }
            },
            "else": {
              "additionalProperties": false,
              "properties": {
                "type": {}
              }
            }
          }
        ],
        "post_return_value_notes": [
          "A unilateral close may still occur at any time if the peer did not behave correctly during the close negotiation.",
          "",
          "Unilateral closes will return your funds after a delay. The delay will vary based on the peer *to_self_delay* setting, not your own setting."
        ]
      },
      "notes": [
        "Prior to 0.7.2, **close** took two parameters: *force* and *timeout*. *timeout* was the number of seconds before *force* took effect (default, 30), and *force* determined whether the result was a unilateral close or an RPC error (default). Even after the timeout, the channel would be closed if the peer reconnected."
      ],
      "notifications": [
        "Notifications may be returned indicating what is going on, especially if the peer is offline and we are waiting."
      ],
      "author": [
        "ZmnSCPxj <<ZmnSCPxj@protonmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-disconnect(7)",
        "lightning-fundchannel(7)",
        "lightningd-config(5)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:close#1",
            "method": "close",
            "params": {
              "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
              "unilateraltimeout": 1
            }
          },
          "response": {
            "tx": "020000000001018304b0bbf2ea662c053e0377df4652059bb107eb5312989471c2ef7e51f023cd0000000000ffffffff020b6e07000000000022512085d72025e78fd08bb61119f0987ab0041f50561ada6e130c645343db8c44c2afe5c8070000000000225120a7583f0c421663b8ca76fa579018b40682ef8553d73fd061cd8f216ecdced6a304004730440220369e36994b74172c67b738891a22a8f7cf3ad3d6051a1c08b641277c2b129134022060b96175b5046a0e8814c03076da885e4546f11e72188582473f0ca901001a0b0147304402206733aaa116b30474dfcdcc2ce48fbc6f222ed0eae7ac6e4c95da6a6f2a2105a502200ab85229e9981e0364ab1bef38e9a581067a9c7d9fe30487e34fd8e13eff56320147522102d595ae92b3544c3250fb772f214ad8d4c51425033740a5bcc357190add6d7e7a2102d6063d022691b2490ab454dee73a57c6ff5d308352b461ece69f3c284f2c241252ae00000000",
            "txid": "70e0466dc2e74f25afe38df6a85d5e8857079873a6d5eda4732806a7ac427305",
            "type": "mutual"
          }
        },
        {
          "request": {
            "id": "example:close#2",
            "method": "close",
            "params": {
              "id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
              "destination": "bcrt1qwvp8fktkxp07v0fp9jyqe7yl6rcgyu585a7pzr"
            }
          },
          "response": {
            "tx": "02000000000101e23fcc9e6306ce636b203217b22409bf9bab2211f9f432de781dedb6377dab5a0100000000ffffffff02746f070000000000160014730274d976305fe63d212c880cf89fd0f082728731c80700000000002251202bdd81f95d64ed2cc37d2eae725de428c91bff072d7503d87446970eedc63030040047304402205834de4c5c994a50f3ba5406534254b68e35836f98b4d5371b78225a79d087dd02201f54e1ae045e9a33dd3dd5a2b589903f305af5ead515a8e55feb2447b090415c0147304402202dd2efc52e5b4a78cbc1cf5664a0a3e3a5e67e16b0de37fc6818dbb838b6be17022062a071e81ecaec4808a44b049e091fa60b5fcf9e7f7bbdf85bc564a0a467e13601475221021c29746e4136ddff456483df3980c2d0d5f31c93ef5ded564f7294a10d7414aa2103c47b1b2afcfd68c7b86c0976adb9a4f0835bc78242fced745d78433497a867d652ae00000000",
            "txid": "2849a5c5cd182ebec02d18ba6348bb01e70a544d0ce9aa8b5533fb09d24c969e",
            "type": "mutual"
          }
        }
      ]
    },
    "lightning-commando-blacklist.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.05",
      "deprecated": [
        "v23.08",
        "v25.02"
      ],
      "rpc": "commando-blacklist",
      "title": "Command to prevent a rune from working",
      "description": [
        "The **commando-blacklist** RPC command allows you to effectively revoke the rune you have created (and any runes derived from that rune with additional restictions). Attempting to use these runes will be resulted in a `Blacklisted rune` error message.",
        "",
        "All runes created by commando have a unique sequential id within them and can be blacklisted in ranges for efficiency. The command always returns the blacklisted ranges on success. If no parameters are specified, no changes have been made. If start specified without end, that single rune is blacklisted. If end is also specified, every rune from start till end inclusive is blacklisted."
      ],
      "request": {
        "required": [],
        "properties": {
          "start": {
            "type": "u64",
            "description": [
              "First rune unique id to blacklist."
            ]
          },
          "end": {
            "type": "u64",
            "description": [
              "Final rune unique id to blacklist (defaults to start)."
            ]
          }
        },
        "dependentUpon": {
          "start": [
            "end"
          ]
        }
      },
      "response": {
        "required": [
          "blacklist"
        ],
        "properties": {
          "blacklist": {
            "type": "array",
            "description": [
              "The resulting blacklist ranges after the command."
            ],
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "start",
                "end"
              ],
              "properties": {
                "start": {
                  "type": "u64",
                  "description": [
                    "Unique id of first rune in this blacklist range."
                  ]
                },
                "end": {
                  "type": "u64",
                  "description": [
                    "Unique id of last rune in this blacklist range."
                  ]
                }
              }
            }
          }
        }
      },
      "author": [
        "Shahana Farooqui <<sfarooqui@blockstream.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-commando-listrunes(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:commando-blacklist#1",
            "method": "commando-blacklist",
            "params": {
              "start": 1
            }
          },
          "response": {
            "blacklist": [
              {
                "start": 1,
                "end": 1
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:commando-blacklist#2",
            "method": "commando-blacklist",
            "params": {
              "start": 2,
              "end": 3
            }
          },
          "response": {
            "blacklist": [
              {
                "start": 1,
                "end": 3
              }
            ]
          }
        }
      ]
    },
    "lightning-commando-listrunes.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.05",
      "deprecated": [
        "v23.08",
        "v25.02"
      ],
      "rpc": "commando-listrunes",
      "title": "Command to list previously generated runes",
      "description": [
        "The **commando-listrunes** RPC command either lists runes that we stored as we generate them (see lightning-commando-rune(7)) or decodes the rune given on the command line.",
        "",
        "NOTE: Runes generated prior to v23.05 were not stored, so will not appear in this list."
      ],
      "request": {
        "required": [],
        "properties": {
          "rune": {
            "type": "string",
            "description": [
              "Optional rune to list."
            ]
          }
        }
      },
      "response": {
        "required": [
          "runes"
        ],
        "properties": {
          "runes": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "rune",
                "unique_id",
                "restrictions",
                "restrictions_as_english"
              ],
              "properties": {
                "rune": {
                  "type": "string",
                  "description": [
                    "Base64 encoded rune."
                  ]
                },
                "unique_id": {
                  "type": "string",
                  "description": [
                    "Unique id assigned when the rune was generated; this is always a u64 for commando runes."
                  ]
                },
                "restrictions": {
                  "type": "array",
                  "description": [
                    "The restrictions on what commands this rune can authorize."
                  ],
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "alternatives",
                      "english"
                    ],
                    "properties": {
                      "alternatives": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "fieldname",
                            "value",
                            "condition",
                            "english"
                          ],
                          "properties": {
                            "fieldname": {
                              "type": "string",
                              "description": [
                                "The field this restriction applies to; see commando-rune(7)."
                              ]
                            },
                            "value": {
                              "type": "string",
                              "description": [
                                "The value accepted for this field."
                              ]
                            },
                            "condition": {
                              "type": "string",
                              "description": [
                                "The way to compare fieldname and value."
                              ]
                            },
                            "english": {
                              "type": "string",
                              "description": [
                                "English readable description of this alternative."
                              ]
                            }
                          }
                        }
                      },
                      "english": {
                        "type": "string",
                        "description": [
                          "English readable summary of alternatives above."
                        ]
                      }
                    }
                  }
                },
                "restrictions_as_english": {
                  "type": "string",
                  "description": [
                    "English readable description of the restrictions array above."
                  ]
                },
                "stored": {
                  "type": "boolean",
                  "enum": [
                    false
                  ],
                  "description": [
                    "This is false if the rune does not appear in our datastore (only possible when `rune` is specified)."
                  ]
                },
                "blacklisted": {
                  "type": "boolean",
                  "enum": [
                    true
                  ],
                  "description": [
                    "The rune has been blacklisted; see commando-blacklist(7)."
                  ]
                },
                "last_used": {
                  "type": "number",
                  "description": [
                    "The last time this rune was successfully used."
                  ],
                  "added": "23.11"
                },
                "our_rune": {
                  "type": "boolean",
                  "enum": [
                    false
                  ],
                  "description": [
                    "This is not a rune for this node (only possible when `rune` is specified)."
                  ]
                }
              }
            }
          }
        }
      },
      "author": [
        "Shahana Farooqui <<sfarooqui@blockstream.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-commando-rune(7)",
        "lightning-commando-blacklist(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:commando-listrunes#1",
            "method": "commando-listrunes",
            "params": {
              "rune": "RXgu0DD_i0wSPEZkIDyZIWL0bSAGdhvJ_GHOQdTg04A9MSZpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1NyZtZXRob2Q9bGlzdHBlZXJz"
            }
          },
          "response": {
            "runes": [
              {
                "rune": "RXgu0DD_i0wSPEZkIDyZIWL0bSAGdhvJ_GHOQdTg04A9MSZpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1NyZtZXRob2Q9bGlzdHBlZXJz",
                "unique_id": "1",
                "restrictions": [
                  {
                    "alternatives": [
                      {
                        "fieldname": "id",
                        "value": "0266e4598d1d3c415f57",
                        "condition": "^",
                        "english": "id starts with 0266e4598d1d3c415f57"
                      }
                    ],
                    "english": "id starts with 0266e4598d1d3c415f57"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "method",
                        "value": "listpeers",
                        "condition": "=",
                        "english": "method equal to listpeers"
                      }
                    ],
                    "english": "method equal to listpeers"
                  }
                ],
                "restrictions_as_english": "id starts with 0266e4598d1d3c415f57 AND method equal to listpeers"
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:commando-listrunes#2",
            "method": "commando-listrunes",
            "params": {}
          },
          "response": {
            "runes": [
              {
                "rune": "zFMd1fjhrAYxUeFA54TjloZqOt8JrA_i_nYwIgXkag49MA==",
                "unique_id": "0",
                "restrictions": [],
                "restrictions_as_english": ""
              },
              {
                "rune": "RXgu0DD_i0wSPEZkIDyZIWL0bSAGdhvJ_GHOQdTg04A9MSZpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1NyZtZXRob2Q9bGlzdHBlZXJz",
                "unique_id": "1",
                "restrictions": [
                  {
                    "alternatives": [
                      {
                        "fieldname": "id",
                        "value": "0266e4598d1d3c415f57",
                        "condition": "^",
                        "english": "id starts with 0266e4598d1d3c415f57"
                      }
                    ],
                    "english": "id starts with 0266e4598d1d3c415f57"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "method",
                        "value": "listpeers",
                        "condition": "=",
                        "english": "method equal to listpeers"
                      }
                    ],
                    "english": "method equal to listpeers"
                  }
                ],
                "restrictions_as_english": "id starts with 0266e4598d1d3c415f57 AND method equal to listpeers"
              },
              {
                "rune": "QUJEYMLGgiaJvMDv_MhR2hiMKIBTbq-PrL-KxcIlirQ9MiZtZXRob2Q9cGF5JnBuYW1lYW1vdW50bXNhdDwxMDAwMA==",
                "unique_id": "2",
                "restrictions": [
                  {
                    "alternatives": [
                      {
                        "fieldname": "method",
                        "value": "pay",
                        "condition": "=",
                        "english": "method equal to pay"
                      }
                    ],
                    "english": "method equal to pay"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "pnameamountmsat",
                        "value": "10000",
                        "condition": "<",
                        "english": "pnameamountmsat < 10000"
                      }
                    ],
                    "english": "pnameamountmsat < 10000"
                  }
                ],
                "restrictions_as_english": "method equal to pay AND pnameamountmsat < 10000"
              },
              {
                "rune": "jEx3l0c7NMZPSDYT7xnXXvNA83z5PDNBHRQTIk1BwNw9MyZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTh8cGFycjA9MDI2NmU0NTk4ZDFkM2M0MTVmNTcyYTg0ODg4MzBiNjBmN2U3NDRlZDkyMzVlYjBiMWJhOTMyODNiMzE1YzAzNTE4",
                "unique_id": "3",
                "restrictions": [
                  {
                    "alternatives": [
                      {
                        "fieldname": "id",
                        "value": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                        "condition": "=",
                        "english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                      }
                    ],
                    "english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "method",
                        "value": "listpeers",
                        "condition": "=",
                        "english": "method equal to listpeers"
                      }
                    ],
                    "english": "method equal to listpeers"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "pnum",
                        "value": "1",
                        "condition": "=",
                        "english": "pnum equal to 1"
                      }
                    ],
                    "english": "pnum equal to 1"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "pnameid",
                        "value": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                        "condition": "=",
                        "english": "pnameid equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                      },
                      {
                        "fieldname": "parr0",
                        "value": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                        "condition": "=",
                        "english": "parr0 equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                      }
                    ],
                    "english": "pnameid equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518 OR parr0 equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                  }
                ],
                "restrictions_as_english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518 AND method equal to listpeers AND pnum equal to 1 AND pnameid equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518 OR parr0 equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
              },
              {
                "rune": "8_CRIJ4arWAz72A4ILOZ46MESSJtQQQ9iQZjU28qulA9NCZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1N3xwYXJyMF4wMjY2ZTQ1OThkMWQzYzQxNWY1Nw==",
                "unique_id": "4",
                "restrictions": [
                  {
                    "alternatives": [
                      {
                        "fieldname": "id",
                        "value": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                        "condition": "=",
                        "english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                      }
                    ],
                    "english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "method",
                        "value": "listpeers",
                        "condition": "=",
                        "english": "method equal to listpeers"
                      }
                    ],
                    "english": "method equal to listpeers"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "pnum",
                        "value": "1",
                        "condition": "=",
                        "english": "pnum equal to 1"
                      }
                    ],
                    "english": "pnum equal to 1"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "pnameid",
                        "value": "0266e4598d1d3c415f57",
                        "condition": "^",
                        "english": "pnameid starts with 0266e4598d1d3c415f57"
                      },
                      {
                        "fieldname": "parr0",
                        "value": "0266e4598d1d3c415f57",
                        "condition": "^",
                        "english": "parr0 starts with 0266e4598d1d3c415f57"
                      }
                    ],
                    "english": "pnameid starts with 0266e4598d1d3c415f57 OR parr0 starts with 0266e4598d1d3c415f57"
                  }
                ],
                "restrictions_as_english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518 AND method equal to listpeers AND pnum equal to 1 AND pnameid starts with 0266e4598d1d3c415f57 OR parr0 starts with 0266e4598d1d3c415f57"
              }
            ]
          }
        }
      ]
    },
    "lightning-commando-rune.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "deprecated": [
        "v23.08",
        "v25.02"
      ],
      "rpc": "commando-rune",
      "title": "Command to Authorize Remote Peer Access",
      "description": [
        "The **commando-rune** RPC command creates a base64 string called a *rune* which can be used to access commands on this node. Each *rune* contains a unique id (a number starting at 0), and can have restrictions inside it. Nobody can remove restrictions from a rune: if you try, the rune will be rejected. There is no limit on how many runes you can issue; the node simply decodes and checks them as they are received (we do store them for lightning-commando- listrunes(7) however)."
      ],
      "request": {
        "required": [],
        "properties": {
          "rune": {
            "type": "string",
            "description": [
              "If supplied, the restrictions are simple appended to that *rune* (it doesn't need to be a rune belonging to this node). If not supplied, a new *rune* is constructed, with a new unique id."
            ]
          },
          "restrictions": {
            "description": [
              "It can be the string `readonly`, or an array of restrictions.",
              "Each restriction is an array of one or more alternatives, such as \"method is listpeers\", or \"method is listpeers OR time is before 2023\"."
            ],
            "oneOf": [
              {
                "type": "array",
                "description": [
                  "Alternatives use a simple language to examine the command which is being run:",
                  "    * time: the current UNIX time, e.g. \"time<1656759180\".",
                  "    * id: the node_id of the peer, e.g. \"id=024b9a1fa8e006f1e3937f65f66c408e6da8e1ca728ea43222a7381df1cc449605\".",
                  "    * method: the command being run, e.g. \"method=withdraw\".",
                  "    * per: how often the rune can be used, with suffix \"sec\" (default), \"min\", \"hour\", \"day\" or \"msec\", \"usec\" or \"nsec\". e.g. \"per=5sec\".",
                  "    * rate: the rate limit, per minute, e.g. \"rate=60\" is equivalent to \"per=1sec\".",
                  "    * pnum: the number of parameters. e.g. \"pnum<2\".",
                  "    * pnameX: the parameter named X (with any punctuation like `_` removed). e.g. \"pnamedestination=1RustyRX2oai4EYYDpQGWvEL62BBGqN9T\".",
                  "    * parrN: the N'th parameter. e.g. \"parr0=1RustyRX2oai4EYYDpQGWvEL62BBGqN9T\"."
                ],
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "string",
                "enum": [
                  "readonly"
                ],
                "description": [
                  "A rune which allows most *get* and *list* commands, and the *summary* command."
                ]
              }
            ]
          }
        }
      },
      "response": {
        "required": [
          "rune",
          "unique_id"
        ],
        "properties": {
          "rune": {
            "type": "string",
            "description": [
              "The resulting rune."
            ]
          },
          "unique_id": {
            "type": "string",
            "description": [
              "The id of this rune: this is set at creation and cannot be changed (even as restrictions are added)."
            ]
          },
          "warning_unrestricted_rune": {
            "type": "string",
            "description": [
              "A warning shown when runes are created with powers that could drain your node."
            ]
          }
        }
      },
      "restriction_format": [
        "Restrictions are one or more alternatives. Each alternative is *name* *operator* *value*. The valid names are shown above.",
        "",
        "Note that if a value contains `\\`, it must be preceeded by another `\\` to form valid JSON:",
        "* `=`: passes if equal ie. identical. e.g. `method=withdraw`",
        "* `/`: not equals, e.g. `method/withdraw`",
        "* `^`: starts with, e.g. `id^024b9a1fa8e006f1e3937f`",
        "* `$`: ends with, e.g. `id$381df1cc449605`.",
        "* `~`: contains, e.g. `id~006f1e3937f65f66c40`.",
        "* `<`: is a decimal integer, and is less than. e.g. `time<1656759180`",
        "* `>`: is a decimal integer, and is greater than. e.g. `time>1656759180`",
        "* `{`: preceeds in alphabetical order (or matches but is shorter),",
        "       e.g. `id{02ff`.",
        "* `}`: follows in alphabetical order (or matches but is longer),",
        "       e.g. `id}02ff`.",
        "* `#`: a comment, ignored, e.g. `dumb example#`.",
        "* `!`: only passes if the *name* does *not* exist. e.g. `pnamedestination!`.",
        "Every other operator except `#` fails if *name* does not exist!"
      ],
      "usage": [
        "You can use lightning-decode(7) to examine runes you have been given:",
        "",
        "```shell",
        "lightning-cli decode tU-RLjMiDpY2U0o3W1oFowar36RFGpWloPbW9-RuZdo9MyZpZD0wMjRiOWExZmE4ZTAwNmYxZTM5MzdmNjVmNjZjNDA4ZTZkYThlMWNhNzI4ZWE0MzIyMmE3MzgxZGYxY2M0NDk2MDUmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZF4wMjRiOWExZmE4ZTAwNmYxZTM5M3xwYXJyMF4wMjRiOWExZmE4ZTAwNmYxZTM5MyZ0aW1lPDE2NTY5MjA1MzgmcmF0ZT0y",
        "{",
        "   \"type\": \"rune\",",
        "   \"unique_id\": \"3\",",
        "   \"string\": \"b54f912e33220e9636534a375b5a05a306abdfa4451a95a5a0f6d6f7e46e65da:=3&id=024b9a1fa8e006f1e3937f65f66c408e6da8e1ca728ea43222a7381df1cc449605&method=listpeers&pnum=1&pnameid^024b9a1fa8e006f1e393|parr0^024b9a1fa8e006f1e393&time<1656920538&rate=2\",",
        "   \"restrictions\": [",
        "      {",
        "         \"alternatives\": [",
        "            \"id=024b9a1fa8e006f1e3937f65f66c408e6da8e1ca728ea43222a7381df1cc449605\"",
        "         ],",
        "         \"summary\": \"id (of commanding peer) equal to '024b9a1fa8e006f1e3937f65f66c408e6da8e1ca728ea43222a7381df1cc449605'\"",
        "      },",
        "      {",
        "         \"alternatives\": [",
        "            \"method=listpeers\"",
        "         ],",
        "         \"summary\": \"method (of command) equal to 'listpeers'\"",
        "      },",
        "      {",
        "         \"alternatives\": [",
        "            \"pnum=1\"",
        "         ],",
        "         \"summary\": \"pnum (number of command parameters) equal to 1\"",
        "      },",
        "      {",
        "         \"alternatives\": [",
        "            \"pnameid^024b9a1fa8e006f1e393\",",
        "            \"parr0^024b9a1fa8e006f1e393\"",
        "         ],",
        "         \"summary\": \"pnameid (object parameter 'id') starts with '024b9a1fa8e006f1e393' OR parr0 (array parameter #0) starts with '024b9a1fa8e006f1e393'\"",
        "      },",
        "      {",
        "         \"alternatives\": [",
        "            \"time<1656920538\"",
        "         ],",
        "         \"summary\": \"time (in seconds since 1970) less than 1656920538 (approximately 19 hours 18 minutes from now)\"",
        "      },",
        "      {",
        "         \"alternatives\": [",
        "            \"rate=2\"",
        "         ],",
        "         \"summary\": \"rate (max per minute) equal to 2\"",
        "      }",
        "   ],",
        "   \"valid\": true",
        "}",
        "```"
      ],
      "sharing_runes": [
        "Because anyone can add a restriction to a rune, you can always turn a normal rune into a read-only rune, or restrict access for 30 minutes from the time you give it to someone. Adding restrictions before sharing runes is best practice.",
        "",
        "If a rune has a ratelimit, any derived rune will have the same id, and thus will compete for that ratelimit. You might want to consider adding a tighter ratelimit to a rune before sharing it, so you will keep the remainder. For example, if you rune has a limit of 60 times per minute, adding a limit of 5 times per minute and handing that rune out means you can still use your original rune 55 times per minute."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> wrote the original Python commando.py plugin, the in-tree commando plugin, and this manual page.",
        "",
        "Christian Decker came up with the name \"commando\", which almost excuses his previous adoption of the name \"Eltoo\"."
      ],
      "see_also": [
        "lightning-commando(7)",
        "lightning-decode(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "description": [
            "This creates a fresh rune which can do anything:"
          ],
          "request": {
            "id": "example:commando-rune#1",
            "method": "commando-rune",
            "params": {}
          },
          "response": {
            "rune": "OSqc7ixY6F-gjcigBfxtzKUI54uzgFSA6YfBQoWGDV89MA==",
            "unique_id": "0",
            "warning_unrestricted_rune": "WARNING: This rune has no restrictions! Anyone who has access to this rune could drain funds from your node. Be careful when giving this to apps that you don't trust. Consider using the restrictions parameter to only allow access to specific rpc methods."
          }
        },
        {
          "description": [
            "We can add restrictions to that rune, like so:",
            "",
            "The `readonly` restriction is a short-cut for two restrictions:",
            "",
            "1: `['method^list', 'method^get', 'method=summary']`: You may call list, get or summary.",
            "",
            "2: `['method/listdatastore']`: But not listdatastore: that contains sensitive stuff!"
          ],
          "request": {
            "id": "example:commando-rune#2",
            "method": "commando-rune",
            "params": {
              "rune": "OSqc7ixY6F-gjcigBfxtzKUI54uzgFSA6YfBQoWGDV89MA==",
              "restrictions": "readonly"
            }
          },
          "response": {
            "rune": "oVkzoiQ67VCU1h_aRjPqCeWktGX54ARDsqqQgDL-uMs9MCZtZXRob2RebGlzdHxtZXRob2ReZ2V0fG1ldGhvZD1zdW1tYXJ5Jm1ldGhvZC9saXN0ZGF0YXN0b3Jl",
            "unique_id": "0"
          }
        },
        {
          "description": [
            "We can do the same manually (readonly), like so:"
          ],
          "request": {
            "id": "example:commando-rune#3",
            "method": "commando-rune",
            "params": {
              "rune": "OSqc7ixY6F-gjcigBfxtzKUI54uzgFSA6YfBQoWGDV89MA==",
              "restrictions": [
                [
                  "method^list",
                  "method^get",
                  "method=summary"
                ],
                [
                  "method/listdatastore"
                ]
              ]
            }
          },
          "response": {
            "rune": "oVkzoiQ67VCU1h_aRjPqCeWktGX54ARDsqqQgDL-uMs9MCZtZXRob2RebGlzdHxtZXRob2ReZ2V0fG1ldGhvZD1zdW1tYXJ5Jm1ldGhvZC9saXN0ZGF0YXN0b3Jl",
            "unique_id": "0"
          }
        },
        {
          "description": [
            "This will allow the rune to be used for id starting with 0266e4598d1d3c415f57, and for the method listpeers:"
          ],
          "request": {
            "id": "example:commando-rune#4",
            "method": "commando-rune",
            "params": {
              "restrictions": [
                [
                  "id^0266e4598d1d3c415f57"
                ],
                [
                  "method=listpeers"
                ]
              ]
            }
          },
          "response": {
            "rune": "AzR2J3ym3qYCQpnTCuA7EXd90jhK9qzfRVTiMXhOpzk9MSZpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1NyZtZXRob2Q9bGlzdHBlZXJz",
            "unique_id": "1"
          }
        },
        {
          "description": [
            "This will allow the rune to be used for the method pay, and for the parameter amount\\_msat to be less than 10000:"
          ],
          "request": {
            "id": "example:commando-rune#5",
            "method": "commando-rune",
            "params": {
              "restrictions": [
                [
                  "method=pay"
                ],
                [
                  "pnameamountmsat<10000"
                ]
              ]
            }
          },
          "response": {
            "rune": "4Ab5jUyjTVuYBxGTz3KtnR7kT__KDIjYBCvza5e4EVU9MiZtZXRob2Q9cGF5JnBuYW1lYW1vdW50bXNhdDwxMDAwMA==",
            "unique_id": "2"
          }
        },
        {
          "description": [
            "Let's create a rune which lets a specific peer run listpeers on themselves:"
          ],
          "request": {
            "id": "example:commando-rune#6",
            "method": "commando-rune",
            "params": {
              "restrictions": [
                [
                  "id=0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                ],
                [
                  "method=listpeers"
                ],
                [
                  "pnum=1"
                ],
                [
                  "pnameid=0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                  "parr0=0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                ]
              ]
            }
          },
          "response": {
            "rune": "M8_ecN6cRSI0k14vMKNkkSbI6HIzrS49txY_WFe30y09MyZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTh8cGFycjA9MDI2NmU0NTk4ZDFkM2M0MTVmNTcyYTg0ODg4MzBiNjBmN2U3NDRlZDkyMzVlYjBiMWJhOTMyODNiMzE1YzAzNTE4",
            "unique_id": "3"
          }
        },
        {
          "description": [
            "This allows `listpeers` with 1 argument (`pnum=1`), which is either by name (`pnameid`), or position (`parr0`). We could shorten this in several ways: either allowing only positional or named parameters, or by testing the start of the parameters only. Here's an example which only checks the first 10 bytes of the `listpeers` parameter:"
          ],
          "request": {
            "id": "example:commando-rune#7",
            "method": "commando-rune",
            "params": {
              "restrictions": [
                [
                  "id=0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                ],
                [
                  "method=listpeers"
                ],
                [
                  "pnum=1"
                ],
                [
                  "pnameid^0266e4598d1d3c415f57",
                  "parr0^0266e4598d1d3c415f57"
                ]
              ]
            }
          },
          "response": {
            "rune": "lCryeRwU6TfdsWTzmtv72TBUBAjgyWPwZ0r4GQm8vUs9NCZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1N3xwYXJyMF4wMjY2ZTQ1OThkMWQzYzQxNWY1Nw==",
            "unique_id": "4"
          }
        },
        {
          "description": [
            "Before we give this to our peer, let's add two more restrictions: that it only be usable for 24 hours from now (`time<`), and that it can only be used twice a minute (`rate=2`). `date +%s` can give us the current time in seconds:"
          ],
          "request": {
            "id": "example:commando-rune#8",
            "method": "commando-rune",
            "params": [
              "lCryeRwU6TfdsWTzmtv72TBUBAjgyWPwZ0r4GQm8vUs9NCZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1N3xwYXJyMF4wMjY2ZTQ1OThkMWQzYzQxNWY1Nw==",
              [
                [
                  "time<\"$(($(date +%s) + 24*60*60))\"",
                  "rate=2"
                ]
              ]
            ]
          },
          "response": {
            "rune": "7nvN7uG2CyTOXe3dYQL38YVdGsnD6d5VNNyeHVl6inc9NCZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1N3xwYXJyMF4wMjY2ZTQ1OThkMWQzYzQxNWY1NyZ0aW1lPCIkKCgkKGRhdGUgKyVzKSArIDI0KjYwKjYwKSkifHJhdGU9Mg==",
            "unique_id": "4"
          }
        }
      ]
    },
    "lightning-commando.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "commando",
      "title": "Command to Send a Command to a Remote Peer",
      "description": [
        "The **commando** RPC command is a homage to bad 80s movies. It also sends a directly-connected *peer_id* a custom message, containing a request to run *method* (with an optional dictionary of *params*); generally the peer will only allow you to run a command if it has provided you with a *rune* which allows it."
      ],
      "request": {
        "required": [
          "peer_id",
          "method"
        ],
        "properties": {
          "peer_id": {
            "type": "pubkey",
            "description": [
              "Peer to command."
            ]
          },
          "method": {
            "type": "string",
            "description": [
              "Method to invoke on peer."
            ]
          },
          "params": {
            "oneOf": [
              {
                "type": "array",
                "description": [
                  "Array of positional parameters."
                ]
              },
              {
                "type": "object",
                "description": [
                  "Parameters for method."
                ]
              }
            ]
          },
          "rune": {
            "type": "string",
            "description": [
              "Rune to authorize the command."
            ]
          },
          "filter": {
            "type": "object",
            "description": [
              "Filter to peer to apply to any successful result."
            ]
          }
        }
      },
      "response": {
        "required": [],
        "properties": {},
        "pre_return_value_notes": [
          "On success, the return depends on the *method* invoked."
        ]
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32600: Usually means peer is not connected",
        "- 19535: the local commando plugin discovered an error.",
        "- 19536: the remote commando plugin discovered an error.",
        "- 19537: the remote commando plugin said we weren't authorized.",
        "",
        "It can also fail if the peer does not respond, in which case it will simply hang awaiting a response."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> wrote the original Python commando.py plugin, the in-tree commando plugin, and this manual page.",
        "",
        "Christian Decker came up with the name \"commando\", which almost excuses his previous adoption of the name \"Eltoo\"."
      ],
      "see_also": [
        "lightning-commando-rune(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:commando#1",
            "method": "commando",
            "params": {
              "peer_id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
              "rune": "_RWaZZRI7wAYU2hqlFBmYgC_dFczcpAdI_9O87YbDpg9MCZtZXRob2RebGlzdHxtZXRob2ReZ2V0fG1ldGhvZD1zdW1tYXJ5Jm1ldGhvZC9saXN0ZGF0YXN0b3Jl",
              "method": "getinfo",
              "params": {}
            }
          },
          "response": {
            "id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
            "alias": "SILENTARTIST-190-g5fd2f9c-modded",
            "color": "022d22",
            "num_peers": 3,
            "num_pending_channels": 0,
            "num_active_channels": 3,
            "num_inactive_channels": 1,
            "address": [],
            "binding": [
              {
                "type": "ipv4",
                "address": "127.0.0.1",
                "port": 41219
              }
            ],
            "version": "v24.05-190-g5fd2f9c-modded",
            "blockheight": 130,
            "network": "regtest",
            "fees_collected_msat": 106,
            "lightning-dir": "/tmp/.lightning/regtest",
            "our_features": {
              "init": "08a0802a8a59a1",
              "node": "88a0802a8a59a1",
              "channel": "",
              "invoice": "02000002024100"
            }
          }
        },
        {
          "request": {
            "id": "example:commando#2",
            "method": "commando",
            "params": {
              "peer_id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
              "rune": "RXgu0DD_i0wSPEZkIDyZIWL0bSAGdhvJ_GHOQdTg04A9MSZpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1NyZtZXRob2Q9bGlzdHBlZXJz",
              "method": "listpeers",
              "params": [
                "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d"
              ]
            }
          },
          "response": {
            "peers": [
              {
                "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "connected": true,
                "num_channels": 2,
                "netaddr": [
                  "127.0.0.1:34785"
                ],
                "features": "08a0802a8a59a1"
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:commando#3",
            "method": "commando",
            "params": {
              "peer_id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
              "rune": "QUJEYMLGgiaJvMDv_MhR2hiMKIBTbq-PrL-KxcIlirQ9MiZtZXRob2Q9cGF5JnBuYW1lYW1vdW50bXNhdDwxMDAwMA==",
              "method": "pay",
              "params": {
                "bolt11": "lnbcrt1pn2s38zsp5lv49w44a8tvkwtkxfxwts8rnr864u59srp7sxuua3haahdhlhtrqpp5p928w8rmsg2hjeymedcn54vxhsz372qhcedgf003nmsknhx9594sdqcdserxgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqt5h8te9lkn0jpdkhkmlkzs80aw7mt5kdm6jxmvddkavt3vj0vakkmfcs0hsde8y8g8za46sch2lp4jxy56u8ve25sgpgcsya0vp92sgphzw570",
                "amount_msat": 9900
              }
            }
          },
          "response": {
            "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
            "payment_hash": "0954771c7b821579649bcb713a5586bc051f2817c65a84bdf19ee169dcc5a16b",
            "created_at": 1722303715.008808,
            "parts": 1,
            "amount_msat": 9900,
            "amount_sent_msat": 9900,
            "payment_preimage": "f3a3b40d63e62785f537aad60f93980914c5639872c7746299a6a1228abbc303",
            "status": "complete"
          }
        }
      ]
    },
    "lightning-connect.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "connect",
      "title": "Command for connecting to another lightning node",
      "description": [
        "The **connect** RPC command establishes a new connection with another node in the Lightning Network.",
        "",
        "Connecting to a node is just the first step in opening a channel with another node. Once the peer is connected a channel can be opened with lightning-fundchannel(7).",
        "",
        "If there are active channels with the peer, **connect** returns once all the subdaemons are in place to handle the channels, not just once it's connected."
      ],
      "request": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": [
              "The target node's public key. As a convenience, *id* may be of the form *id@host* or *id@host:port*. In this case, the *host* and *port* parameters must be omitted. This can fail if your C-lightning node is a fresh install that has not connected to any peers yet (your node has no gossip yet), or if the target *id* is a fresh install that has no channels yet (nobody will gossip about a node until it has one published channel)."
            ]
          },
          "host": {
            "type": "string",
            "description": [
              "The peer's hostname or IP address. If *host* is not specified (or doesn't work), the connection will be attempted to an IP belonging to *id* obtained through gossip with other already connected peers. If *host* begins with a `/` it is interpreted as a local path and the connection will be made to that local socket (see **bind-addr** in lightningd-config(5))."
            ]
          },
          "port": {
            "type": "u16",
            "description": [
              "The peer's port number. If not specified, the *port* depends on the current network:",
              "    * bitcoin **mainnet**: 9735.",
              "    * bitcoin **testnet**: 19735.",
              "    * bitcoin **signet**: 39735.",
              "    * bitcoin **regtest**: 19846."
            ]
          }
        }
      },
      "response": {
        "required": [
          "id",
          "features",
          "direction",
          "address"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "The peer we connected to."
            ]
          },
          "features": {
            "type": "hex",
            "description": [
              "BOLT 9 features bitmap offered by peer."
            ]
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "description": [
              "Whether they initiated connection or we did."
            ]
          },
          "address": {
            "type": "object",
            "description": [
              "Address information (mainly useful if **direction** is *out*)."
            ],
            "additionalProperties": true,
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "local socket",
                  "ipv4",
                  "ipv6",
                  "torv2",
                  "torv3"
                ],
                "description": [
                  "Type of connection (*torv2*/*torv3* only if **direction** is *out*)."
                ]
              }
            },
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "local socket"
                      ]
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "required": [
                    "socket"
                  ],
                  "properties": {
                    "type": {},
                    "socket": {
                      "type": "string",
                      "description": [
                        "Socket filename."
                      ]
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "ipv4",
                        "ipv6",
                        "torv2",
                        "torv3"
                      ]
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "required": [
                    "address",
                    "port"
                  ],
                  "properties": {
                    "type": {},
                    "address": {
                      "type": "string",
                      "description": [
                        "Address in expected format for **type**."
                      ]
                    },
                    "port": {
                      "type": "u16",
                      "description": [
                        "Port number."
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "errors": [
        "On failure, one of the following errors will be returned:",
        "",
        "- 400: Unable to connect, no address known for peer",
        "- 401: If some addresses are known but connecting to all of them failed, the message will contain details about the failures",
        "- 402: If the peer disconnected while we were connecting",
        "- -32602: If the given parameters are wrong"
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible. Felix <<fixone@gmail.com>> is the original author of this manpage."
      ],
      "see_also": [
        "lightning-fundchannel(7)",
        "lightning-listpeers(7)",
        "lightning-listchannels(7)",
        "lightning-disconnect(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:connect#1",
            "method": "connect",
            "params": {
              "id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
              "host": "localhost",
              "port": 41219
            }
          },
          "response": {
            "id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
            "features": "08a0802a8a59a1",
            "direction": "out",
            "address": {
              "type": "ipv4",
              "address": "127.0.0.1",
              "port": 41219
            }
          }
        },
        {
          "request": {
            "id": "example:connect#2",
            "method": "connect",
            "params": {
              "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
              "host": "localhost",
              "port": 34785
            }
          },
          "response": {
            "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
            "features": "08a0802a8a59a1",
            "direction": "out",
            "address": {
              "type": "ipv4",
              "address": "127.0.0.1",
              "port": 34785
            }
          }
        }
      ]
    },
    "lightning-createinvoice.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "createinvoice",
      "title": "Low-level invoice creation",
      "description": [
        "The **createinvoice** RPC command signs and saves an invoice into the database."
      ],
      "request": {
        "required": [
          "invstring",
          "label",
          "preimage"
        ],
        "properties": {
          "invstring": {
            "type": "string",
            "description": [
              "The bolt11 form, but the final signature is ignored. Minimal sanity checks are done. (Note: if **experimental-offers** is enabled, *invstring* can actually be an unsigned bolt12 invoice)."
            ]
          },
          "label": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "description": [
              "A unique string or number (which is treated as a string, so `01` is different from `1`); it is never revealed to other nodes on the lightning network, but it can be used to query the status of this invoice."
            ]
          },
          "preimage": {
            "type": "hex",
            "description": [
              "The preimage to supply upon successful payment of the invoice."
            ]
          }
        }
      },
      "response": {
        "required": [
          "label",
          "created_index",
          "payment_hash",
          "status",
          "description",
          "expires_at"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": [
              "The label for the invoice."
            ]
          },
          "bolt11": {
            "type": "string",
            "description": [
              "The bolt11 string (always present unless **bolt12** is)."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The bolt12 string instead of **bolt11** (**experimental-offers** only)."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "The amount of the invoice (if it has one)."
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "paid",
              "expired",
              "unpaid"
            ],
            "description": [
              "Whether it has been paid, or can no longer be paid."
            ]
          },
          "description": {
            "type": "string",
            "description": [
              "Description extracted from **bolt11** or **bolt12**."
            ]
          },
          "expires_at": {
            "type": "u64",
            "description": [
              "UNIX timestamp of when invoice expires (or expired)."
            ]
          },
          "created_index": {
            "type": "u64",
            "added": "v23.08",
            "description": [
              "1-based index indicating order this invoice was created in."
            ]
          },
          "pay_index": {
            "type": "u64",
            "description": [
              "Incrementing id for when this was paid (**status** *paid* only)."
            ]
          },
          "amount_received_msat": {
            "type": "msat",
            "description": [
              "Amount actually received (**status** *paid* only)."
            ]
          },
          "paid_at": {
            "type": "u64",
            "description": [
              "UNIX timestamp of when invoice was paid (**status** *paid* only)."
            ]
          },
          "paid_outpoint": {
            "type": "object",
            "description": [
              "Outpoint this invoice was paid with (**status** *paid* only)."
            ],
            "added": "v23.11",
            "additionalProperties": false,
            "required": [
              "txid",
              "outnum"
            ],
            "properties": {
              "txid": {
                "added": "v23.11",
                "type": "txid",
                "description": [
                  "ID of the transaction that paid the invoice (**status** *paid* only)."
                ]
              },
              "outnum": {
                "added": "v23.11",
                "type": "u32",
                "description": [
                  "The 0-based output number of the transaction that paid the invoice (**status** *paid* only)."
                ]
              }
            }
          },
          "payment_preimage": {
            "type": "secret",
            "description": [
              "The proof of payment: SHA256 of this **payment_hash**."
            ]
          },
          "local_offer_id": {
            "type": "hex",
            "description": [
              "The *id* of our offer which created this invoice (**experimental-offers** only)."
            ],
            "maxLength": 64,
            "minLength": 64
          },
          "invreq_payer_note": {
            "type": "string",
            "description": [
              "The optional *invreq_payer_note* from invoice_request which created this invoice (**experimental-offers** only)."
            ]
          }
        },
        "pre_return_value_notes": [
          "(Note: the return format is the same as lightning-listinvoices(7))."
        ]
      },
      "errors": [
        "On failure, an error is returned and no invoice is created. If the lightning process fails before responding, the caller should use lightning-listinvoices(7) to query whether this invoice was created or not.",
        "",
        "The following error codes may occur:",
        "",
        "- -1: Catchall nonspecific error.",
        "- 900: An invoice with the given *label* already exists."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-invoice(7)",
        "lightning-listinvoices(7)",
        "lightning-delinvoice(7)",
        "lightning-getroute(7)",
        "lightning-sendpay(7)",
        "lightning-offer(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:createinvoice#1",
            "method": "createinvoice",
            "params": {
              "invstring": "lnbcrt1u1pn2s38zsp5j9w8t9p2y6an5se63n3vkpp8c20vdsthtn78sv5t2lmt57l742wqpp5wtxkappzcsrlkmgfs6g0zyct0hkhashh7hsaxz7e65slq9fkx7fsdqcdscnxgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqd5qqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgq4sjk5smmjpgu6v8k7xc7q5evf370kdvt8s8t6x9he6jh9sgagxyqw8l7ctdldf8vgyz3pdfwr4hn9r6u5xvd48w2f2atu752zwqsulspwpxne4",
              "label": "lbl_l13",
              "preimage": "0101010101010101010101010101010101010101010101010101010101010101"
            }
          },
          "response": {
            "label": "lbl_l13",
            "bolt11": "lnbcrt1u1pn2s38zsp5j9w8t9p2y6an5se63n3vkpp8c20vdsthtn78sv5t2lmt57l742wqpp5wtxkappzcsrlkmgfs6g0zyct0hkhashh7hsaxz7e65slq9fkx7fsdqcdscnxgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqd5qqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqcjq9fq26ph2skcsm65xjwnw3crgygpampszjcvqs8aw2zf3jzcxqg4dh58fm8mxul29vh5urpyjkll9m4dq3807xcmq2q9yvgd5qt7qp695qvu",
            "payment_hash": "72cd6e8422c407fb6d098690f1130b7ded7ec2f7f5e1d30bd9d521f015363793",
            "amount_msat": 100000,
            "status": "unpaid",
            "description": "l13 description",
            "expires_at": 1722908514,
            "created_index": 7
          }
        }
      ]
    },
    "lightning-createonion.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "createonion",
      "title": "Low-level command to create a custom onion",
      "description": [
        "The **createonion** RPC command allows the caller to create a custom onion with custom payloads at each hop in the route. A custom onion can be used to implement protocol extensions that are not supported by Core Lightning directly."
      ],
      "request": {
        "required": [
          "hops",
          "assocdata"
        ],
        "properties": {
          "hops": {
            "type": "array",
            "description": [
              "A JSON list of dicts, each specifying a node and the payload destined for that node."
            ],
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "pubkey",
                "payload"
              ],
              "properties": {
                "pubkey": {
                  "type": "pubkey",
                  "description": [
                    "Node pubkey."
                  ]
                },
                "payload": {
                  "type": "hex",
                  "description": [
                    "Payload to be sent to the node."
                  ]
                }
              }
            }
          },
          "assocdata": {
            "type": "hex",
            "description": [
              "The associated data that the onion should commit to. If the onion is to be used to send a payment later it MUST match the `payment_hash` of the payment in order to be valid."
            ]
          },
          "session_key": {
            "type": "secret",
            "description": [
              "Can be used to specify a secret that is used to generate the shared secrets used to encrypt the onion for each hop. It should only be used for testing or if a specific shared secret is important. If not specified it will be securely generated internally, and the shared secrets will be returned."
            ]
          },
          "onion_size": {
            "type": "u16",
            "description": [
              "A size different from the default payment onion (1300 bytes). May be used for custom protocols like trampoline routing."
            ]
          }
        }
      },
      "response": {
        "required": [
          "onion",
          "shared_secrets"
        ],
        "properties": {
          "onion": {
            "type": "hex",
            "description": [
              "The onion packet (*onion_size* bytes)."
            ]
          },
          "shared_secrets": {
            "type": "array",
            "description": [
              "One shared secret for each node in the *hops* parameter."
            ],
            "items": {
              "type": "secret",
              "description": [
                "The shared secret with this hop."
              ]
            }
          }
        }
      },
      "author": [
        "Christian Decker <<decker.christian@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-sendonion(7)",
        "lightning-getroute(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>",
        "",
        "[BOLT 04](https://github.com/lightning/bolts/blob/master/04-onion-routing.md)"
      ],
      "examples": [
        {
          "request": {
            "id": "example:createonion#1",
            "method": "createonion",
            "params": {
              "hops": [
                {
                  "pubkey": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                  "payload": "11020203e9040187060800006f0000010000"
                },
                {
                  "pubkey": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                  "payload": "11020203e804018106080000710000010001"
                },
                {
                  "pubkey": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                  "payload": "2b020203e80401810822810248b37c63b882804cf746c5b1d7595d26713d89a443ec5808a18ed2327a1903e8"
                }
              ],
              "assocdata": "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13"
            }
          },
          "response": {
            "onion": "0003ccc1f8876af4810e23bd4cccd8f2f38ee5dc117f527c783fefa4e632f857c98d588d2e3150d16b78f9458777502e4829b490e8a2d560841eb0c2368311bf9bb4e8ded0356badafd915839409ad60866c24dd7580b468c14097575565ca95425b9f44211d9ad0305ddba2391a70892ac8c9fd7c3b67d0fe22faf5a0b6905ee2e22278fe224e89ea72c3fcc598b35afaa255123e61ae7a697703e3bb8aec4d36ea487df6ec27942aadff0527d178c897e75f1ee284995196b5ead963ee9d0df798c8265c00c5c73daac917d298cc17e5d813189321d914c45ef30170c4d617dae12bb3a760d1665705e61bb6c52789e15623cefc68d96b86a6f17159c4a86bb196c9f5e40a0744d08d6da0cfd587717b6d0d074d42ac0893fa6ae1497c84824f1d27670d4e201af5e9e5a3493b603cfc209bb0ee41b573ca647c5b9882272c972cd18f19fd895e8995097d86882a473f4d26118a7ed656c5ea04c2a183b05cc0191d07fab5e78edab4ab8ec58e05e03f32d150449c0c8e3505e46ae58e77c87616144873f72f4571b00ccf8e71bcdf33a7d32345aecb660970fa73c4844ab157aa322f140f5d47b66a0590273728ddb5b8a7f3577cff5a268935b93fe598d6df4413c67c45efa9461abaf3294070a484418aa28c03ac20d08856eb0c74dfca851e8ed110bdcacb2a2fb90954b04e99986fde0678846a709120b5d1eeab9cde8d9f27d77448f4591e00bf30d7580703e6c189c658746cf7a7cc1430ce41f84244612b438c3d895333848e5f55e99b2a9d28860863c11aaa8e3ef01ead7ba1545156c356424c33aeeaa2f1e2c290d1d8dd52cd7b8116159025aba26db6fb81ad7f9cc4554c6f9f13d16defe38918b32d62a0516521934a0009a8d37c9a84689bfd8fc1f0beceb92701dca11175e0099d7541698956ba5d93efff996f538ee47717ae6c5cda98111bc28c822e99cf8957b707de270f447b6e52d30bcf9b8a9befd8663bc54612b543d0e167da67e2f295207b70857d0a7cae8932d905db2f48c873dec20aeafa07e15fa98a088e529424c8b404f03ba0ee78a6639fde5cd37dee42877ff6489ce1de5a8992cae25dd20a6521955c19129fdcc0ea157913373bf47a8018a1dd825a2f8e26194d5008161360ae9b25fc701b2accbe88eb47eee6a50b7ee6d6e169e3905e03ca72e00eb6a51b7ed3d27501715428368662b822e2262749d3e7d3243c4fd3d825b3e72bebdeebf6e035f1ad6634523ab5dc0335611c19c9936d006f2e4cd8818eb4f8b4857c8f35d18a4891e35ff91e3b54b384398574d673fcc8da50b22b8f485a41223c97e3b8ee5b8e5ff9c00a2cbfe7360509d3fee9248b5eaa81bb83da3be45dfa8cbbbf5c52ba8749c9d6261d4239feea1e7ce85ad40ad0c66bbeb1c6898626ae4e710a66f9c39a5ee94581353b46e070cfcff9a14e3f9a6108d55bb92852eb3a50e89b1e45d31b760f2a4e263a6a876ad638b123ffee7a2b0b48e16175e3eb92bfaad4dbe0af8b2bc1c15fec5a9d92d3970c2ffab2ab8fa2c9de0bd276680a4284707cd8543a97bca2394e9514236129f1c50a932f7e9bfb98c2aaa6ffc9a4a30641061246de6edf0f711a8d25d59af42ee4445b22ce2f832f3ece52c18ca62d90c590729e04c47accaec95b556ee2541c84843c54a116f5cc45bc251a8023b695f0bf79c43a97bece8a761d387a466821984fb5ec438af20d14cebb7f0026988c81b5a1b895ef94df61aa509e53083b4306c42132b5ce302fd5a2fbb1cee30a7078ccaa3bdccf781b8c9d6ae016a5f8e5cb13f7ac1f3fd0d74a182c9abea67d346f0dfcfc211aaa7ff47196465398fce3e6e0f3b73a944a7f57a90cc6a8f1bfcd385f8312e23af6f508f4f8a976d750660ac3d63630555a3a2e7fe158a982aaf0278d9f8819e5cb",
            "shared_secrets": [
              "7d856ece68ddf5a89b909f888bc0c37207800a6cdba89db12a7cf7e7c26e5209",
              "d1dfacfabba80f07461b890fc660440a105460b687c21bf78f7e6050c2889a98",
              "46ff1895fde58206d5b437d39bb149995456ede6b9af75c0135210efbff23333"
            ]
          }
        },
        {
          "request": {
            "id": "example:createonion#2",
            "method": "createonion",
            "params": [
              [
                {
                  "pubkey": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                  "payload": "11020203e9040187060800006f0000010000"
                },
                {
                  "pubkey": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                  "payload": "11020203e804018106080000710000010001"
                },
                {
                  "pubkey": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                  "payload": "2b020203e80401810822810248b37c63b882804cf746c5b1d7595d26713d89a443ec5808a18ed2327a1903e8"
                }
              ],
              "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13",
              "4141414141414141414141414141414141414141414141414141414141414141"
            ]
          },
          "response": {
            "onion": "0002eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f2836866191c78fd992bdb6323814526c8ea3ab57e22cd7739942f3a3f117d1191ed07d90599edc15c1d83a85b3f00350f4ec0f4b78894d38499e802a15843122723857ebddb629cf308d485de6bdbef80209059e3409ee47154e1b7e8f20d7ce02826c734601240c31ea9fa2c0caea8677b0db9e98835e762cb32e42da32f60bd000fe44350e8e87b69d83363c41d8d22f1639e8701901d74b64bf51f1c21cdc785b54dc5a6ba39fc75f956b60a372f6421a84f6001b294487baf1bb049b7bd901c5854c0999a82095874b02da90021a685f7c77f4b724a3d27489c091807b32bcdfb2c68f69b50c0b43c78288c333dbb007874f36fcf224fbc2ed89690f64a62b5ecfe6275750eb1a5575f689ca6d59c9a570689372db120cf6a29177caaace5ac671a3607d37a3048af18d1d736ac8a4dde8efc4884f8eab23cdc8cb15170471ee7b416b5cf089dee8ab8ac3eea6700a6040839c1e86f6d2b5acf9c7bac856cae96e9d1b7142f91ac4818cf0007a23100ae621470ac2552116f30948f21602237d12d29f58ca73f10f05b38f7b4b728fcfd8aafc1a82502aae3081c4bc8a77771aef16247bcf26d8569140441c405a3c21a649a8439797f45e7c37a2025318f4c88e3eba454fd4cc37e9978b59fa7b1e41af450523713fdad8070c7abdeea299474c99b2bde737e8c8ad79cb9fdd70a935ad29504d185bf100a339d203cd929030454a6450132255fea11ba0c6a520fa7cc3b8638f8032a61c492f7f9d1ec591a851f25df9238945ae467126b64019f21a71a2d3ef46cdd7b61773ad632dc77e0bda7d06b493efe940d9b975ebb85c423a83d24966f5e2ae2ec9c3b2257cc21a4989dd016d688865ba5245667c302e408dc56ffdf4282ad834f0c5af1ce49b3997fe397faf6874cac24ae346b4e72e468506c0e724efe6f805e0fd115de39b6fa29d05e11bbe2ec27548517f93ebd7b977b13237ab9c40ff5766f7263ea1f2eabba460600cd7da082fcf8d0a7bd37054abfd6040f886dde48cf600612b5b73a44026e79d46336de73f2ea5fbfc9603ccd89f6954e5093b6bfe556e6f67deb0878128049186f7ac6ef461a56c2bb4f24a9679fb386e06052c3da2f367f14bc41ec191f5b0b7b3ccad1f2cc58c863c49055c889b8b04b6b6cbaec50d0d103d4ea0da75952a730b07cea0da43914b5ab3f30b5104d9a75eb003da0b5b97bf9eb9081194cc5b50362041a972841bdafde31909929237ed5b94c88dd05126cdb3fd25add0c777c2ad021e1a0e7140d6c4c2005cb353a7a6a747ee75467c052f55faa485cbcf3758eafba7a8ef00d1481cc0f05af539116f443cb02a7b30a3de899dc66cb0781ccccf5c8d93b34be0665d11cbca55cd7a424b958124edf1289c7f4fc19c1be8fc7a861ce47c43a641bafdb195e1c74a1fbf69dbd518013f3dbf2860818b5a3e6f1dd36a5546bfd416e9714dec29818ecd1aeeb29c319b407c497621248d232680417486698a3e1262f03a8bc6441d1de40ae351dae4527a8efe25fc68a3f1571aa556edd6bfb9db7caba4d2c02bab003c43055f5d3ebf961735c3b1f4cd3e0a96038697a95cceac08c0aff084450cf571f81c95d468826aa4292997ccfeba32db77c4c22a9d3caa0a37a8a961ac2f2c8a6965687143bc93c620503839fd7bd7fc2e6d9c966586b713f824b8e9d3de55cb1b81f9204b92dfaa066920c0910e62e59650e904e05b94bde3e467d45719d6a3b85a71c8ff1dcca5a5f497928db5f64c55aad93513e87f4f0c93a6fa5a9afe929cf8223ea509f584913844044aa23a4afa4bc0ad975f4904aab5d77b5e51511460a3b7a982d3b0adcf3fd2ffc2494d16add2825a929fc7c4f0c97159e6fa6aba8569433",
            "shared_secrets": [
              "2d7581974cde41b42da1d0a3147704aae5a71e8987fa30dc920c8cdf784b661d",
              "bb599b824ce9e123c8cb27cd50a996e5035b8ae903356dcbff224496aab3a891",
              "7bc4f97c2d18d5372ef572334e31590ec36b33220d7a71fa4e0fe841174eaccb"
            ]
          }
        }
      ]
    },
    "lightning-createrune.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.08",
      "rpc": "createrune",
      "title": "Command to Create/Update Rune for Authorizing Remote Peer Access",
      "description": [
        "The **createrune** RPC command creates a base64 string called a *rune* which can be used to access commands on this node. Each *rune* contains a unique id (a number starting at 0), and can have restrictions inside it. Nobody can remove restrictions from a rune: if you try, the rune will be rejected. There is no limit on how many runes you can issue; the node simply decodes and checks them as they are received.",
        "",
        "Oh, I almost forgot. Runes can also be invoked like in ancient times with the **invokerune** command. Feel the magical powers of a rune by invoking it."
      ],
      "request": {
        "required": [],
        "properties": {
          "rune": {
            "type": "string",
            "description": [
              "If supplied, the restrictions are simple appended to that *rune* (it doesn't need to be a rune belonging to this node). If not supplied, a new *rune* is constructed, with a new unique id."
            ]
          },
          "restrictions": {
            "description": [
              "It can be the string `readonly`, or an array of restrictions.",
              "Each restriction is an array of one or more alternatives, such as \"method is listpeers\", or \"method is listpeers OR time is before 2023\"."
            ],
            "oneOf": [
              {
                "type": "array",
                "description": [
                  "Alternatives use a simple language to examine the command which is being run:",
                  "    * time: the current UNIX time, e.g. \"time<1656759180\".",
                  "    * id: the node_id of the peer, e.g. \"id=024b9a1fa8e006f1e3937f65f66c408e6da8e1ca728ea43222a7381df1cc449605\".",
                  "    * method: the command being run, e.g. \"method=withdraw\".",
                  "    * per: how often the rune can be used, with suffix \"sec\" (default), \"min\", \"hour\", \"day\" or \"msec\", \"usec\" or \"nsec\". e.g. \"per=5sec\".",
                  "    * rate: the rate limit, per minute, e.g. \"rate=60\" is equivalent to \"per=1sec\".",
                  "    * pnum: the number of parameters. e.g. \"pnum<2\".",
                  "    * pnameX: the parameter named X e.g. \"pnamedestination=1RustyRX2oai4EYYDpQGWvEL62BBGqN9T\".  NOTE: until v24.05, X had to remove underscores from the parameter name (e.g. `pnameamount_msat` had to be specified as `pnameamountmsat`) but that is now fixed.",
                  "    * parrN: the N'th parameter. e.g. \"parr0=1RustyRX2oai4EYYDpQGWvEL62BBGqN9T\".",
                  "    * pinvX_N: parse the parameter X as an invoice (bolt11 or bolt12) and extract field N for comparison.  Fails if parameter X is not present, does not parse, or N is not one of the following field names:",
                  "      * amount",
                  "      * description",
                  "      * node"
                ],
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "string",
                "enum": [
                  "readonly"
                ],
                "description": [
                  "A rune which allows most *get* and *list* commands, and the *summary* command."
                ]
              }
            ]
          }
        }
      },
      "response": {
        "required": [
          "rune",
          "unique_id"
        ],
        "properties": {
          "rune": {
            "type": "string",
            "description": [
              "The resulting rune."
            ]
          },
          "unique_id": {
            "type": "string",
            "description": [
              "The id of this rune: this is set at creation and cannot be changed (even as restrictions are added)."
            ]
          },
          "warning_unrestricted_rune": {
            "type": "string",
            "description": [
              "A warning shown when runes are created with powers that could drain your node."
            ]
          }
        }
      },
      "restriction_format": [
        "Restrictions are one or more alternatives. Each alternative is *name* *operator* *value*. The valid names are shown above.",
        "",
        "Note that if a value contains `\\`, it must be preceeded by another `\\` to form valid JSON:",
        "* `=`: passes if equal ie. identical. e.g. `method=withdraw`",
        "* `/`: not equals, e.g. `method/withdraw`",
        "* `^`: starts with, e.g. `id^024b9a1fa8e006f1e3937f`",
        "* `$`: ends with, e.g. `id$381df1cc449605`.",
        "* `~`: contains, e.g. `id~006f1e3937f65f66c40`.",
        "* `<`: is a decimal integer, and is less than. e.g. `time<1656759180`",
        "* `>`: is a decimal integer, and is greater than. e.g. `time>1656759180`",
        "* `{`: preceeds in alphabetical order (or matches but is shorter),",
        "       e.g. `id{02ff`.",
        "* `}`: follows in alphabetical order (or matches but is longer),",
        "       e.g. `id}02ff`.",
        "* `#`: a comment, ignored, e.g. `dumb example#`.",
        "* `!`: only passes if the *name* does *not* exist. e.g. `pnamedestination!`.",
        "Every other operator except `#` fails if *name* does not exist!"
      ],
      "usage": [
        "You can use lightning-decode(7) to examine runes you have been given:",
        "",
        "```shell",
        "lightning-cli decode tU-RLjMiDpY2U0o3W1oFowar36RFGpWloPbW9-RuZdo9MyZpZD0wMjRiOWExZmE4ZTAwNmYxZTM5MzdmNjVmNjZjNDA4ZTZkYThlMWNhNzI4ZWE0MzIyMmE3MzgxZGYxY2M0NDk2MDUmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZF4wMjRiOWExZmE4ZTAwNmYxZTM5M3xwYXJyMF4wMjRiOWExZmE4ZTAwNmYxZTM5MyZ0aW1lPDE2NTY5MjA1MzgmcmF0ZT0y",
        "{",
        "   \"type\": \"rune\",",
        "   \"unique_id\": \"3\",",
        "   \"string\": \"b54f912e33220e9636534a375b5a05a306abdfa4451a95a5a0f6d6f7e46e65da:=3&id=024b9a1fa8e006f1e3937f65f66c408e6da8e1ca728ea43222a7381df1cc449605&method=listpeers&pnum=1&pnameid^024b9a1fa8e006f1e393|parr0^024b9a1fa8e006f1e393&time<1656920538&rate=2\",",
        "   \"restrictions\": [",
        "      {",
        "         \"alternatives\": [",
        "            \"id=024b9a1fa8e006f1e3937f65f66c408e6da8e1ca728ea43222a7381df1cc449605\"",
        "         ],",
        "         \"summary\": \"id (of commanding peer) equal to '024b9a1fa8e006f1e3937f65f66c408e6da8e1ca728ea43222a7381df1cc449605'\"",
        "      },",
        "      {",
        "         \"alternatives\": [",
        "            \"method=listpeers\"",
        "         ],",
        "         \"summary\": \"method (of command) equal to 'listpeers'\"",
        "      },",
        "      {",
        "         \"alternatives\": [",
        "            \"pnum=1\"",
        "         ],",
        "         \"summary\": \"pnum (number of command parameters) equal to 1\"",
        "      },",
        "      {",
        "         \"alternatives\": [",
        "            \"pnameid^024b9a1fa8e006f1e393\",",
        "            \"parr0^024b9a1fa8e006f1e393\"",
        "         ],",
        "         \"summary\": \"pnameid (object parameter 'id') starts with '024b9a1fa8e006f1e393' OR parr0 (array parameter #0) starts with '024b9a1fa8e006f1e393'\"",
        "      },",
        "      {",
        "         \"alternatives\": [",
        "            \"time<1656920538\"",
        "         ],",
        "         \"summary\": \"time (in seconds since 1970) less than 1656920538 (approximately 19 hours 18 minutes from now)\"",
        "      },",
        "      {",
        "         \"alternatives\": [",
        "            \"rate=2\"",
        "         ],",
        "         \"summary\": \"rate (max per minute) equal to 2\"",
        "      }",
        "   ],",
        "   \"valid\": true",
        "}",
        "```"
      ],
      "sharing_runes": [
        "Because anyone can add a restriction to a rune, you can always turn a normal rune into a read-only rune, or restrict access for 30 minutes from the time you give it to someone. Adding restrictions before sharing runes is best practice.",
        "",
        "If a rune has a ratelimit, any derived rune will have the same id, and thus will compete for that ratelimit. You might want to consider adding a tighter ratelimit to a rune before sharing it, so you will keep the remainder. For example, if you rune has a limit of 60 times per minute, adding a limit of 5 times per minute and handing that rune out means you can still use your original rune 55 times per minute."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> wrote the original Python commando.py plugin, the in-tree commando plugin, and this manual page.",
        "",
        "Shahana Farooqui <<sfarooqui@blockstream.com>> is mainly responsible for migrating commando-rune to createrune."
      ],
      "see_also": [
        "lightning-commando-rune(7)",
        "lightning-checkrune(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "description": [
            "This creates a fresh rune which can do anything:"
          ],
          "request": {
            "id": "example:createrune#1",
            "method": "createrune",
            "params": {}
          },
          "response": {
            "rune": "zFMd1fjhrAYxUeFA54TjloZqOt8JrA_i_nYwIgXkag49MA==",
            "unique_id": "0",
            "warning_unrestricted_rune": "WARNING: This rune has no restrictions! Anyone who has access to this rune could drain funds from your node. Be careful when giving this to apps that you don't trust. Consider using the restrictions parameter to only allow access to specific rpc methods."
          }
        },
        {
          "description": [
            "We can add restrictions to that rune, like so:",
            "",
            "The `readonly` restriction is a short-cut for two restrictions:",
            "",
            "1: `['method^list', 'method^get', 'method=summary']`: You may call list, get or summary.",
            "",
            "2: `['method/listdatastore']`: But not listdatastore: that contains sensitive stuff!"
          ],
          "request": {
            "id": "example:createrune#2",
            "method": "createrune",
            "params": {
              "rune": "zFMd1fjhrAYxUeFA54TjloZqOt8JrA_i_nYwIgXkag49MA==",
              "restrictions": "readonly"
            }
          },
          "response": {
            "rune": "_RWaZZRI7wAYU2hqlFBmYgC_dFczcpAdI_9O87YbDpg9MCZtZXRob2RebGlzdHxtZXRob2ReZ2V0fG1ldGhvZD1zdW1tYXJ5Jm1ldGhvZC9saXN0ZGF0YXN0b3Jl",
            "unique_id": "0"
          }
        },
        {
          "description": [
            "We can do the same manually (readonly), like so:"
          ],
          "request": {
            "id": "example:createrune#3",
            "method": "createrune",
            "params": {
              "rune": "zFMd1fjhrAYxUeFA54TjloZqOt8JrA_i_nYwIgXkag49MA==",
              "restrictions": [
                [
                  "method^list",
                  "method^get",
                  "method=summary"
                ],
                [
                  "method/listdatastore"
                ]
              ]
            }
          },
          "response": {
            "rune": "_RWaZZRI7wAYU2hqlFBmYgC_dFczcpAdI_9O87YbDpg9MCZtZXRob2RebGlzdHxtZXRob2ReZ2V0fG1ldGhvZD1zdW1tYXJ5Jm1ldGhvZC9saXN0ZGF0YXN0b3Jl",
            "unique_id": "0"
          }
        },
        {
          "description": [
            "This will allow the rune to be used for id starting with 0266e4598d1d3c415f57, and for the method listpeers:"
          ],
          "request": {
            "id": "example:createrune#4",
            "method": "createrune",
            "params": {
              "restrictions": [
                [
                  "id^0266e4598d1d3c415f57"
                ],
                [
                  "method=listpeers"
                ]
              ]
            }
          },
          "response": {
            "rune": "RXgu0DD_i0wSPEZkIDyZIWL0bSAGdhvJ_GHOQdTg04A9MSZpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1NyZtZXRob2Q9bGlzdHBlZXJz",
            "unique_id": "1"
          }
        },
        {
          "description": [
            "This will allow the rune to be used for the method pay, and for the parameter amount\\_msat to be less than 10000:"
          ],
          "request": {
            "id": "example:createrune#5",
            "method": "createrune",
            "params": {
              "restrictions": [
                [
                  "method=pay"
                ],
                [
                  "pnameamountmsat<10000"
                ]
              ]
            }
          },
          "response": {
            "rune": "QUJEYMLGgiaJvMDv_MhR2hiMKIBTbq-PrL-KxcIlirQ9MiZtZXRob2Q9cGF5JnBuYW1lYW1vdW50bXNhdDwxMDAwMA==",
            "unique_id": "2"
          }
        },
        {
          "description": [
            "Let's create a rune which lets a specific peer run listpeers on themselves:"
          ],
          "request": {
            "id": "example:createrune#6",
            "method": "createrune",
            "params": {
              "restrictions": [
                [
                  "id=0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                ],
                [
                  "method=listpeers"
                ],
                [
                  "pnum=1"
                ],
                [
                  "pnameid=0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                  "parr0=0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                ]
              ]
            }
          },
          "response": {
            "rune": "jEx3l0c7NMZPSDYT7xnXXvNA83z5PDNBHRQTIk1BwNw9MyZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTh8cGFycjA9MDI2NmU0NTk4ZDFkM2M0MTVmNTcyYTg0ODg4MzBiNjBmN2U3NDRlZDkyMzVlYjBiMWJhOTMyODNiMzE1YzAzNTE4",
            "unique_id": "3"
          }
        },
        {
          "description": [
            "This allows `listpeers` with 1 argument (`pnum=1`), which is either by name (`pnameid`), or position (`parr0`). We could shorten this in several ways: either allowing only positional or named parameters, or by testing the start of the parameters only. Here's an example which only checks the first 10 bytes of the `listpeers` parameter:"
          ],
          "request": {
            "id": "example:createrune#7",
            "method": "createrune",
            "params": {
              "restrictions": [
                [
                  "id=0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                ],
                [
                  "method=listpeers"
                ],
                [
                  "pnum=1"
                ],
                [
                  "pnameid^0266e4598d1d3c415f57",
                  "parr0^0266e4598d1d3c415f57"
                ]
              ]
            }
          },
          "response": {
            "rune": "8_CRIJ4arWAz72A4ILOZ46MESSJtQQQ9iQZjU28qulA9NCZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1N3xwYXJyMF4wMjY2ZTQ1OThkMWQzYzQxNWY1Nw==",
            "unique_id": "4"
          }
        },
        {
          "description": [
            "Before we give this to our peer, let's add two more restrictions: that it only be usable for 24 hours from now (`time<`), and that it can only be used twice a minute (`rate=2`). `date +%s` can give us the current time in seconds:"
          ],
          "request": {
            "id": "example:createrune#8",
            "method": "createrune",
            "params": [
              "8_CRIJ4arWAz72A4ILOZ46MESSJtQQQ9iQZjU28qulA9NCZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1N3xwYXJyMF4wMjY2ZTQ1OThkMWQzYzQxNWY1Nw==",
              [
                [
                  "time<\"$(($(date +%s) + 24*60*60))\"",
                  "rate=2"
                ]
              ]
            ]
          },
          "response": {
            "rune": "GJb2PC-4jYslzIVz6-425bOtpkz_A_zaEhekPlrXdj09NCZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1N3xwYXJyMF4wMjY2ZTQ1OThkMWQzYzQxNWY1NyZ0aW1lPCIkKCgkKGRhdGUgKyVzKSArIDI0KjYwKjYwKSkifHJhdGU9Mg==",
            "unique_id": "4"
          }
        }
      ]
    },
    "lightning-datastore.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "datastore",
      "title": "Command for storing (plugin) data",
      "description": [
        "The **datastore** RPC command allows plugins to store data in the Core Lightning database, for later retrieval."
      ],
      "request": {
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "description": [
              "A key can either have children or a value, never both: parents are created and removed automatically."
            ],
            "oneOf": [
              {
                "type": "array",
                "description": [
                  "An array of values to form a hierarchy (though a single value is treated as a one-element array). Using the first element of the key as the plugin name (e.g. `[ 'summary' ]`) is recommended."
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "string": {
            "type": "string",
            "description": [
              "Data to be saved in string format."
            ]
          },
          "hex": {
            "type": "hex",
            "description": [
              "Data to be saved in hex format."
            ]
          },
          "mode": {
            "type": "string",
            "description": [
              "Write mode to determine how the record is updated:",
              "    * `must-create`: fails if it already exists.",
              "    * `must-replace`: fails if it doesn't already exist.",
              "    * `create-or-replace`: never fails.",
              "    * `must-append`: must already exist, append this to what's already there.",
              "    * `create-or-append`: append if anything is there, otherwise create."
            ],
            "enum": [
              "must-create",
              "must-replace",
              "create-or-replace",
              "must-append",
              "create-or-append"
            ],
            "default": "`must-create`"
          },
          "generation": {
            "type": "u64",
            "description": [
              "If specified, means that the update will fail if the previously-existing data is not exactly that generation. This allows for simple atomicity. This is only legal with *mode* `must-replace` or `must-append`."
            ]
          }
        }
      },
      "response": {
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "array",
            "items": {
              "type": "string",
              "description": [
                "Part of the key added to the datastore."
              ]
            }
          },
          "generation": {
            "type": "u64",
            "description": [
              "The number of times this has been updated."
            ]
          },
          "hex": {
            "type": "hex",
            "description": [
              "The hex data which has been added to the datastore."
            ]
          },
          "string": {
            "type": "string",
            "description": [
              "The data as a string, if it's valid utf-8."
            ]
          }
        }
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- 1202: The key already exists (and mode said it must not)",
        "- 1203: The key does not exist (and mode said it must)",
        "- 1204: The generation was wrong (and generation was specified)",
        "- 1205: The key has children already.",
        "- 1206: One of the parents already exists with a value.",
        "- -32602: invalid parameters"
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listdatastore(7)",
        "lightning-deldatastore(7)",
        "lightning-datastoreusage(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:datastore#1",
            "method": "datastore",
            "params": {
              "key": "somekey",
              "hex": "61",
              "mode": "create-or-append"
            }
          },
          "response": {
            "key": [
              "somekey"
            ],
            "generation": 0,
            "hex": "61",
            "string": "a"
          }
        },
        {
          "request": {
            "id": "example:datastore#2",
            "method": "datastore",
            "params": {
              "key": [
                "test",
                "name"
              ],
              "string": "saving data to the store",
              "mode": "must-create"
            }
          },
          "response": {
            "key": [
              "test",
              "name"
            ],
            "generation": 0,
            "hex": "736176696e67206461746120746f207468652073746f7265",
            "string": "saving data to the store"
          }
        },
        {
          "request": {
            "id": "example:datastore#3",
            "method": "datastore",
            "params": {
              "key": "otherkey",
              "string": "foo",
              "mode": "must-create"
            }
          },
          "response": {
            "key": [
              "otherkey"
            ],
            "generation": 0,
            "hex": "666f6f",
            "string": "foo"
          }
        },
        {
          "request": {
            "id": "example:datastore#4",
            "method": "datastore",
            "params": {
              "key": "otherkey",
              "string": "bar",
              "mode": "must-append",
              "generation": 0
            }
          },
          "response": {
            "key": [
              "otherkey"
            ],
            "generation": 1,
            "hex": "666f6f626172",
            "string": "foobar"
          }
        }
      ]
    },
    "lightning-datastoreusage.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.11",
      "rpc": "datastoreusage",
      "title": "Command for listing datastore usage info",
      "description": [
        "The **datastoreusage** RPC command allows the caller to fetch the total bytes that are stored under a certain *key* (or from the root), including the size of the *key*.",
        "",
        "All descendants of the *key* (or root) are taken into account."
      ],
      "request": {
        "required": [],
        "properties": {
          "key": {
            "oneOf": [
              {
                "type": "array",
                "description": [
                  "Key is an array of values (though a single value is treated as a one-element array). Used as the starting point to traverse the datastore."
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "response": {
        "required": [
          "datastoreusage"
        ],
        "properties": {
          "datastoreusage": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "key",
              "total_bytes"
            ],
            "properties": {
              "key": {
                "type": "string",
                "added": "v23.11",
                "description": [
                  "The key from which the database was traversed."
                ]
              },
              "total_bytes": {
                "type": "u64",
                "added": "v23.11",
                "description": [
                  "The total bytes that are stored under the *key*, including the all descendants data and the size of the keys themselves."
                ]
              }
            }
          }
        }
      },
      "author": [
        "Peter Neuroth <<pet.v.ne@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-datastore(7)",
        "lightning-deldatastore(7)",
        "lightning-listdatastore(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:datastoreusage#1",
            "method": "datastoreusage",
            "params": {}
          },
          "response": {
            "datastoreusage": {
              "key": "[]",
              "total_bytes": 55
            }
          }
        },
        {
          "request": {
            "id": "example:datastoreusage#2",
            "method": "datastoreusage",
            "params": {
              "key": [
                "test",
                "name"
              ]
            }
          },
          "response": {
            "datastoreusage": {
              "key": "[test,name]",
              "total_bytes": 33
            }
          }
        },
        {
          "request": {
            "id": "example:datastoreusage#3",
            "method": "datastoreusage",
            "params": {
              "key": "otherkey"
            }
          },
          "response": {
            "datastoreusage": {
              "key": "[otherkey]",
              "total_bytes": 14
            }
          }
        }
      ]
    },
    "lightning-decode.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.05",
      "rpc": "decode",
      "title": "Command for decoding an invoice string (low-level)",
      "description": [
        "The **decode** RPC command checks and parses `bolt11`, `bolt12`, `rune` or `emergency_recover`. It may decode other formats in future."
      ],
      "request": {
        "required": [
          "string"
        ],
        "properties": {
          "string": {
            "type": "string",
            "description": [
              "Value to be decoded:",
              "    * a *bolt11* or *bolt12* string (optionally prefixed by `lightning:` or `LIGHTNING:`) as specified by the BOLT 11 and BOLT 12 specifications.",
              "    * a *rune* as created by lightning-commando-rune(7).",
              "    * an *emergency_recover* string generated by hsmtool like `lightning-hsmtool getemergencyrecover <path/to/emergency.recover>`. It holds `emergency.recover` contents and starts with `clnemerg1`."
            ]
          }
        }
      },
      "response": {
        "required": [
          "type",
          "valid"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bolt12 offer",
              "bolt12 invoice",
              "bolt12 invoice_request",
              "bolt11 invoice",
              "rune",
              "emergency recover"
            ],
            "description": [
              "What kind of object it decoded to."
            ]
          },
          "valid": {
            "type": "boolean",
            "description": [
              "If this is false, you *MUST* not use the result except for diagnostics!"
            ]
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "bolt12 offer"
                  ]
                },
                "valid": {
                  "type": "boolean",
                  "enum": [
                    true
                  ]
                }
              }
            },
            "then": {
              "required": [
                "offer_id"
              ],
              "additionalProperties": false,
              "properties": {
                "type": {},
                "valid": {},
                "offer_id": {
                  "type": "hex",
                  "description": [
                    "The id we use to identify this offer."
                  ],
                  "maxLength": 64,
                  "minLength": 64
                },
                "offer_chains": {
                  "type": "array",
                  "description": [
                    "Which blockchains this offer is for (missing implies bitcoin mainnet only)."
                  ],
                  "items": {
                    "type": "hash",
                    "description": [
                      "The genesis blockhash."
                    ]
                  }
                },
                "offer_metadata": {
                  "type": "hex",
                  "description": [
                    "Any metadata the creator of the offer includes."
                  ]
                },
                "offer_currency": {
                  "type": "string",
                  "description": [
                    "ISO 4217 code of the currency (missing implies Bitcoin)."
                  ],
                  "maxLength": 3,
                  "minLength": 3
                },
                "warning_unknown_offer_currency": {
                  "type": "string",
                  "description": [
                    "The currency code is unknown (so no `currency_minor_unit`)."
                  ]
                },
                "currency_minor_unit": {
                  "type": "u32",
                  "description": [
                    "The number of decimal places to apply to amount (if currency known)."
                  ]
                },
                "offer_amount": {
                  "type": "u64",
                  "description": [
                    "The amount in the `offer_currency` adjusted by `currency_minor_unit`, if any."
                  ]
                },
                "offer_amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount in bitcoin (if specified, and no `offer_currency`)."
                  ]
                },
                "offer_description": {
                  "type": "string",
                  "description": [
                    "The description of the purpose of the offer."
                  ]
                },
                "offer_issuer": {
                  "type": "string",
                  "description": [
                    "The description of the creator of the offer."
                  ]
                },
                "offer_features": {
                  "type": "hex",
                  "description": [
                    "The feature bits of the offer."
                  ]
                },
                "offer_absolute_expiry": {
                  "type": "u64",
                  "description": [
                    "UNIX timestamp of when this offer expires."
                  ]
                },
                "offer_quantity_max": {
                  "type": "u64",
                  "description": [
                    "The maximum quantity (or, if 0, means any quantity)."
                  ]
                },
                "offer_paths": {
                  "type": "array",
                  "description": [
                    "Paths to the destination."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "blinding",
                      "path"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "first_node_id": {
                        "type": "pubkey",
                        "description": [
                          "The (presumably well-known) public key of the start of the path."
                        ]
                      },
                      "first_scid": {
                        "added": "v23.05",
                        "type": "short_channel_id",
                        "description": [
                          "the short channel id of the start of the path (alternative to first_node_id)"
                        ]
                      },
                      "first_scid_dir": {
                        "added": "v23.05",
                        "type": "u32",
                        "description": [
                          "which end of the first_scid is the start of the path"
                        ]
                      },
                      "blinding": {
                        "type": "pubkey",
                        "description": [
                          "Blinding factor for this path."
                        ]
                      },
                      "path": {
                        "type": "array",
                        "description": [
                          "An individual path."
                        ],
                        "items": {
                          "type": "object",
                          "required": [
                            "blinded_node_id",
                            "encrypted_recipient_data"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "blinded_node_id": {
                              "type": "pubkey",
                              "description": [
                                "Node_id of the hop."
                              ]
                            },
                            "encrypted_recipient_data": {
                              "type": "hex",
                              "description": [
                                "Encrypted TLV entry for this hop."
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "warning_empty_blinded_path": {
                  "added": "v24.08",
                  "type": "string",
                  "description": [
                    "The blinded path has 0 hops."
                  ]
                },
                "offer_node_id": {
                  "type": "pubkey",
                  "deprecated": [
                    "v24.08",
                    "v24.11"
                  ],
                  "description": [
                    "Obsolete name for offer_issuer_id."
                  ]
                },
                "offer_issuer_id": {
                  "type": "pubkey",
                  "added": "v24.08",
                  "description": [
                    "The pubkey associated with the offer (can be a node id)."
                  ]
                },
                "offer_recurrence": {
                  "type": "object",
                  "description": [
                    "How often to this offer should be used."
                  ],
                  "required": [
                    "period",
                    "time_unit"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "time_unit": {
                      "type": "u32",
                      "description": [
                        "The BOLT12 time unit."
                      ]
                    },
                    "time_unit_name": {
                      "type": "string",
                      "description": [
                        "The name of `time_unit` (if valid)."
                      ]
                    },
                    "period": {
                      "type": "u32",
                      "description": [
                        "How many `time_unit` per payment period."
                      ]
                    },
                    "basetime": {
                      "type": "u64",
                      "description": [
                        "Period starts at this UNIX timestamp."
                      ]
                    },
                    "start_any_period": {
                      "type": "u64",
                      "description": [
                        "You can start at any period (only if `basetime` present)."
                      ]
                    },
                    "limit": {
                      "type": "u32",
                      "description": [
                        "Maximum period number for recurrence."
                      ]
                    },
                    "paywindow": {
                      "type": "object",
                      "description": [
                        "When within a period will payment be accepted."
                      ],
                      "default": "prior and during the period",
                      "required": [
                        "seconds_before",
                        "seconds_after"
                      ],
                      "additionalProperties": false,
                      "properties": {
                        "seconds_before": {
                          "type": "u32",
                          "description": [
                            "Seconds prior to period start."
                          ]
                        },
                        "seconds_after": {
                          "type": "u32",
                          "description": [
                            "Seconds after to period start."
                          ]
                        },
                        "proportional_amount": {
                          "type": "boolean",
                          "enum": [
                            true
                          ],
                          "description": [
                            "Amount should be scaled if paid after period start."
                          ]
                        }
                      }
                    }
                  }
                },
                "unknown_offer_tlvs": {
                  "type": "array",
                  "description": [
                    "Any extra fields we didn't know how to parse."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "length",
                      "value"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "u64",
                        "description": [
                          "The type."
                        ]
                      },
                      "length": {
                        "type": "u64",
                        "description": [
                          "The length."
                        ]
                      },
                      "value": {
                        "type": "hex",
                        "description": [
                          "The value."
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "bolt12 offer"
                  ]
                },
                "valid": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                }
              }
            },
            "then": {
              "required": [],
              "additionalProperties": false,
              "properties": {
                "type": {},
                "valid": {},
                "offer_id": {},
                "node_id": {},
                "signature": {},
                "chains": {},
                "currency": {},
                "minor_unit": {},
                "warning_unknown_offer_currency": {},
                "amount": {},
                "amount_msat": {},
                "send_invoice": {},
                "description": {},
                "vendor": {},
                "features": {},
                "absolute_expiry": {},
                "paths": {},
                "quantity_max": {},
                "unknown_offer_tlvs": {},
                "recurrence": {},
                "warning_missing_offer_node_id": {
                  "type": "string",
                  "deprecated": [
                    "v24.08",
                    "v24.11"
                  ],
                  "description": [
                    "`offer_node_id` is not present."
                  ]
                },
                "warning_missing_offer_issuer_id": {
                  "type": "string",
                  "added": "v24.08",
                  "description": [
                    "`offer_issuer_id` is not present and there are no offer_paths"
                  ]
                },
                "warning_invalid_offer_description": {
                  "type": "string",
                  "description": [
                    "`offer_description` is not valid UTF8."
                  ]
                },
                "warning_missing_offer_description": {
                  "type": "string",
                  "description": [
                    "`offer_description` is not present."
                  ]
                },
                "warning_invalid_offer_currency": {
                  "type": "string",
                  "description": [
                    "`offer_currency_code` is not valid UTF8."
                  ]
                },
                "warning_invalid_offer_issuer": {
                  "type": "string",
                  "description": [
                    "`offer_issuer` is not valid UTF8."
                  ]
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "bolt12 invoice_request"
                  ]
                },
                "valid": {
                  "type": "boolean",
                  "enum": [
                    true
                  ]
                }
              }
            },
            "then": {
              "required": [
                "invreq_metadata",
                "invreq_payer_id",
                "signature"
              ],
              "additionalProperties": false,
              "properties": {
                "type": {},
                "valid": {},
                "offer_id": {
                  "type": "hex",
                  "description": [
                    "The id we use to identify this offer."
                  ],
                  "maxLength": 64,
                  "minLength": 64
                },
                "offer_chains": {
                  "type": "array",
                  "description": [
                    "Which blockchains this offer is for (missing implies bitcoin mainnet only)."
                  ],
                  "items": {
                    "type": "hex",
                    "description": [
                      "The genesis blockhash."
                    ],
                    "maxLength": 64,
                    "minLength": 64
                  }
                },
                "offer_metadata": {
                  "type": "hex",
                  "description": [
                    "Any metadata the creator of the offer includes."
                  ]
                },
                "offer_currency": {
                  "type": "string",
                  "description": [
                    "ISO 4217 code of the currency (missing implies Bitcoin)."
                  ],
                  "maxLength": 3,
                  "minLength": 3
                },
                "warning_unknown_offer_currency": {
                  "type": "string",
                  "description": [
                    "The currency code is unknown (so no `currency_minor_unit`)."
                  ]
                },
                "currency_minor_unit": {
                  "type": "u32",
                  "description": [
                    "The number of decimal places to apply to amount (if currency known)."
                  ]
                },
                "offer_amount": {
                  "type": "u64",
                  "description": [
                    "The amount in the `offer_currency` adjusted by `currency_minor_unit`, if any."
                  ]
                },
                "offer_amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount in bitcoin (if specified, and no `offer_currency`)."
                  ]
                },
                "offer_description": {
                  "type": "string",
                  "description": [
                    "The description of the purpose of the offer."
                  ]
                },
                "offer_issuer": {
                  "type": "string",
                  "description": [
                    "The description of the creator of the offer."
                  ]
                },
                "offer_features": {
                  "type": "hex",
                  "description": [
                    "The feature bits of the offer."
                  ]
                },
                "offer_absolute_expiry": {
                  "type": "u64",
                  "description": [
                    "UNIX timestamp of when this offer expires."
                  ]
                },
                "offer_quantity_max": {
                  "type": "u64",
                  "description": [
                    "The maximum quantity (or, if 0, means any quantity)."
                  ]
                },
                "offer_paths": {
                  "type": "array",
                  "description": [
                    "Paths to the destination."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "blinding",
                      "path"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "first_node_id": {
                        "type": "pubkey",
                        "description": [
                          "The (presumably well-known) public key of the start of the path."
                        ]
                      },
                      "first_scid": {
                        "added": "v23.05",
                        "type": "short_channel_id",
                        "description": [
                          "the short channel id of the start of the path (alternative to first_node_id)"
                        ]
                      },
                      "first_scid_dir": {
                        "added": "v23.05",
                        "type": "u32",
                        "description": [
                          "which end of the first_scid is the start of the path"
                        ]
                      },
                      "blinding": {
                        "type": "pubkey",
                        "description": [
                          "Blinding factor for this path."
                        ]
                      },
                      "path": {
                        "type": "array",
                        "description": [
                          "An individual path."
                        ],
                        "items": {
                          "type": "object",
                          "required": [
                            "blinded_node_id",
                            "encrypted_recipient_data"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "blinded_node_id": {
                              "type": "pubkey",
                              "description": [
                                "Node_id of the hop."
                              ]
                            },
                            "encrypted_recipient_data": {
                              "type": "hex",
                              "description": [
                                "Encrypted TLV entry for this hop."
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "offer_node_id": {
                  "type": "pubkey",
                  "deprecated": [
                    "v24.08",
                    "v24.11"
                  ],
                  "description": [
                    "Public key of the offering node."
                  ]
                },
                "offer_issuer_id": {
                  "type": "pubkey",
                  "added": "v24.08",
                  "description": [
                    "Public key of the offering node (can be a node id)."
                  ]
                },
                "offer_recurrence": {
                  "type": "object",
                  "description": [
                    "How often to this offer should be used."
                  ],
                  "required": [
                    "period",
                    "time_unit"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "time_unit": {
                      "type": "u32",
                      "description": [
                        "The BOLT12 time unit."
                      ]
                    },
                    "time_unit_name": {
                      "type": "string",
                      "description": [
                        "The name of `time_unit` (if valid)."
                      ]
                    },
                    "period": {
                      "type": "u32",
                      "description": [
                        "How many `time_unit` per payment period."
                      ]
                    },
                    "basetime": {
                      "type": "u64",
                      "description": [
                        "Period starts at this UNIX timestamp."
                      ]
                    },
                    "start_any_period": {
                      "type": "u64",
                      "description": [
                        "You can start at any period (only if `basetime` present)."
                      ]
                    },
                    "limit": {
                      "type": "u32",
                      "description": [
                        "Maximum period number for recurrence."
                      ]
                    },
                    "paywindow": {
                      "type": "object",
                      "description": [
                        "When within a period will payment be accepted."
                      ],
                      "default": "prior and during the period",
                      "required": [
                        "seconds_before",
                        "seconds_after"
                      ],
                      "additionalProperties": false,
                      "properties": {
                        "seconds_before": {
                          "type": "u32",
                          "description": [
                            "Seconds prior to period start."
                          ]
                        },
                        "seconds_after": {
                          "type": "u32",
                          "description": [
                            "Seconds after to period start."
                          ]
                        },
                        "proportional_amount": {
                          "type": "boolean",
                          "enum": [
                            true
                          ],
                          "description": [
                            "Amount should be scaled if paid after period start."
                          ]
                        }
                      }
                    }
                  }
                },
                "invreq_metadata": {
                  "type": "hex",
                  "description": [
                    "The payer-provided blob to derive invreq_payer_id."
                  ]
                },
                "invreq_payer_id": {
                  "type": "hex",
                  "description": [
                    "The payer-provided key."
                  ]
                },
                "invreq_chain": {
                  "type": "hex",
                  "description": [
                    "Which blockchain this offer is for (missing implies bitcoin mainnet only)."
                  ],
                  "maxLength": 64,
                  "minLength": 64
                },
                "invreq_amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount the invoice should be for."
                  ]
                },
                "invreq_features": {
                  "type": "hex",
                  "description": [
                    "The feature bits of the invoice_request."
                  ]
                },
                "invreq_quantity": {
                  "type": "u64",
                  "description": [
                    "The number of items to invoice for."
                  ]
                },
                "invreq_payer_note": {
                  "type": "string",
                  "description": [
                    "A note attached by the payer."
                  ]
                },
                "invreq_paths": {
                  "type": "array",
                  "added": "v24.08",
                  "description": [
                    "Paths to the destination."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "blinding",
                      "path"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "first_node_id": {
                        "added": "v24.08",
                        "type": "pubkey",
                        "description": [
                          "The (presumably well-known) public key of the start of the path."
                        ]
                      },
                      "first_scid": {
                        "added": "v24.08",
                        "type": "short_channel_id",
                        "description": [
                          "the short channel id of the start of the path (alternative to first_node_id)"
                        ]
                      },
                      "first_scid_dir": {
                        "added": "v24.08",
                        "type": "u32",
                        "description": [
                          "which end of the first_scid is the start of the path"
                        ]
                      },
                      "blinding": {
                        "added": "v24.08",
                        "type": "pubkey",
                        "description": [
                          "Blinding factor for this path."
                        ]
                      },
                      "path": {
                        "type": "array",
                        "added": "v24.08",
                        "description": [
                          "An individual path."
                        ],
                        "items": {
                          "type": "object",
                          "required": [
                            "blinded_node_id",
                            "encrypted_recipient_data"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "blinded_node_id": {
                              "added": "v24.08",
                              "type": "pubkey",
                              "description": [
                                "Node_id of the hop."
                              ]
                            },
                            "encrypted_recipient_data": {
                              "added": "v24.08",
                              "type": "hex",
                              "description": [
                                "Encrypted TLV entry for this hop."
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "invreq_recurrence_counter": {
                  "type": "u32",
                  "description": [
                    "Which number request this is for the same invoice."
                  ]
                },
                "invreq_recurrence_start": {
                  "type": "u32",
                  "description": [
                    "When we're requesting to start an invoice at a non-zero period."
                  ]
                },
                "signature": {
                  "type": "bip340sig",
                  "description": [
                    "BIP-340 signature of the `invreq_payer_id` on this invoice_request."
                  ]
                },
                "unknown_invoice_request_tlvs": {
                  "type": "array",
                  "description": [
                    "Any extra fields we didn't know how to parse."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "length",
                      "value"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "u64",
                        "description": [
                          "The type."
                        ]
                      },
                      "length": {
                        "type": "u64",
                        "description": [
                          "The length."
                        ]
                      },
                      "value": {
                        "type": "hex",
                        "description": [
                          "The value."
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "bolt12 invoice_request"
                  ]
                },
                "valid": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                }
              }
            },
            "then": {
              "required": [],
              "additionalProperties": false,
              "properties": {
                "type": {},
                "valid": {},
                "offer_id": {},
                "offer_chains": {},
                "offer_metadata": {},
                "offer_currency": {},
                "warning_unknown_offer_currency": {},
                "currency_minor_unit": {},
                "offer_amount": {},
                "offer_amount_msat": {},
                "offer_description": {},
                "offer_issuer": {},
                "offer_features": {},
                "offer_absolute_expiry": {},
                "offer_quantity_max": {},
                "offer_paths": {},
                "offer_node_id": {},
                "offer_issuer_id": {},
                "offer_recurrence": {},
                "invreq_metadata": {},
                "invreq_payer_id": {},
                "invreq_chain": {},
                "invreq_amount_msat": {},
                "invreq_features": {},
                "invreq_quantity": {},
                "invreq_payer_note": {},
                "invreq_paths": {},
                "invreq_recurrence_counter": {},
                "invreq_recurrence_start": {},
                "warning_invalid_offer_description": {
                  "type": "string",
                  "description": [
                    "`offer_description` is not valid UTF8."
                  ]
                },
                "warning_missing_offer_description": {
                  "type": "string",
                  "description": [
                    "`offer_description` is not present."
                  ]
                },
                "warning_invalid_offer_currency": {
                  "type": "string",
                  "description": [
                    "`offer_currency_code` is not valid UTF8."
                  ]
                },
                "warning_invalid_offer_issuer": {
                  "type": "string",
                  "description": [
                    "`offer_issuer` is not valid UTF8."
                  ]
                },
                "warning_missing_invreq_metadata": {
                  "type": "string",
                  "description": [
                    "`invreq_metadata` is not present."
                  ]
                },
                "warning_missing_invreq_payer_id": {
                  "type": "string",
                  "description": [
                    "`invreq_payer_id` is not present."
                  ]
                },
                "warning_invalid_invreq_payer_note": {
                  "type": "string",
                  "description": [
                    "`invreq_payer_note` is not valid UTF8."
                  ]
                },
                "warning_missing_invoice_request_signature": {
                  "type": "string",
                  "description": [
                    "`signature` is not present."
                  ]
                },
                "warning_invalid_invoice_request_signature": {
                  "type": "string",
                  "description": [
                    "Incorrect `signature`."
                  ]
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "bolt12 invoice"
                  ]
                },
                "valid": {
                  "type": "boolean",
                  "enum": [
                    true
                  ]
                }
              }
            },
            "then": {
              "required": [
                "invreq_metadata",
                "invreq_payer_id",
                "invoice_paths",
                "invoice_created_at",
                "invoice_payment_hash",
                "invoice_amount_msat",
                "signature"
              ],
              "additionalProperties": false,
              "properties": {
                "type": {},
                "valid": {},
                "offer_id": {
                  "type": "hex",
                  "description": [
                    "The id we use to identify this offer."
                  ],
                  "maxLength": 64,
                  "minLength": 64
                },
                "offer_chains": {
                  "type": "array",
                  "description": [
                    "Which blockchains this offer is for (missing implies bitcoin mainnet only)."
                  ],
                  "items": {
                    "type": "hex",
                    "description": [
                      "The genesis blockhash."
                    ],
                    "maxLength": 64,
                    "minLength": 64
                  }
                },
                "offer_metadata": {
                  "type": "hex",
                  "description": [
                    "Any metadata the creator of the offer includes."
                  ]
                },
                "offer_currency": {
                  "type": "string",
                  "description": [
                    "ISO 4217 code of the currency (missing implies Bitcoin)."
                  ],
                  "maxLength": 3,
                  "minLength": 3
                },
                "warning_unknown_offer_currency": {
                  "type": "string",
                  "description": [
                    "The currency code is unknown (so no `currency_minor_unit`)."
                  ]
                },
                "currency_minor_unit": {
                  "type": "u32",
                  "description": [
                    "The number of decimal places to apply to amount (if currency known)."
                  ]
                },
                "offer_amount": {
                  "type": "u64",
                  "description": [
                    "The amount in the `offer_currency` adjusted by `currency_minor_unit`, if any."
                  ]
                },
                "offer_amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount in bitcoin (if specified, and no `offer_currency`)."
                  ]
                },
                "offer_description": {
                  "type": "string",
                  "description": [
                    "The description of the purpose of the offer."
                  ]
                },
                "offer_issuer": {
                  "type": "string",
                  "description": [
                    "The description of the creator of the offer."
                  ]
                },
                "offer_features": {
                  "type": "hex",
                  "description": [
                    "The feature bits of the offer."
                  ]
                },
                "offer_absolute_expiry": {
                  "type": "u64",
                  "description": [
                    "UNIX timestamp of when this offer expires."
                  ]
                },
                "offer_quantity_max": {
                  "type": "u64",
                  "description": [
                    "The maximum quantity (or, if 0, means any quantity)."
                  ]
                },
                "offer_paths": {
                  "type": "array",
                  "description": [
                    "Paths to the destination."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "blinding",
                      "path"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "first_node_id": {
                        "type": "pubkey",
                        "description": [
                          "The (presumably well-known) public key of the start of the path."
                        ]
                      },
                      "first_scid": {
                        "added": "v23.05",
                        "type": "short_channel_id",
                        "description": [
                          "the short channel id of the start of the path (alternative to first_node_id)"
                        ]
                      },
                      "first_scid_dir": {
                        "added": "v23.05",
                        "type": "u32",
                        "description": [
                          "which end of the first_scid is the start of the path"
                        ]
                      },
                      "blinding": {
                        "type": "pubkey",
                        "description": [
                          "Blinding factor for this path."
                        ]
                      },
                      "path": {
                        "type": "array",
                        "description": [
                          "An individual path."
                        ],
                        "items": {
                          "type": "object",
                          "required": [
                            "blinded_node_id",
                            "encrypted_recipient_data"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "blinded_node_id": {
                              "type": "pubkey",
                              "description": [
                                "Node_id of the hop."
                              ]
                            },
                            "encrypted_recipient_data": {
                              "type": "hex",
                              "description": [
                                "Encrypted TLV entry for this hop."
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "offer_node_id": {
                  "type": "pubkey",
                  "deprecated": [
                    "v24.08",
                    "v24.11"
                  ],
                  "description": [
                    "Public key of the offering node."
                  ]
                },
                "offer_issuer_id": {
                  "type": "pubkey",
                  "added": "v24.08",
                  "description": [
                    "Public key of the offering node (can be a node id)."
                  ]
                },
                "offer_recurrence": {
                  "type": "object",
                  "description": [
                    "How often to this offer should be used."
                  ],
                  "required": [
                    "period",
                    "time_unit"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "time_unit": {
                      "type": "u32",
                      "description": [
                        "The BOLT12 time unit."
                      ]
                    },
                    "time_unit_name": {
                      "type": "string",
                      "description": [
                        "The name of `time_unit` (if valid)."
                      ]
                    },
                    "period": {
                      "type": "u32",
                      "description": [
                        "How many `time_unit` per payment period."
                      ]
                    },
                    "basetime": {
                      "type": "u64",
                      "description": [
                        "Period starts at this UNIX timestamp."
                      ]
                    },
                    "start_any_period": {
                      "type": "u64",
                      "description": [
                        "You can start at any period (only if `basetime` present)."
                      ]
                    },
                    "limit": {
                      "type": "u32",
                      "description": [
                        "Maximum period number for recurrence."
                      ]
                    },
                    "paywindow": {
                      "type": "object",
                      "description": [
                        "When within a period will payment be accepted."
                      ],
                      "default": "prior and during the period",
                      "required": [
                        "seconds_before",
                        "seconds_after"
                      ],
                      "additionalProperties": false,
                      "properties": {
                        "seconds_before": {
                          "type": "u32",
                          "description": [
                            "Seconds prior to period start."
                          ]
                        },
                        "seconds_after": {
                          "type": "u32",
                          "description": [
                            "Seconds after to period start."
                          ]
                        },
                        "proportional_amount": {
                          "type": "boolean",
                          "enum": [
                            true
                          ],
                          "description": [
                            "Amount should be scaled if paid after period start."
                          ]
                        }
                      }
                    }
                  }
                },
                "invreq_metadata": {
                  "type": "hex",
                  "description": [
                    "The payer-provided blob to derive invreq_payer_id."
                  ]
                },
                "invreq_payer_id": {
                  "type": "hex",
                  "description": [
                    "The payer-provided key."
                  ]
                },
                "invreq_chain": {
                  "type": "hex",
                  "description": [
                    "Which blockchain this offer is for (missing implies bitcoin mainnet only)."
                  ],
                  "maxLength": 64,
                  "minLength": 64
                },
                "invreq_amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount the invoice should be for."
                  ]
                },
                "invreq_features": {
                  "type": "hex",
                  "description": [
                    "The feature bits of the invoice_request."
                  ]
                },
                "invreq_quantity": {
                  "type": "u64",
                  "description": [
                    "The number of items to invoice for."
                  ]
                },
                "invreq_payer_note": {
                  "type": "string",
                  "description": [
                    "A note attached by the payer."
                  ]
                },
                "invreq_paths": {
                  "type": "array",
                  "added": "v24.08",
                  "description": [
                    "Paths to the destination."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "blinding",
                      "path"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "first_node_id": {
                        "added": "v24.08",
                        "type": "pubkey",
                        "description": [
                          "The (presumably well-known) public key of the start of the path."
                        ]
                      },
                      "first_scid": {
                        "added": "v24.08",
                        "type": "short_channel_id",
                        "description": [
                          "the short channel id of the start of the path (alternative to first_node_id)"
                        ]
                      },
                      "first_scid_dir": {
                        "added": "v24.08",
                        "type": "u32",
                        "description": [
                          "which end of the first_scid is the start of the path"
                        ]
                      },
                      "blinding": {
                        "added": "v24.08",
                        "type": "pubkey",
                        "description": [
                          "Blinding factor for this path."
                        ]
                      },
                      "path": {
                        "type": "array",
                        "added": "v24.08",
                        "description": [
                          "An individual path."
                        ],
                        "items": {
                          "type": "object",
                          "required": [
                            "blinded_node_id",
                            "encrypted_recipient_data"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "blinded_node_id": {
                              "added": "v24.08",
                              "type": "pubkey",
                              "description": [
                                "Node_id of the hop."
                              ]
                            },
                            "encrypted_recipient_data": {
                              "added": "v24.08",
                              "type": "hex",
                              "description": [
                                "Encrypted TLV entry for this hop."
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "invreq_recurrence_counter": {
                  "type": "u32",
                  "description": [
                    "Which number request this is for the same invoice."
                  ]
                },
                "invreq_recurrence_start": {
                  "type": "u32",
                  "description": [
                    "When we're requesting to start an invoice at a non-zero period."
                  ]
                },
                "invoice_paths": {
                  "type": "array",
                  "description": [
                    "Paths to pay the destination."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "blinding",
                      "payinfo",
                      "path"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "first_node_id": {
                        "type": "pubkey",
                        "description": [
                          "The (presumably well-known) public key of the start of the path."
                        ]
                      },
                      "first_scid": {
                        "added": "v23.05",
                        "type": "short_channel_id",
                        "description": [
                          "the short channel id of the start of the path (alternative to first_node_id)"
                        ]
                      },
                      "first_scid_dir": {
                        "added": "v23.05",
                        "type": "u32",
                        "description": [
                          "which end of the first_scid is the start of the path"
                        ]
                      },
                      "blinding": {
                        "type": "pubkey",
                        "description": [
                          "Blinding factor for this path."
                        ]
                      },
                      "payinfo": {
                        "type": "object",
                        "required": [
                          "fee_base_msat",
                          "fee_proportional_millionths",
                          "cltv_expiry_delta",
                          "features"
                        ],
                        "additionalProperties": false,
                        "properties": {
                          "fee_base_msat": {
                            "type": "msat",
                            "description": [
                              "Basefee for path."
                            ]
                          },
                          "fee_proportional_millionths": {
                            "type": "u32",
                            "description": [
                              "Proportional fee for path."
                            ]
                          },
                          "cltv_expiry_delta": {
                            "type": "u32",
                            "description": [
                              "CLTV delta for path."
                            ]
                          },
                          "features": {
                            "type": "hex",
                            "description": [
                              "Features allowed for path."
                            ]
                          }
                        }
                      },
                      "path": {
                        "type": "array",
                        "description": [
                          "An individual path."
                        ],
                        "items": {
                          "type": "object",
                          "required": [
                            "blinded_node_id",
                            "encrypted_recipient_data"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "blinded_node_id": {
                              "type": "pubkey",
                              "description": [
                                "Node_id of the hop."
                              ]
                            },
                            "encrypted_recipient_data": {
                              "type": "hex",
                              "description": [
                                "Encrypted TLV entry for this hop."
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "invoice_created_at": {
                  "type": "u64",
                  "description": [
                    "The UNIX timestamp of invoice creation."
                  ]
                },
                "invoice_relative_expiry": {
                  "type": "u32",
                  "description": [
                    "The number of seconds after *invoice_created_at* when this expires."
                  ]
                },
                "invoice_payment_hash": {
                  "type": "hex",
                  "description": [
                    "The hash of the *payment_preimage*."
                  ],
                  "maxLength": 64,
                  "minLength": 64
                },
                "invoice_amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount required to fulfill invoice."
                  ]
                },
                "invoice_fallbacks": {
                  "type": "array",
                  "description": [
                    "Onchain addresses."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "hex"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "version": {
                        "type": "u8",
                        "description": [
                          "Segwit address version."
                        ]
                      },
                      "hex": {
                        "type": "hex",
                        "description": [
                          "Raw encoded segwit address."
                        ]
                      },
                      "address": {
                        "type": "string",
                        "description": [
                          "Bech32 segwit address."
                        ]
                      }
                    }
                  }
                },
                "invoice_features": {
                  "type": "hex",
                  "description": [
                    "The feature bits of the invoice."
                  ]
                },
                "invoice_node_id": {
                  "type": "pubkey",
                  "description": [
                    "The id to pay (usually the same as offer_issuer_id)."
                  ]
                },
                "invoice_recurrence_basetime": {
                  "type": "u64",
                  "description": [
                    "The UNIX timestamp to base the invoice periods on."
                  ]
                },
                "signature": {
                  "type": "bip340sig",
                  "description": [
                    "BIP-340 signature of the `offer_issuer_id` on this invoice."
                  ]
                },
                "unknown_invoice_tlvs": {
                  "type": "array",
                  "description": [
                    "Any extra fields we didn't know how to parse."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "length",
                      "value"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "u64",
                        "description": [
                          "The type."
                        ]
                      },
                      "length": {
                        "type": "u64",
                        "description": [
                          "The length."
                        ]
                      },
                      "value": {
                        "type": "hex",
                        "description": [
                          "The value."
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "bolt12 invoice"
                  ]
                },
                "valid": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                }
              }
            },
            "then": {
              "required": [],
              "additionalProperties": false,
              "properties": {
                "type": {},
                "valid": {},
                "offer_id": {},
                "offer_chains": {},
                "offer_metadata": {},
                "offer_currency": {},
                "warning_unknown_offer_currency": {},
                "currency_minor_unit": {},
                "offer_amount": {},
                "offer_amount_msat": {},
                "offer_description": {},
                "offer_issuer": {},
                "offer_features": {},
                "offer_absolute_expiry": {},
                "offer_quantity_max": {},
                "offer_paths": {},
                "offer_node_id": {},
                "offer_issuer_id": {},
                "offer_recurrence": {},
                "invreq_metadata": {},
                "invreq_payer_id": {},
                "invreq_chain": {},
                "invreq_amount_msat": {},
                "invreq_features": {},
                "invreq_quantity": {},
                "invreq_payer_note": {},
                "invreq_paths": {},
                "invreq_node_id": {},
                "invreq_recurrence_counter": {},
                "invreq_recurrence_start": {},
                "warning_invalid_offer_description": {
                  "type": "string",
                  "description": [
                    "`offer_description` is not valid UTF8."
                  ]
                },
                "warning_missing_offer_description": {
                  "type": "string",
                  "description": [
                    "`offer_description` is not present."
                  ]
                },
                "warning_invalid_offer_currency": {
                  "type": "string",
                  "description": [
                    "`offer_currency_code` is not valid UTF8."
                  ]
                },
                "warning_invalid_offer_issuer": {
                  "type": "string",
                  "description": [
                    "`offer_issuer` is not valid UTF8."
                  ]
                },
                "warning_missing_invreq_metadata": {
                  "type": "string",
                  "description": [
                    "`invreq_metadata` is not present."
                  ]
                },
                "warning_invalid_invreq_payer_note": {
                  "type": "string",
                  "description": [
                    "`invreq_payer_note` is not valid UTF8."
                  ]
                },
                "warning_missing_invoice_paths": {
                  "type": "string",
                  "description": [
                    "`invoice_paths` is not present."
                  ]
                },
                "warning_missing_invoice_blindedpay": {
                  "type": "string",
                  "description": [
                    "`invoice_blindedpay` is not present."
                  ]
                },
                "warning_missing_invoice_created_at": {
                  "type": "string",
                  "description": [
                    "`invoice_created_at` is not present."
                  ]
                },
                "warning_missing_invoice_payment_hash": {
                  "type": "string",
                  "description": [
                    "`invoice_payment_hash` is not present."
                  ]
                },
                "warning_missing_invoice_amount": {
                  "type": "string",
                  "description": [
                    "`invoice_amount` is not present."
                  ]
                },
                "warning_missing_invoice_recurrence_basetime": {
                  "type": "string",
                  "description": [
                    "`invoice_recurrence_basetime` is not present."
                  ]
                },
                "warning_missing_invoice_node_id": {
                  "type": "string",
                  "description": [
                    "`invoice_node_id` is not present."
                  ]
                },
                "warning_missing_invoice_signature": {
                  "type": "string",
                  "description": [
                    "`signature` is not present."
                  ]
                },
                "warning_invalid_invoice_signature": {
                  "type": "string",
                  "description": [
                    "Incorrect `signature`."
                  ]
                },
                "fallbacks": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "version",
                      "hex"
                    ],
                    "properties": {
                      "version": {},
                      "hex": {},
                      "address": {},
                      "warning_invoice_fallbacks_version_invalid": {
                        "type": "string",
                        "description": [
                          "`version` is > 16."
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "bolt11 invoice"
                  ]
                },
                "valid": {
                  "type": "boolean",
                  "enum": [
                    true
                  ]
                }
              }
            },
            "then": {
              "required": [
                "currency",
                "created_at",
                "expiry",
                "payee",
                "min_final_cltv_expiry",
                "payment_hash",
                "signature"
              ],
              "additionalProperties": false,
              "properties": {
                "type": {},
                "valid": {},
                "currency": {
                  "type": "string",
                  "description": [
                    "The BIP173 name for the currency."
                  ]
                },
                "created_at": {
                  "type": "u64",
                  "description": [
                    "The UNIX-style timestamp of the invoice."
                  ]
                },
                "expiry": {
                  "type": "u64",
                  "description": [
                    "The number of seconds this is valid after `created_at`."
                  ]
                },
                "payee": {
                  "type": "pubkey",
                  "description": [
                    "The public key of the recipient."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "Amount the invoice asked for."
                  ]
                },
                "payment_hash": {
                  "type": "hash",
                  "description": [
                    "The hash of the *payment_preimage*."
                  ]
                },
                "signature": {
                  "type": "signature",
                  "description": [
                    "Signature of the *payee* on this invoice."
                  ]
                },
                "description": {
                  "type": "string",
                  "description": [
                    "The description of the purpose of the purchase."
                  ]
                },
                "description_hash": {
                  "type": "hash",
                  "description": [
                    "The hash of the description, in place of *description*."
                  ]
                },
                "min_final_cltv_expiry": {
                  "type": "u32",
                  "description": [
                    "The minimum CLTV delay for the final node."
                  ]
                },
                "payment_secret": {
                  "type": "secret",
                  "description": [
                    "The secret to hand to the payee node."
                  ]
                },
                "features": {
                  "type": "hex",
                  "description": [
                    "The features bitmap for this invoice."
                  ]
                },
                "payment_metadata": {
                  "type": "hex",
                  "description": [
                    "The payment_metadata to put in the payment."
                  ]
                },
                "fallbacks": {
                  "type": "array",
                  "description": [
                    "Onchain addresses."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "hex"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": [
                          "The address type (if known)."
                        ],
                        "enum": [
                          "P2PKH",
                          "P2SH",
                          "P2WPKH",
                          "P2WSH",
                          "P2TR"
                        ]
                      },
                      "addr": {
                        "type": "string",
                        "description": [
                          "The address in appropriate format for *type*."
                        ]
                      },
                      "hex": {
                        "type": "hex",
                        "description": [
                          "Raw encoded address."
                        ]
                      }
                    }
                  }
                },
                "routes": {
                  "type": "array",
                  "description": [
                    "Route hints to the *payee*."
                  ],
                  "items": {
                    "type": "array",
                    "description": [
                      "Hops in the route."
                    ],
                    "items": {
                      "type": "object",
                      "required": [
                        "pubkey",
                        "short_channel_id",
                        "fee_base_msat",
                        "fee_proportional_millionths",
                        "cltv_expiry_delta"
                      ],
                      "additionalProperties": false,
                      "properties": {
                        "pubkey": {
                          "type": "pubkey",
                          "description": [
                            "The public key of the node."
                          ]
                        },
                        "short_channel_id": {
                          "type": "short_channel_id",
                          "description": [
                            "A channel to the next peer."
                          ]
                        },
                        "fee_base_msat": {
                          "type": "msat",
                          "description": [
                            "The base fee for payments."
                          ]
                        },
                        "fee_proportional_millionths": {
                          "type": "u32",
                          "description": [
                            "The parts-per-million fee for payments."
                          ]
                        },
                        "cltv_expiry_delta": {
                          "type": "u32",
                          "description": [
                            "The CLTV delta across this hop."
                          ]
                        }
                      }
                    }
                  }
                },
                "extra": {
                  "type": "array",
                  "description": [
                    "Any extra fields we didn't know how to parse."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "tag",
                      "data"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "tag": {
                        "type": "string",
                        "description": [
                          "The bech32 letter which identifies this field."
                        ],
                        "maxLength": 1,
                        "minLength": 1
                      },
                      "data": {
                        "type": "string",
                        "description": [
                          "The bech32 data for this field."
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "rune"
                  ]
                },
                "valid": {
                  "type": "boolean",
                  "enum": [
                    true
                  ]
                }
              }
            },
            "then": {
              "required": [
                "string",
                "restrictions",
                "valid"
              ],
              "additionalProperties": false,
              "properties": {
                "unique_id": {
                  "type": "string",
                  "description": [
                    "Unique id (always a numeric id on runes we create)."
                  ]
                },
                "version": {
                  "type": "string",
                  "description": [
                    "Rune version, not currently set on runes we create."
                  ]
                },
                "valid": {
                  "type": "boolean",
                  "enum": [
                    true
                  ]
                },
                "type": {},
                "string": {
                  "type": "string",
                  "description": [
                    "The string encoding of the rune."
                  ]
                },
                "restrictions": {
                  "type": "array",
                  "description": [
                    "Restrictions built into the rune: all must pass."
                  ],
                  "items": {
                    "type": "object",
                    "required": [
                      "alternatives",
                      "summary"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "alternatives": {
                        "type": "array",
                        "description": [
                          "Each way restriction can be met: any can pass."
                        ],
                        "items": {
                          "type": "string",
                          "description": [
                            "The alternative of form fieldname condition fieldname."
                          ]
                        }
                      },
                      "summary": {
                        "type": "string",
                        "description": [
                          "Human-readable summary of this restriction."
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "rune"
                  ]
                },
                "valid": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                }
              }
            },
            "then": {
              "required": [
                "valid"
              ],
              "additionalProperties": false,
              "properties": {
                "valid": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "type": {},
                "warning_rune_invalid_utf8": {
                  "type": "string",
                  "description": [
                    "The rune contains invalid UTF-8 strings."
                  ]
                },
                "hex": {
                  "type": "hex",
                  "description": [
                    "The raw rune in hex."
                  ]
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "emergency recover"
                  ]
                },
                "valid": {
                  "type": "boolean",
                  "enum": [
                    true
                  ]
                }
              }
            },
            "then": {
              "required": [
                "decrypted"
              ],
              "additionalProperties": false,
              "properties": {
                "type": {},
                "valid": {},
                "decrypted": {
                  "type": "hex",
                  "description": [
                    "The decrypted value of the provided bech32 of emergency.recover."
                  ],
                  "added": "v23.11"
                }
              }
            }
          }
        ]
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-pay(7)",
        "lightning-offer(7)",
        "lightning-fetchinvoice(7)",
        "lightning-sendinvoice(7)",
        "lightning-commando-rune(7)"
      ],
      "resources": [
        "[BOLT #11](https://github.com/lightning/bolts/blob/master/11-payment-encoding.md)",
        "",
        "[BOLT #12](https://github.com/rustyrussell/lightning-rfc/blob/guilt/offers/12-offer-encoding.md)",
        "(experimental, [bolt](https://github.com/lightning/bolts) #798)",
        "",
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:decode#1",
            "method": "decode",
            "params": [
              "zFMd1fjhrAYxUeFA54TjloZqOt8JrA_i_nYwIgXkag49MA=="
            ]
          },
          "response": {
            "type": "rune",
            "unique_id": "0",
            "string": "cc531dd5f8e1ac063151e140e784e396866a3adf09ac0fe2fe76302205e46a0e:=0",
            "restrictions": [],
            "valid": true
          }
        },
        {
          "request": {
            "id": "example:decode#2",
            "method": "decode",
            "params": [
              "lnbcrt2u1pn2s3xxsp5cpcdj2cy5wpd2nphp2evrp9kqymxf9434zftkmdd6dlgmy8cu78qpp58yq5qf3h0694xwymzjs5e8eejce83vjmxv6cpwqv8cs9e05dxe4qdqcdserygryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgq9wlpxf8ur0q798646w94tduf6wfkaw7m0ecmxepgatd4utvsyvcy0pku9t8m39rlsjzhe8x53mup5jkn0f84clfj3ctc6qj09t35wxspycpup2"
            ]
          },
          "response": {
            "type": "bolt11 invoice",
            "currency": "bcrt",
            "created_at": 1722303686,
            "expiry": 604800,
            "payee": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
            "amount_msat": 200000,
            "description": "l22 description",
            "min_final_cltv_expiry": 5,
            "payment_secret": "c070d92b04a382d54c370ab2c184b601366496b1a892bb6dadd37e8d90f8e78e",
            "features": "02024100",
            "routes": [
              [
                {
                  "pubkey": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                  "short_channel_id": "111x1x0",
                  "fee_base_msat": 1,
                  "fee_proportional_millionths": 10,
                  "cltv_expiry_delta": 6
                }
              ]
            ],
            "payment_hash": "39014026377e8b53389b14a14c9f39963278b25b333580b80c3e205cbe8d366a",
            "signature": "304402202bbe1324fc1bc1e29f55d38b55b789d3936ebbdb7e71b36428eadb5e2d90233002204786dc2acfb8947f84857c9cd48ef81a4ad37a4f5c7d328e178d024f2ae3471a",
            "valid": true
          }
        }
      ]
    },
    "lightning-decodepay.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.05",
      "rpc": "decodepay",
      "title": "Command for decoding a bolt11 string (low-level)",
      "description": [
        "The **decodepay** RPC command checks and parses a *bolt11* string as specified by the BOLT 11 specification."
      ],
      "request": {
        "required": [
          "bolt11"
        ],
        "properties": {
          "bolt11": {
            "type": "string",
            "description": [
              "Bolt11 invoice to decode."
            ]
          },
          "description": {
            "type": "string",
            "description": [
              "Description of the invoice to decode."
            ]
          }
        }
      },
      "response": {
        "required": [
          "currency",
          "created_at",
          "expiry",
          "payee",
          "min_final_cltv_expiry",
          "payment_hash",
          "signature"
        ],
        "properties": {
          "currency": {
            "type": "string",
            "description": [
              "The BIP173 name for the currency."
            ]
          },
          "created_at": {
            "type": "u64",
            "description": [
              "The UNIX-style timestamp of the invoice."
            ]
          },
          "expiry": {
            "type": "u64",
            "description": [
              "The number of seconds this is valid after *timestamp*."
            ]
          },
          "payee": {
            "type": "pubkey",
            "description": [
              "The public key of the recipient."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "Amount the invoice asked for."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage*."
            ]
          },
          "signature": {
            "type": "signature",
            "description": [
              "Signature of the *payee* on this invoice."
            ]
          },
          "description": {
            "type": "string",
            "description": [
              "The description of the purpose of the purchase."
            ]
          },
          "description_hash": {
            "type": "hash",
            "description": [
              "The hash of the description, in place of *description*."
            ]
          },
          "min_final_cltv_expiry": {
            "type": "u32",
            "description": [
              "The minimum CLTV delay for the final node."
            ]
          },
          "payment_secret": {
            "type": "hash",
            "description": [
              "The secret to hand to the payee node."
            ]
          },
          "features": {
            "type": "hex",
            "description": [
              "The features bitmap for this invoice."
            ]
          },
          "payment_metadata": {
            "type": "hex",
            "description": [
              "The payment_metadata to put in the payment."
            ]
          },
          "fallbacks": {
            "type": "array",
            "description": [
              "Onchain addresses."
            ],
            "items": {
              "type": "object",
              "required": [
                "type",
                "hex"
              ],
              "additionalProperties": false,
              "properties": {
                "type": {
                  "type": "string",
                  "description": [
                    "The address type (if known)."
                  ],
                  "enum": [
                    "P2PKH",
                    "P2SH",
                    "P2WPKH",
                    "P2WSH",
                    "P2TR"
                  ]
                },
                "addr": {
                  "type": "string",
                  "description": [
                    "The address in appropriate format for *type*."
                  ]
                },
                "hex": {
                  "type": "hex",
                  "description": [
                    "Raw encoded address."
                  ]
                }
              }
            }
          },
          "routes": {
            "type": "array",
            "description": [
              "Route hints to the *payee*."
            ],
            "items": {
              "type": "array",
              "description": [
                "Hops in the route."
              ],
              "items": {
                "type": "object",
                "required": [
                  "pubkey",
                  "short_channel_id",
                  "fee_base_msat",
                  "fee_proportional_millionths",
                  "cltv_expiry_delta"
                ],
                "additionalProperties": false,
                "properties": {
                  "pubkey": {
                    "type": "pubkey",
                    "description": [
                      "The public key of the node."
                    ]
                  },
                  "short_channel_id": {
                    "type": "short_channel_id",
                    "description": [
                      "A channel to the next peer."
                    ]
                  },
                  "fee_base_msat": {
                    "type": "msat",
                    "description": [
                      "The base fee for payments."
                    ]
                  },
                  "fee_proportional_millionths": {
                    "type": "u32",
                    "description": [
                      "The parts-per-million fee for payments."
                    ]
                  },
                  "cltv_expiry_delta": {
                    "type": "u32",
                    "description": [
                      "The CLTV delta across this hop."
                    ]
                  }
                }
              }
            }
          },
          "extra": {
            "type": "array",
            "description": [
              "Any extra fields we didn't know how to parse."
            ],
            "items": {
              "type": "object",
              "required": [
                "tag",
                "data"
              ],
              "additionalProperties": false,
              "properties": {
                "tag": {
                  "type": "string",
                  "description": [
                    "The bech32 letter which identifies this field."
                  ],
                  "maxLength": 1,
                  "minLength": 1
                },
                "data": {
                  "type": "string",
                  "description": [
                    "The bech32 data for this field."
                  ]
                }
              }
            }
          }
        },
        "post_return_value_notes": [
          "Technically, the *description* field is optional if a *description_hash* field is given, but in this case **decodepay** will only succeed if the optional *description* field is passed and matches the *description_hash*. In practice, these are currently unused."
        ]
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-pay(7)",
        "lightning-getroute(7)",
        "lightning-sendpay(7)"
      ],
      "resources": [
        "[BOLT #11](https://github.com/lightning/bolts/blob/master/11-payment-encoding.md)",
        "",
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:decodepay#1",
            "method": "decodepay",
            "params": {
              "bolt11": "lnbcrt100n1pn2s3xxsp5s4wvy67lduz0tpxzmw0x0m8z5krfn6ppeu3a9t559tcdxquqwjfqpp5r0zx30ded4lpxp7vrdxqenmwr9rqftn93dcymvmuaxpu8y5zxunqdqcdscnzgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqd5qqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqyk0lnqhsl07405jsqzyyaheu3dhxdv6s498ex97yvacs04gf6carplepnh5drlse8spy8nluz4uwj78h47ez6hak9md2s8mtg6yy5tcqt8yfsj"
            }
          },
          "response": {
            "currency": "bcrt",
            "created_at": 1722303686,
            "expiry": 604800,
            "payee": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
            "amount_msat": 10000,
            "description": "l11 description",
            "min_final_cltv_expiry": 5,
            "payment_secret": "855cc26bdf6f04f584c2db9e67ece2a58699e821cf23d2ae942af0d303807492",
            "features": "02024100",
            "routes": [
              [
                {
                  "pubkey": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                  "short_channel_id": "109x1x1",
                  "fee_base_msat": 1,
                  "fee_proportional_millionths": 10,
                  "cltv_expiry_delta": 6
                }
              ]
            ],
            "payment_hash": "1bc468bdb96d7e1307cc1b4c0ccf6e194604ae658b704db37ce983c392823726",
            "signature": "30440220259ff982f0fbfd57d25000884edf3c8b6e66b350a94f9317c4677107d509d63a022030ff219de8d1fe193c0243cffc1578e978f7afb22d5fb62edaa81f6b46884a2f"
          }
        }
      ]
    },
    "lightning-deldatastore.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "deldatastore",
      "title": "Command for removing (plugin) data",
      "description": [
        "The **deldatastore** RPC command allows plugins to delete data it has stored in the Core Lightning database.",
        "",
        "The command fails if the *key* isn't present, or if *generation* is specified and the generation of the data does not exactly match."
      ],
      "request": {
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "oneOf": [
              {
                "type": "array",
                "description": [
                  "Key is an array of values (though a single value is treated as a one-element array), to form a heirarchy. Using the first element of the key as the plugin name (e.g. [ 'summary' ]) is recommended. A key can either have children or a value, never both: parents are created and removed automatically."
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "generation": {
            "type": "u64",
            "description": [
              "If specified, means that the update will fail if the previously-existing data is not exactly that generation. This allows for simple atomicity. This is only legal with mode `must-replace` or `must-append`."
            ]
          }
        }
      },
      "response": {
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "array",
            "items": {
              "type": "string",
              "description": [
                "Part of the key added to the datastore."
              ]
            }
          },
          "generation": {
            "type": "u64",
            "description": [
              "The number of times this has been updated."
            ]
          },
          "hex": {
            "type": "hex",
            "description": [
              "The hex data which has removed from the datastore."
            ]
          },
          "string": {
            "type": "string",
            "description": [
              "The data as a string, if it's valid utf-8."
            ]
          }
        }
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- 1200: the key does not exist",
        "- 1201: the key does exist, but the generation is wrong",
        "- -32602: invalid parameters"
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listdatastore(7)",
        "lightning-datastore(7)",
        "lightning-datastoreusage(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:deldatastore#1",
            "method": "deldatastore",
            "params": {
              "key": [
                "test",
                "name"
              ]
            }
          },
          "response": {
            "key": [
              "test",
              "name"
            ],
            "generation": 0,
            "hex": "736176696e67206461746120746f207468652073746f7265",
            "string": "saving data to the store"
          }
        },
        {
          "request": {
            "id": "example:deldatastore#2",
            "method": "deldatastore",
            "params": {
              "key": "otherkey",
              "generation": 1
            }
          },
          "response": {
            "key": [
              "otherkey"
            ],
            "generation": 1,
            "hex": "666f6f626172",
            "string": "foobar"
          }
        }
      ]
    },
    "lightning-delforward.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "delforward",
      "title": "Command for removing a forwarding entry",
      "description": [
        "The **delforward** RPC command removes a single forward from **listforwards**, using the uniquely-identifying *in_channel* and *in_htlc_id* (and, as a sanity check, the *status*) given by that command.",
        "",
        "This command is mainly used by the *autoclean* plugin (see lightningd- config(7)), As these database entries are only kept for your own analysis, removing them has no effect on the running of your node."
      ],
      "request": {
        "required": [
          "in_channel",
          "in_htlc_id",
          "status"
        ],
        "properties": {
          "in_channel": {
            "type": "short_channel_id",
            "description": [
              "Only the matching forwards on the given inbound channel are deleted. Note: for **listforwards** entries without an *in_htlc_id* entry (no longer created in v22.11, but can exist from older versions), a value of 18446744073709551615 can be used, but then it will delete *all* entries without *in_htlc_id* for this *in_channel* and *status*."
            ]
          },
          "in_htlc_id": {
            "type": "u64",
            "description": [
              "The unique HTLC id the sender gave this (not present if incoming channel was closed before upgrade to v22.11)."
            ]
          },
          "status": {
            "type": "string",
            "description": [
              "The status of the forward to delete. You cannot delete forwards which have status *offered* (i.e. are currently active)."
            ],
            "enum": [
              "settled",
              "local_failed",
              "failed"
            ]
          }
        }
      },
      "response": {
        "required": [],
        "properties": {}
      },
      "errors": [
        "The following errors may be reported:",
        "",
        "- 1401: The forward specified does not exist."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-autoclean(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:delforward#1",
            "method": "delforward",
            "params": {
              "in_channel": "109x1x1",
              "in_htlc_id": 4,
              "status": "local_failed"
            }
          },
          "response": {}
        },
        {
          "request": {
            "id": "example:delforward#2",
            "method": "delforward",
            "params": [
              "109x1x1",
              19,
              "failed"
            ]
          },
          "response": {}
        }
      ]
    },
    "lightning-delinvoice.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "delinvoice",
      "title": "Command for removing an invoice (or just its description)",
      "description": [
        "The **delinvoice** RPC command removes an invoice with *status* as given in **listinvoices**, or with *desconly* set, removes its description."
      ],
      "request": {
        "required": [
          "label",
          "status"
        ],
        "properties": {
          "label": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "u64"
              }
            ],
            "description": [
              "Label of the invoice to be deleted."
            ]
          },
          "status": {
            "type": "string",
            "description": [
              "Label of the invoice to be deleted. The caller should be particularly aware of the error case caused by the *status* changing just before this command is invoked!"
            ],
            "enum": [
              "paid",
              "expired",
              "unpaid"
            ]
          },
          "desconly": {
            "type": "boolean",
            "description": [
              "If set to True, the invoice is not deleted, but has its description removed (this can save space with very large descriptions, as would be used with lightning-invoice(7) *deschashonly*."
            ]
          }
        }
      },
      "response": {
        "required": [
          "label",
          "payment_hash",
          "status",
          "created_index",
          "expires_at"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": [
              "Unique label given at creation time."
            ]
          },
          "bolt11": {
            "type": "string",
            "description": [
              "BOLT11 string."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "BOLT12 string."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "The amount required to pay this invoice."
            ]
          },
          "description": {
            "type": "string",
            "description": [
              "Description used in the invoice."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "created_index": {
            "type": "u64",
            "added": "v23.08",
            "description": [
              "1-based index indicating order this invoice was created in."
            ]
          },
          "updated_index": {
            "type": "u64",
            "added": "v23.08",
            "description": [
              "1-based index indicating order this invoice was changed (only present if it has changed since creation)."
            ]
          },
          "status": {
            "type": "string",
            "description": [
              "State of invoice."
            ],
            "enum": [
              "paid",
              "expired",
              "unpaid"
            ]
          },
          "expires_at": {
            "type": "u64",
            "description": [
              "UNIX timestamp when invoice expires (or expired)."
            ]
          }
        },
        "allOf": [
          {
            "if": {
              "required": [
                "bolt12"
              ]
            },
            "then": {
              "required": [],
              "additionalProperties": false,
              "properties": {
                "label": {},
                "bolt12": {},
                "status": {},
                "expires_at": {},
                "msatoshi": {},
                "amount_msat": {},
                "description": {},
                "payment_hash": {},
                "pay_index": {},
                "created_index": {},
                "updated_index": {},
                "amount_received_msat": {},
                "paid_at": {},
                "payment_preimage": {},
                "local_offer_id": {
                  "type": "hex",
                  "description": [
                    "Offer for which this invoice was created."
                  ]
                },
                "invreq_payer_note": {
                  "type": "string",
                  "description": [
                    "The optional *invreq_payer_note* from invoice_request which created this invoice."
                  ]
                }
              }
            },
            "else": {
              "required": [
                "bolt11"
              ],
              "additionalProperties": false,
              "properties": {
                "label": {},
                "bolt11": {},
                "status": {},
                "expires_at": {},
                "msatoshi": {},
                "amount_msat": {},
                "description": {},
                "payment_hash": {},
                "pay_index": {},
                "created_index": {},
                "updated_index": {},
                "amount_received_msat": {},
                "msatoshi_received": {},
                "paid_at": {},
                "payment_preimage": {}
              }
            }
          },
          {
            "if": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "paid"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [
                "pay_index",
                "amount_received_msat",
                "paid_at",
                "payment_preimage"
              ],
              "properties": {
                "label": {},
                "bolt11": {},
                "bolt12": {},
                "status": {},
                "expires_at": {},
                "msatoshi": {},
                "amount_msat": {},
                "description": {},
                "payment_hash": {},
                "invreq_payer_note": {},
                "local_offer_id": {},
                "created_index": {},
                "updated_index": {},
                "pay_index": {
                  "type": "u64",
                  "description": [
                    "Unique index for this invoice payment."
                  ]
                },
                "amount_received_msat": {
                  "type": "msat",
                  "description": [
                    "How much was actually received."
                  ]
                },
                "paid_at": {
                  "type": "u64",
                  "description": [
                    "UNIX timestamp of when payment was received."
                  ]
                },
                "payment_preimage": {
                  "type": "secret",
                  "description": [
                    "SHA256 of this is the *payment_hash* offered in the invoice."
                  ]
                }
              }
            },
            "else": {
              "additionalProperties": false,
              "properties": {
                "label": {},
                "bolt11": {},
                "bolt12": {},
                "status": {},
                "msatoshi": {},
                "amount_msat": {},
                "description": {},
                "payment_hash": {},
                "expires_at": {},
                "created_index": {},
                "updated_index": {},
                "pay_index": {},
                "invreq_payer_note": {},
                "local_offer_id": {}
              }
            }
          }
        ],
        "pre_return_value_notes": [
          "Note: The return is the same as an object from lightning-listinvoices(7)."
        ]
      },
      "errors": [
        "The following errors may be reported:",
        "",
        "- -1: Database error.",
        "- 905: An invoice with that label does not exist.",
        "- 906: The invoice *status* does not match the parameter. An error object will be returned as error *data*, containing *current_status* and *expected_status* fields. This is most likely due to the *status* of the invoice changing just before this command is invoked.",
        "- 908: The invoice already has no description, and *desconly* was set."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listinvoices(7)",
        "lightning-waitinvoice(7)",
        "lightning-invoice(7)",
        "lightning-autoclean-status(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:delinvoice#1",
            "method": "delinvoice",
            "params": {
              "label": "lbl_l36",
              "status": "unpaid"
            }
          },
          "response": {
            "label": "lbl_l36",
            "bolt11": "lnbcrt500u1pn2s3fwsp5e6nltgzk3yqn5033r6z2q32pzduys3zs5dtzc5cjs60ppcgytrsqpp5ykhhcxzcqeng2gfggmsdja3x8h0qmkl35lw9z7n99pfkg8w0s8asdqcdsenvgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqwn7uwmy3x8u9c4ea0ka0yp3qvs0w9m7459g65kalm553vusctq8kseaph7tav4ryjfghnhu0ggjhhkrqmafarqkdsrzsk8stcvdmpmcqwfsajc",
            "payment_hash": "25af7c1858066685212846e0d976263dde0ddbf1a7dc517a652853641dcf81fb",
            "amount_msat": 50000000,
            "status": "unpaid",
            "description": "l36 description",
            "expires_at": 1722908590,
            "created_index": 9
          }
        },
        {
          "request": {
            "id": "example:delinvoice#2",
            "method": "delinvoice",
            "params": {
              "label": "lbl_l37",
              "status": "paid",
              "desconly": true
            }
          },
          "response": {
            "label": "lbl_l37",
            "bolt11": "lnbcrt500u1pn2s3fwsp5g96a3t3kn2we3ulrepd8eg4nw900wc324r06zlpr8py7p4zyftrspp5ggs9vzev5gcgthdysjrk0pcjgl3r5fwy4zgw6m48kk9nwx4h9slqdqcdsenwgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqwkmgxwugmtjvf9cu324h87x5ux3cwa6glefyfxvergy3mw8gwtnzg05mrf69yz0dafk4n7u7asaxh2nx5jsylwvqttzxmr9krpc9rlsquhqkt4",
            "payment_hash": "4220560b2ca23085dda4848767871247e23a25c4a890ed6ea7b58b371ab72c3e",
            "amount_msat": 50000000,
            "status": "paid",
            "pay_index": 9,
            "amount_received_msat": 50000000,
            "paid_at": 1722303802,
            "payment_preimage": "e876ca5ae4ed9897178b2b3a17997256ad669335eb9201e05e3c97ffb83c634b",
            "expires_at": 1722908590,
            "created_index": 10,
            "updated_index": 9
          }
        }
      ]
    },
    "lightning-delpay.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "delpay",
      "title": "Command for removing a completed or failed payment",
      "description": [
        "The **delpay** RPC command deletes a payment with the given `payment_hash` if its status is either `complete` or `failed`. If *partid* and *groupid* are not specified, all payment parts with matchin status are deleted."
      ],
      "request": {
        "required": [
          "payment_hash",
          "status"
        ],
        "properties": {
          "payment_hash": {
            "type": "hash",
            "description": [
              "The unique identifier of a payment."
            ]
          },
          "status": {
            "type": "string",
            "description": [
              "Expected status of the payment. Only deletes if the payment status matches. Deleting a `pending` payment will return an error."
            ],
            "enum": [
              "complete",
              "failed"
            ]
          },
          "partid": {
            "type": "u64",
            "description": [
              "Specific partid to delete (must be paired with *groupid*)."
            ]
          },
          "groupid": {
            "type": "u64",
            "description": [
              "Specific groupid to delete (must be paired with *partid*)."
            ]
          }
        },
        "pairedWith": [
          [
            "partid",
            "groupid"
          ]
        ]
      },
      "response": {
        "required": [
          "payments"
        ],
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "created_index",
                "id",
                "payment_hash",
                "status",
                "amount_sent_msat",
                "created_at"
              ],
              "properties": {
                "created_index": {
                  "added": "v23.11",
                  "type": "u64",
                  "description": [
                    "1-based index indicating order this payment was created in."
                  ]
                },
                "id": {
                  "type": "u64",
                  "description": [
                    "Old synonym for created_index."
                  ]
                },
                "payment_hash": {
                  "type": "hash",
                  "description": [
                    "The hash of the *payment_preimage* which will prove payment."
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "pending",
                    "failed",
                    "complete"
                  ],
                  "description": [
                    "Status of the payment."
                  ]
                },
                "amount_sent_msat": {
                  "type": "msat",
                  "description": [
                    "The amount we actually sent, including fees."
                  ]
                },
                "partid": {
                  "type": "u64",
                  "description": [
                    "Unique ID within this (multi-part) payment."
                  ]
                },
                "destination": {
                  "type": "pubkey",
                  "description": [
                    "The final destination of the payment if known."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount the destination received, if known."
                  ]
                },
                "created_at": {
                  "type": "u64",
                  "description": [
                    "The UNIX timestamp showing when this payment was initiated."
                  ]
                },
                "updated_index": {
                  "added": "v23.11",
                  "type": "u64",
                  "description": [
                    "1-based index indicating order this payment was changed (only present if it has changed since creation)."
                  ]
                },
                "completed_at": {
                  "type": "u64",
                  "description": [
                    "The UNIX timestamp showing when this payment was completed."
                  ]
                },
                "groupid": {
                  "type": "u64",
                  "description": [
                    "Grouping key to disambiguate multiple attempts to pay an invoice or the same payment_hash."
                  ]
                },
                "payment_preimage": {
                  "type": "secret",
                  "description": [
                    "Proof of payment."
                  ]
                },
                "label": {
                  "type": "string",
                  "description": [
                    "The label, if given to sendpay."
                  ]
                },
                "bolt11": {
                  "type": "string",
                  "description": [
                    "The bolt11 string (if pay supplied one)."
                  ]
                },
                "bolt12": {
                  "type": "string",
                  "description": [
                    "The bolt12 string (if supplied for pay: **experimental-offers** only)."
                  ]
                },
                "erroronion": {
                  "type": "hex",
                  "description": [
                    "The error onion returned on failure, if any."
                  ]
                }
              }
            }
          }
        },
        "pre_return_value_notes": [
          "The returned format is the same as lightning-listsendpays(7). If the payment is a multi-part payment (MPP) the command return a list of payments will be returned -- one payment object for each partid."
        ]
      },
      "errors": [
        "On failure, an error is returned. If the lightning process fails before responding, the",
        "caller should use lightning-listsentpays(7) or lightning-listpays(7) to query whether this payment was deleted or not.",
        "",
        "The following error codes may occur:",
        "",
        "- -32602: Parameter missed or malformed;",
        "- 211: Payment status mismatch. Check the correct status via **paystatus**;",
        "- 208: Payment with payment_hash not found."
      ],
      "author": [
        "Vincenzo Palazzo <<vincenzo.palazzo@protonmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listpays(7)",
        "lightning-listsendpays(7)",
        "lightning-paystatus(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:delpay#1",
            "method": "delpay",
            "params": {
              "payment_hash": "684b5650b3deb052c93efe1fe16e7703b56272468eecdeb3daac5b81216dcb52",
              "status": "complete"
            }
          },
          "response": {
            "payments": [
              {
                "created_index": 1,
                "id": 1,
                "payment_hash": "684b5650b3deb052c93efe1fe16e7703b56272468eecdeb3daac5b81216dcb52",
                "groupid": 1,
                "updated_index": 1,
                "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "amount_msat": 500000000,
                "amount_sent_msat": 500000000,
                "created_at": 1722303670,
                "completed_at": 1722303671,
                "status": "complete",
                "payment_preimage": "bed4140e1db302720d7f9547dc9127d45b115080447cce7e23cfd00b60991831",
                "bolt11": "lnbcrt5m1pn2s39ksp53sknyy2mxxurt4y0wqgp730z0cnm0vz3zmzth8p79xsrtmg5llxspp5dp94v59nm6c99jf7lc07zmnhqw6kyujx3mkdav7643dczgtdedfqdpcv3jhxcmjd9c8g6t0dcs8xetwvss8xmmdv5s8xct5wvsxcvfqw3hjqmpjxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqdz9cftkxe6kcqfddyrvr7j57ulsfxxxkgkjyhr3k77n8v59mzs5rmuexz9lxusyhhehlemd9ujclgahln8e0n8y86stc7u8uys6mjqgqerm6q4"
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:delpay#2",
            "method": "delpay",
            "params": [
              "25af7c1858066685212846e0d976263dde0ddbf1a7dc517a652853641dcf81fb",
              "failed"
            ]
          },
          "response": {
            "payments": [
              {
                "created_index": 20,
                "id": 20,
                "payment_hash": "25af7c1858066685212846e0d976263dde0ddbf1a7dc517a652853641dcf81fb",
                "groupid": 1,
                "updated_index": 19,
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "amount_msat": 50000000,
                "amount_sent_msat": 50000501,
                "created_at": 1722303803,
                "completed_at": 1722303806,
                "status": "failed",
                "bolt11": "lnbcrt500u1pn2s3fwsp5e6nltgzk3yqn5033r6z2q32pzduys3zs5dtzc5cjs60ppcgytrsqpp5ykhhcxzcqeng2gfggmsdja3x8h0qmkl35lw9z7n99pfkg8w0s8asdqcdsenvgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqwn7uwmy3x8u9c4ea0ka0yp3qvs0w9m7459g65kalm553vusctq8kseaph7tav4ryjfghnhu0ggjhhkrqmafarqkdsrzsk8stcvdmpmcqwfsajc"
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:delpay#3",
            "method": "delpay",
            "params": {
              "payment_hash": "647252f7e45fce7bb964523206874f40f58fbb7b208bc08967caa0e2404990c9",
              "status": "failed",
              "groupid": 1,
              "partid": 2
            }
          },
          "response": {
            "payments": [
              {
                "created_index": 17,
                "id": 17,
                "payment_hash": "647252f7e45fce7bb964523206874f40f58fbb7b208bc08967caa0e2404990c9",
                "groupid": 1,
                "updated_index": 16,
                "partid": 2,
                "destination": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "amount_msat": 1000000,
                "amount_sent_msat": 1000000,
                "created_at": 1722303798,
                "completed_at": 1722303799,
                "status": "failed"
              }
            ]
          }
        }
      ]
    },
    "lightning-deprecations.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v24.02",
      "rpc": "deprecations",
      "title": "Command to enable/disable deprecated APIs",
      "description": [
        "The **deprecations** RPC command is used to override global config option `allow-deprecated-apis` for further RPC commands on this same connection. This can be useful for developer testing to ensure you don't accidentally rely on deprecated features."
      ],
      "request": {
        "required": [
          "enable"
        ],
        "properties": {
          "enable": {
            "type": "boolean",
            "description": [
              "Flag to enable or disable deprecated APIs. Setting it to `false` will neither accept deprecated parameters or commands, nor output deprecated fields."
            ]
          }
        }
      },
      "response": {
        "properties": {}
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters."
      ],
      "author": [
        "Rusty Russell <<rusty@blockstream.com>> wrote the initial version of this man page."
      ],
      "see_also": [
        "lightningd-config(5)",
        "lightning-notifications(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:deprecations#1",
            "method": "deprecations",
            "params": {
              "enable": true
            }
          },
          "response": {}
        },
        {
          "request": {
            "id": "example:deprecations#2",
            "method": "deprecations",
            "params": {
              "enable": false
            }
          },
          "response": {}
        }
      ]
    },
    "lightning-dev-forget-channel.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "dev-forget-channel",
      "title": "Command to remove the DB entries from the database after a close",
      "warning": "For advanced users only",
      "description": [
        "Never use any `dev` command, including this one, unless you know exactly what you are doing; and have checked with a developer that your understanding is correct. They are meant only as a means of last resort and have the potential to mess things up. You have been warned\u2757\ufe0f",
        "",
        "The **dev-forget-channel** forgets the channel with given details. It will perform additional checks on whether it is safe to forget the channel, and only then remove the channel from the DB. Notice that this command is only available if CLN was started with --developer.",
        "",
        "Also see https://docs.corelightning.org/docs/faq#how-to-forget-about-a-channel"
      ],
      "request": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "The peer id of the channel to be forgotten. Checks if the channel is still active by checking its funding transaction."
            ]
          },
          "short_channel_id": {
            "type": "short_channel_id",
            "description": [
              "The short channel id of the channel you want to remove."
            ]
          },
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel id of the channel you want to remove."
            ]
          },
          "force": {
            "type": "boolean",
            "description": [
              "Ignores UTXO check for forced removal."
            ],
            "default": "False"
          }
        }
      },
      "response": {
        "required": [
          "forced",
          "funding_unspent",
          "funding_txid"
        ],
        "properties": {
          "forced": {
            "type": "boolean",
            "description": [
              "If the command was forced or not."
            ]
          },
          "funding_unspent": {
            "type": "boolean",
            "description": [
              "The funding is spent or not in the channel."
            ]
          },
          "funding_txid": {
            "type": "txid",
            "description": [
              "The id of the funding transaction."
            ]
          }
        }
      },
      "errors": [
        "The following errors may be reported:",
        "",
        "- -32602: If the given parameters are missing or wrong.",
        "- -1: Catch all nonspecific errors, eg. `Multiple channels: please specify short_channel_id.` OR `No channels matching that peer_id and that short_channel_id.`, etc."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-close(7)",
        "lightning-listchannels(7)",
        "lightning-listpeerchannels(7)",
        "lightning-listfunds(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "description": [
            "Forget a channel by peer pubkey when only one channel exists with the peer:"
          ],
          "request": {
            "id": "example:dev-forget-channel#1",
            "method": "dev-forget-channel",
            "params": {
              "id": "032cf15d1ad9c4a08d26eab1918f732d8ef8fdc6abb9640bf3db174372c491304e"
            }
          },
          "response": {
            "forced": false,
            "funding_unspent": false,
            "funding_txid": "c40c9d52aaac47f76c67163a2efc005df189b36b855b0ad209da7d0d066358b1"
          }
        },
        {
          "description": [
            "Forget a channel by short channel id when peer has multiple channels:"
          ],
          "request": {
            "id": "example:dev-forget-channel#2",
            "method": "dev-forget-channel",
            "params": {
              "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
              "short_channel_id": "111x1x0",
              "force": true
            }
          },
          "response": {
            "forced": true,
            "funding_unspent": false,
            "funding_txid": "cd23f0517eefc27194981253eb07b19b055246df77033e052c66eaf2bbb00483"
          }
        }
      ]
    },
    "lightning-disableinvoicerequest.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v22.11",
      "rpc": "disableinvoicerequest",
      "title": "Command for removing an invoice request",
      "warning": "experimental-offers only",
      "description": [
        "The **disableinvoicerequest** RPC command disables an invoice_request, so that no further invoices will be accepted (and thus, no further payments made)..",
        "",
        "We currently don't support deletion of invoice_requests, so they are not forgotten entirely (there may be payments which refer to this invoice_request)."
      ],
      "request": {
        "required": [
          "invreq_id"
        ],
        "properties": {
          "invreq_id": {
            "type": "string",
            "description": [
              "A specific invoice can be disabled by providing the `invreq_id`, which is presented by lightning-invoicerequest(7)."
            ]
          }
        }
      },
      "response": {
        "required": [
          "invreq_id",
          "single_use",
          "active",
          "bolt12",
          "used"
        ],
        "properties": {
          "invreq_id": {
            "type": "hash",
            "description": [
              "The SHA256 hash of all invoice_request fields less than 160."
            ]
          },
          "active": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": [
              "Whether the invoice_request is currently active."
            ]
          },
          "single_use": {
            "type": "boolean",
            "description": [
              "Whether the invoice_request will become inactive after we pay an invoice for it."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The bolt12 string starting with lnr."
            ]
          },
          "used": {
            "type": "boolean",
            "description": [
              "Whether the invoice_request has already been used."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "The label provided when creating the invoice_request."
            ]
          }
        },
        "pre_return_value_notes": [
          "Note: the returned object is the same format as **listinvoicerequests**."
        ]
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-invoicerequest(7)",
        "lightning-listinvoicerequests(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:disableinvoicerequest#1",
            "method": "disableinvoicerequest",
            "params": {
              "invreq_id": "a621a0e8e8ea9aa97fd47ab9b140e413be7f4ea45377617e693eb7afe5a3dbf9"
            }
          },
          "response": {
            "invreq_id": "a621a0e8e8ea9aa97fd47ab9b140e413be7f4ea45377617e693eb7afe5a3dbf9",
            "active": false,
            "single_use": true,
            "bolt12": "lnr1qqgx5t5hcw5ru9fgkhgxj4thjq4ugzsk2fjhzat9wd6xjmn8ypnx7u3qd9h8vmmfvdj3yyrrd35kw6r5de5kueeqwd6x7un92qsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzr6jqwvfdqzcyypz6g3kyz34nfrl7lm6c3rushzxey3a55ecjgs6qp2vz8q78j336k0sgpvamrunx5t6vdaeu7nmmlh5u6f0dnscasy2alyxq79f5wnc043gxrzyqt640dmuj7c94644j5ae6wfse7tsejwqnmc575ly9t38h4hf",
            "used": false
          }
        }
      ]
    },
    "lightning-disableoffer.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "disableoffer",
      "title": "Command for removing an offer",
      "warning": "experimental-offers only",
      "description": [
        "The **disableoffer** RPC command disables an offer, so that no further invoices will be given out.",
        "",
        "We currently don't support deletion of offers, so offers are not forgotten entirely (there may be invoices which refer to this offer)."
      ],
      "request": {
        "required": [
          "offer_id"
        ],
        "properties": {
          "offer_id": {
            "type": "hash",
            "description": [
              "The id we use to identify this offer."
            ]
          }
        }
      },
      "response": {
        "required": [
          "offer_id",
          "active",
          "single_use",
          "bolt12",
          "used"
        ],
        "properties": {
          "offer_id": {
            "type": "hash",
            "description": [
              "The merkle hash of the offer."
            ]
          },
          "active": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": [
              "Whether the offer can produce invoices/payments."
            ]
          },
          "single_use": {
            "type": "boolean",
            "description": [
              "Whether the offer is disabled after first successful use."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The bolt12 string representing this offer."
            ]
          },
          "used": {
            "type": "boolean",
            "description": [
              "Whether the offer has had an invoice paid / payment made."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "The label provided when offer was created."
            ]
          }
        },
        "pre_return_value_notes": [
          "Note: the returned object is the same format as **listoffers**."
        ]
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-enableoffer(7)",
        "lightning-offer(7)",
        "lightning-listoffers(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:disableoffer#1",
            "method": "disableoffer",
            "params": {
              "offer_id": "b791f88cebf775853112c30828e116487f4d6c252d669372532b468bc7de8a24"
            }
          },
          "response": {
            "offer_id": "b791f88cebf775853112c30828e116487f4d6c252d669372532b468bc7de8a24",
            "active": false,
            "single_use": false,
            "bolt12": "lno1qgsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzrcgqv0gfqq2zp8kven9wgs8gmeqg35hxctzd3j3vggz953rvg9rtxj8lalh43z8epwydjfrmffn3y3p5qz5cywpu09rr4vs",
            "used": false
          }
        }
      ]
    },
    "lightning-disconnect.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "disconnect",
      "title": "Command for disconnecting from another lightning node",
      "description": [
        "The disconnect RPC command closes an existing connection to a peer, identified by *id*, in the Lightning Network, as long as it doesn't have an active channel."
      ],
      "request": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "The public key of the peer to terminate the connection. It can be discovered as peer_id in the output of the listpeerchannels command."
            ]
          },
          "force": {
            "type": "boolean",
            "description": [
              "If set to True, it will disconnect even with an active channel."
            ]
          }
        }
      },
      "response": {
        "properties": {}
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- -1: Catchall nonspecific error."
      ],
      "author": [
        "Michael Hawkins <<michael.hawkins@protonmail.com>>."
      ],
      "see_also": [
        "lightning-connect(7)",
        "lightning-listpeerchannels(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:disconnect#1",
            "method": "disconnect",
            "params": {
              "id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
              "force": false
            }
          },
          "response": {}
        },
        {
          "request": {
            "id": "example:disconnect#2",
            "method": "disconnect",
            "params": {
              "id": "032cf15d1ad9c4a08d26eab1918f732d8ef8fdc6abb9640bf3db174372c491304e",
              "force": true
            }
          },
          "response": {}
        }
      ]
    },
    "lightning-emergencyrecover.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "emergencyrecover",
      "title": "Command for recovering channels from the emergency.recovery file in the lightning directory",
      "description": [
        "The **emergencyrecover** RPC command fetches data from the emergency.recover file and tries to reconnect to the peer and force him to close the channel. The data in this file has enough information to reconnect and sweep the funds.",
        "",
        "This recovery method is not spontaneous and it depends on the peer, so it should be used as a last resort to recover the funds stored in a channel in case of severe data loss."
      ],
      "request": {
        "required": [],
        "properties": {}
      },
      "response": {
        "required": [
          "stubs"
        ],
        "properties": {
          "stubs": {
            "type": "array",
            "items": {
              "type": "hash",
              "description": [
                "Channel IDs of channels successfully inserted."
              ]
            }
          }
        }
      },
      "author": [
        "Aditya <<aditya.sharma20111@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-getsharedsecret(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:emergencyrecover#1",
            "method": "emergencyrecover",
            "params": {}
          },
          "response": {
            "stubs": []
          }
        },
        {
          "request": {
            "id": "example:emergencyrecover#2",
            "method": "emergencyrecover",
            "params": {}
          },
          "response": {
            "stubs": [
              "e13472d6512413eb1bf03b9a0bb391d0e4152fd337fa6d1014e3de5e131918d9",
              "f8fc83a432cbfb2fffe222cc06727fdd977b5dd10ebd6707158e799e6f522d9f",
              "1267da6521b372d7c6407a74066f7a3a5bc3489bbda5eb9f0e990e1e913e2eb9"
            ]
          }
        }
      ]
    },
    "lightning-enableoffer.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "disableoffer",
      "title": "Command for re-enabling an offer",
      "warning": "experimental-offers only",
      "description": [
        "The **enableoffer** RPC command enables an offer, after it has been disabled."
      ],
      "request": {
        "required": [
          "offer_id"
        ],
        "properties": {
          "offer_id": {
            "type": "hash",
            "description": [
              "The id we use to identify this offer."
            ]
          }
        }
      },
      "response": {
        "required": [
          "offer_id",
          "active",
          "single_use",
          "bolt12",
          "used"
        ],
        "properties": {
          "offer_id": {
            "type": "hash",
            "description": [
              "The merkle hash of the offer."
            ]
          },
          "active": {
            "type": "boolean",
            "enum": [
              true
            ],
            "description": [
              "Whether the offer can produce invoices/payments."
            ]
          },
          "single_use": {
            "type": "boolean",
            "description": [
              "Whether the offer is disabled after first successful use."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The bolt12 string representing this offer."
            ]
          },
          "used": {
            "type": "boolean",
            "description": [
              "Whether the offer has had an invoice paid / payment made."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "The label provided when offer was created."
            ]
          }
        },
        "pre_return_value_notes": [
          "Note: the returned object is the same format as **listoffers**."
        ]
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters.",
        "- 1006: offer already enabled."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-offer(7)",
        "lightning-disableoffer(7)",
        "lightning-listoffers(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:enableoffer#1",
            "method": "enableoffer",
            "params": {
              "offer_id": "713a16ccd4eb10438bdcfbc2c8276be301020dd9d489c530773ba64f3b33307d"
            }
          },
          "response": {
            "offer_id": "053a5c566fbea2681a5ff9c05a913da23e45b95d09ef5bd25d7d408f23da7084",
            "active": true,
            "single_use": false,
            "bolt12": "lno1qgsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzrcgqvqcdgq2z9pk7enxv4jjqen0wgs8yatnw3ujz83qkc6rvp4j28rt3dtrn32zkvdy7efhnlrpr5rp5geqxs783wtlj550qs8czzku4nk3pqp6m593qxgunzuqcwkmgqkmp6ty0wyvjcqdguv3pnpukedwn6cr87m89t74h3auyaeg89xkvgzpac70z3m9rn5xzu28c",
            "used": false
          }
        }
      ]
    },
    "lightning-feerates.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "feerates",
      "title": "Command for querying recommended onchain feerates",
      "description": [
        "The **feerates** command returns the feerates that CLN will use. The feerates will be based on the recommended feerates from the backend. The backend may fail to provide estimates, but if it was able to provide estimates in the past, CLN will continue to use those for a while. CLN will also smoothen feerate estimations from the backend.",
        "",
        "Explorers often present fees in \"sat/vB\": 4 sat/vB is `4000perkb` or `1000perkw`.",
        "",
        "Bitcoin transactions have non-witness and witness bytes:",
        "",
        "* Non-witness bytes count as 4 weight, 1 virtual byte. All bytes other than SegWit witness count as non-witness bytes. * Witness bytes count as 1 weight, 0.25 virtual bytes.",
        "",
        "Thus, all *perkb* feerates will be exactly 4 times *perkw* feerates.",
        "",
        "To compute the fee for a transaction, multiply its weight or virtual bytes by the appropriate *perkw* or *perkw* feerate returned by this command, then divide by 1000.",
        "",
        "There is currently no way to change these feerates from the RPC. If you need custom control over onchain feerates, you will need to provide your own plugin that replaces the `bcli` plugin backend. For commands like lightning-withdraw(7) or lightning-fundchannel(7) you can provide a preferred feerate directly as a parameter, which will override the recommended feerates returned by **feerates**."
      ],
      "request": {
        "required": [
          "style"
        ],
        "properties": {
          "style": {
            "type": "string",
            "description": [
              "Fee rate style to use. This can be:",
              "    *perkw* - provide feerate in units of satoshis per 1000 weight (e.g. the minimum fee is usually `253perkw`).",
              "    *perkb* - provide feerate in units of satoshis per 1000 virtual bytes (eg. the minimum fee is usually `1000perkb`)."
            ],
            "enum": [
              "perkb",
              "perkw"
            ]
          }
        }
      },
      "response": {
        "required": [],
        "properties": {
          "warning_missing_feerates": {
            "type": "string",
            "description": [
              "Some fee estimates are missing."
            ]
          },
          "perkb": {
            "type": "object",
            "description": [
              "If *style* parameter was perkb."
            ],
            "additionalProperties": false,
            "required": [
              "min_acceptable",
              "max_acceptable",
              "floor",
              "estimates"
            ],
            "properties": {
              "min_acceptable": {
                "type": "u32",
                "description": [
                  "The smallest feerate that we allow peers to specify: half the 100-block estimate."
                ]
              },
              "max_acceptable": {
                "type": "u32",
                "description": [
                  "The largest feerate we will accept from remote negotiations. If a peer attempts to set the feerate higher than this we will unilaterally close the channel (or simply forget it if it's not open yet)."
                ]
              },
              "floor": {
                "type": "u32",
                "added": "v23.05",
                "description": [
                  "The smallest feerate that our backend tells us it will accept (i.e. minrelayfee or mempoolminfee)."
                ]
              },
              "estimates": {
                "type": "array",
                "added": "v23.05",
                "description": [
                  "Feerate estimates from plugin which we are using (usuallly bcli)."
                ],
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "blockcount",
                    "feerate",
                    "smoothed_feerate"
                  ],
                  "properties": {
                    "blockcount": {
                      "type": "u32",
                      "added": "v23.05",
                      "description": [
                        "The number of blocks the feerate is expected to get a transaction in."
                      ]
                    },
                    "feerate": {
                      "type": "u32",
                      "added": "v23.05",
                      "description": [
                        "The feerate for this estimate, in given *style*."
                      ]
                    },
                    "smoothed_feerate": {
                      "type": "u32",
                      "added": "v23.05",
                      "description": [
                        "The feerate, smoothed over time (useful for coordinating with other nodes)."
                      ]
                    }
                  }
                }
              },
              "opening": {
                "type": "u32",
                "description": [
                  "Default feerate for lightning-fundchannel(7) and lightning-withdraw(7)."
                ]
              },
              "mutual_close": {
                "type": "u32",
                "description": [
                  "Feerate to aim for in cooperative shutdown. Note that since mutual close is a **negotiation**, the actual feerate used in mutual close will be somewhere between this and the corresponding mutual close feerate of the peer."
                ]
              },
              "unilateral_close": {
                "type": "u32",
                "description": [
                  "Feerate for commitment_transaction in a live channel which we originally funded."
                ]
              },
              "unilateral_anchor_close": {
                "type": "u32",
                "added": "v23.08",
                "description": [
                  "Feerate for commitment_transaction in a live channel which we originally funded (if anchor_outputs was negotiated)."
                ]
              },
              "delayed_to_us": {
                "type": "u32",
                "deprecated": [
                  "v23.05",
                  "v24.05"
                ],
                "description": [
                  "Feerate for returning unilateral close funds to our wallet."
                ]
              },
              "htlc_resolution": {
                "type": "u32",
                "deprecated": [
                  "v23.05",
                  "v24.05"
                ],
                "description": [
                  "Feerate for returning unilateral close HTLC outputs to our wallet."
                ]
              },
              "penalty": {
                "type": "u32",
                "description": [
                  "Feerate to use when creating penalty tx for watchtowers."
                ]
              }
            }
          },
          "perkw": {
            "type": "object",
            "description": [
              "If *style* parameter was perkw."
            ],
            "additionalProperties": false,
            "required": [
              "min_acceptable",
              "max_acceptable",
              "floor",
              "estimates"
            ],
            "properties": {
              "min_acceptable": {
                "type": "u32",
                "description": [
                  "The smallest feerate that you can use, usually the minimum relayed feerate of the backend."
                ]
              },
              "max_acceptable": {
                "type": "u32",
                "description": [
                  "The largest feerate we will accept from remote negotiations. If a peer attempts to set the feerate higher than this we will unilaterally close the channel (or simply forget it if it's not open yet)."
                ]
              },
              "floor": {
                "type": "u32",
                "added": "v23.05",
                "description": [
                  "The smallest feerate that our backend tells us it will accept (i.e. minrelayfee or mempoolminfee)."
                ]
              },
              "estimates": {
                "type": "array",
                "added": "v23.05",
                "description": [
                  "Feerate estimates from plugin which we are using (usuallly bcli)."
                ],
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "blockcount",
                    "feerate",
                    "smoothed_feerate"
                  ],
                  "properties": {
                    "blockcount": {
                      "type": "u32",
                      "added": "v23.05",
                      "description": [
                        "The number of blocks the feerate is expected to get a transaction in."
                      ]
                    },
                    "feerate": {
                      "type": "u32",
                      "added": "v23.05",
                      "description": [
                        "The feerate for this estimate, in given *style*."
                      ]
                    },
                    "smoothed_feerate": {
                      "type": "u32",
                      "added": "v23.05",
                      "description": [
                        "The feerate, smoothed over time (useful for coordinating with other nodes)."
                      ]
                    }
                  }
                }
              },
              "opening": {
                "type": "u32",
                "description": [
                  "Default feerate for lightning-fundchannel(7) and lightning-withdraw(7)."
                ]
              },
              "mutual_close": {
                "type": "u32",
                "description": [
                  "Feerate to aim for in cooperative shutdown. Note that since mutual close is a **negotiation**, the actual feerate used in mutual close will be somewhere between this and the corresponding mutual close feerate of the peer."
                ]
              },
              "unilateral_close": {
                "type": "u32",
                "description": [
                  "Feerate for commitment_transaction in a live channel which we originally funded (if anchor_outputs was not negotiated)."
                ]
              },
              "unilateral_anchor_close": {
                "type": "u32",
                "added": "v23.08",
                "description": [
                  "Feerate for commitment_transaction in a live channel which we originally funded (if anchor_outputs was negotiated)."
                ]
              },
              "delayed_to_us": {
                "type": "u32",
                "deprecated": [
                  "v23.05",
                  "v24.05"
                ],
                "description": [
                  "Feerate for returning unilateral close funds to our wallet."
                ]
              },
              "htlc_resolution": {
                "type": "u32",
                "deprecated": [
                  "v23.05",
                  "v24.05"
                ],
                "description": [
                  "Feerate for returning unilateral close HTLC outputs to our wallet."
                ]
              },
              "penalty": {
                "type": "u32",
                "description": [
                  "Feerate to use when creating penalty tx for watchtowers."
                ]
              }
            }
          },
          "onchain_fee_estimates": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "opening_channel_satoshis",
              "mutual_close_satoshis",
              "unilateral_close_satoshis",
              "htlc_timeout_satoshis",
              "htlc_success_satoshis"
            ],
            "properties": {
              "opening_channel_satoshis": {
                "type": "u64",
                "description": [
                  "Estimated cost of typical channel open."
                ]
              },
              "mutual_close_satoshis": {
                "type": "u64",
                "description": [
                  "Estimated cost of typical channel close."
                ]
              },
              "unilateral_close_satoshis": {
                "type": "u64",
                "description": [
                  "Estimated cost of typical unilateral close (without HTLCs). If anchors are supported, this assumes a channel with anchors."
                ]
              },
              "unilateral_close_nonanchor_satoshis": {
                "added": "v23.08",
                "type": "u64",
                "description": [
                  "Estimated cost of non-anchor typical unilateral close (without HTLCs)."
                ]
              },
              "htlc_timeout_satoshis": {
                "type": "u64",
                "description": [
                  "Estimated cost of typical HTLC timeout transaction (non-anchors)."
                ]
              },
              "htlc_success_satoshis": {
                "type": "u64",
                "description": [
                  "Estimated cost of typical HTLC fulfillment transaction (non-anchors)."
                ]
              }
            }
          }
        }
      },
      "errors": [
        "The **feerates** command will never error, however some fields may be missing in the result if feerate estimates for that kind of transaction are unavailable."
      ],
      "notes": [
        "Many other commands have a *feerate* parameter. This can be:",
        "",
        "* One of the strings to use lightningd's internal estimates:",
        "  * *urgent* (next 6 blocks or so)",
        "  * *normal* (next 12 blocks or so)",
        "  * *slow* (next 100 blocks or so)",
        "  * *minimum* for the lowest value bitcoind will currently accept (added in v23.05)",
        "",
        "* A number, with an optional suffix:",
        "  * *blocks* means aim for confirmation in that many blocks (added in v23.05)",
        "  * *perkw* means the number is interpreted as satoshi-per-kilosipa (weight)",
        "  * *perkb* means it is interpreted bitcoind-style as satoshi-per-kilobyte. ",
        "",
        "Omitting the suffix is equivalent to *perkb*."
      ],
      "trivia": [
        "In C-lightning we like to call the weight unit \"sipa\" in honor of Pieter Wuille, who uses the name \"sipa\" on IRC and elsewhere. Internally we call the *perkw* style as \"feerate per kilosipa\"."
      ],
      "author": [
        "ZmnSCPxj <<ZmnSCPxj@protonmail.com>> wrote the initial version of this manpage."
      ],
      "see_also": [
        "lightning-parsefeerate(7)",
        "lightning-fundchannel(7)",
        "lightning-withdraw(7)",
        "lightning-txprepare(7)",
        "lightning-fundchannel_start(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:feerates#1",
            "method": "feerates",
            "params": {
              "style": "perkw"
            }
          },
          "response": {
            "perkw": {
              "opening": 7500,
              "mutual_close": 3750,
              "unilateral_close": 11000,
              "unilateral_anchor_close": 3750,
              "penalty": 7500,
              "min_acceptable": 1875,
              "max_acceptable": 150000,
              "floor": 253,
              "estimates": [
                {
                  "blockcount": 2,
                  "feerate": 15000,
                  "smoothed_feerate": 15000
                },
                {
                  "blockcount": 6,
                  "feerate": 11000,
                  "smoothed_feerate": 11000
                },
                {
                  "blockcount": 12,
                  "feerate": 7500,
                  "smoothed_feerate": 7500
                },
                {
                  "blockcount": 100,
                  "feerate": 3750,
                  "smoothed_feerate": 3750
                }
              ]
            },
            "onchain_fee_estimates": {
              "opening_channel_satoshis": 5265,
              "mutual_close_satoshis": 2523,
              "unilateral_close_satoshis": 4170,
              "unilateral_close_nonanchor_satoshis": 6578,
              "htlc_timeout_satoshis": 7293,
              "htlc_success_satoshis": 7733
            }
          }
        },
        {
          "request": {
            "id": "example:feerates#2",
            "method": "feerates",
            "params": {
              "style": "perkb"
            }
          },
          "response": {
            "perkb": {
              "opening": 30000,
              "mutual_close": 15000,
              "unilateral_close": 44000,
              "unilateral_anchor_close": 15000,
              "penalty": 30000,
              "min_acceptable": 7500,
              "max_acceptable": 600000,
              "floor": 1012,
              "estimates": [
                {
                  "blockcount": 2,
                  "feerate": 60000,
                  "smoothed_feerate": 60000
                },
                {
                  "blockcount": 6,
                  "feerate": 44000,
                  "smoothed_feerate": 44000
                },
                {
                  "blockcount": 12,
                  "feerate": 30000,
                  "smoothed_feerate": 30000
                },
                {
                  "blockcount": 100,
                  "feerate": 15000,
                  "smoothed_feerate": 15000
                }
              ]
            },
            "onchain_fee_estimates": {
              "opening_channel_satoshis": 5265,
              "mutual_close_satoshis": 2523,
              "unilateral_close_satoshis": 4170,
              "unilateral_close_nonanchor_satoshis": 6578,
              "htlc_timeout_satoshis": 7293,
              "htlc_success_satoshis": 7733
            }
          }
        }
      ]
    },
    "lightning-fetchinvoice.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "fetchinvoice",
      "title": "Command for fetch an invoice for an offer",
      "warning": "experimental-offers only",
      "description": [
        "The **fetchinvoice** RPC command contacts the issuer of an *offer* to get an actual invoice that can be paid. It highlights any changes between the offer and the returned invoice.",
        "",
        "If **fetchinvoice-noconnect** is not specified in the configuation, it will connect to the destination in the (currently common!) case where it cannot find a route which supports `option_onion_messages`."
      ],
      "request": {
        "required": [
          "offer"
        ],
        "properties": {
          "offer": {
            "type": "string",
            "description": [
              "Offer string to get an actual invoice that can be paid."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "Required if the offer does not specify an amount at all, otherwise it is optional (but presumably if you set it to less than the offer, you will get an error from the issuer)."
            ]
          },
          "quantity": {
            "type": "u64",
            "description": [
              "Required if the offer specifies quantity_max, otherwise it is not allowed."
            ]
          },
          "recurrence_counter": {
            "type": "u64",
            "description": [
              "Required if the offer specifies recurrence, otherwise it is not allowed. recurrence_counter should first be set to 0, and incremented for each successive invoice in a given series."
            ]
          },
          "recurrence_start": {
            "type": "number",
            "description": [
              "Required if the offer specifies recurrence_base with start_any_period set, otherwise it is not allowed. It indicates what period number to start at."
            ]
          },
          "recurrence_label": {
            "type": "string",
            "description": [
              "Required if recurrence_counter is set, and otherwise is not allowed. It must be the same as prior fetchinvoice calls for the same recurrence, as it is used to link them together."
            ]
          },
          "timeout": {
            "type": "number",
            "description": [
              "If we don't get a reply before this we fail (default, 60 seconds)."
            ]
          },
          "payer_note": {
            "type": "string",
            "description": [
              "To ask the issuer to include in the fetched invoice."
            ]
          }
        }
      },
      "response": {
        "required": [
          "invoice",
          "changes"
        ],
        "properties": {
          "invoice": {
            "type": "string",
            "description": [
              "The BOLT12 invoice we fetched."
            ]
          },
          "changes": {
            "type": "object",
            "description": [
              "Summary of changes from offer."
            ],
            "additionalProperties": false,
            "required": [],
            "properties": {
              "description_appended": {
                "type": "string",
                "description": [
                  "Extra characters appended to the *description* field."
                ]
              },
              "description": {
                "type": "string",
                "description": [
                  "A completely replaced *description* field."
                ]
              },
              "vendor_removed": {
                "type": "string",
                "description": [
                  "The *vendor* from the offer, which is missing in the invoice."
                ]
              },
              "vendor": {
                "type": "string",
                "description": [
                  "A completely replaced *vendor* field."
                ]
              },
              "amount_msat": {
                "type": "msat",
                "description": [
                  "The amount, if different from the offer amount multiplied by any *quantity* (or the offer had no amount, or was not in BTC)."
                ]
              }
            }
          },
          "next_period": {
            "type": "object",
            "description": [
              "Only for recurring invoices if the next period is under the *recurrence_limit*."
            ],
            "additionalProperties": false,
            "required": [
              "counter",
              "starttime",
              "endtime",
              "paywindow_start",
              "paywindow_end"
            ],
            "properties": {
              "counter": {
                "type": "u64",
                "description": [
                  "The index of the next period to fetchinvoice."
                ]
              },
              "starttime": {
                "type": "u64",
                "description": [
                  "UNIX timestamp that the next period starts."
                ]
              },
              "endtime": {
                "type": "u64",
                "description": [
                  "UNIX timestamp that the next period ends."
                ]
              },
              "paywindow_start": {
                "type": "u64",
                "description": [
                  "UNIX timestamp of the earliest time that the next invoice can be fetched."
                ]
              },
              "paywindow_end": {
                "type": "u64",
                "description": [
                  "UNIX timestamp of the latest time that the next invoice can be fetched."
                ]
              }
            }
          }
        }
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- -1: Catchall nonspecific error.",
        "- 1002: Offer has expired.",
        "- 1003: Cannot find a route to the node making the offer.",
        "- 1004: The node making the offer returned an error message.",
        "- 1005: We timed out trying to fetch an invoice."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-sendinvoice(7)",
        "lightning-pay(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:fetchinvoice#1",
            "method": "fetchinvoice",
            "params": {
              "offer": "lno1qgsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzrcgqgn3qzs2ge5hx6pqwdskcefpzcssytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82e",
              "payer_note": "Thanks for the fish!"
            }
          },
          "response": {
            "invoice": "lni1qqg9g04gczk9ntk4gsjg3aptwykk2q3qqc3xu3s3rg94nj40zfsy866mhu5vxne6tcej5878k2mneuvgjy8ssq38zq9q53nfwd5zqumpd3jjz93pqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4j5pqqc3xu3s3rg94nj40zfsy866mhu5vxne6tcej5878k2mneuvgjy84sggztuesttnr6atmya7afycpsvcg0wnzprn58n54lfhf2ragp0jq0e04j9z5dpsku6mnypnx7u3qw35x2grxd9eksgdqnqpz6g3kyz34nfrl7lm6c3rushzxey3a55ecjgs6qp2vz8q78j336kgr6euj6p39a209zw5kpkftk7h9te69vlmjg0arceagpaajague0zsszqk96htpgqn2wsznaas0zfdtf8v97ryz29jrn7rwgs5687ghgq5jusqr99dtx4jdj9nqpep5zxmynegrg6e7rm2l53ur8043h2yqzldyl5vh08h8ssaeq5jrvw9y24kztlwvc4nwagsuqqqqqqqqqqqqqqq9qqqqqqqqqqqqq8fykt06c5sqqqqqpfqyv65yfedgyqrp2s7qpxpjse8q8796qcrr5xwgfkqjue3urd6rs2rt2f68tk0vl2szyugtqggz953rvg9rtxj8lalh43z8epwydjfrmffn3y3p5qz5cywpu09rr4vlqsy2n7vmpn67ltzrj70znp70sk4m530j5vceq6jhk97h7ttzn09sh8m9gecarrt27v2tux8z6rr06sj9h60r05p4vhkhzsp0xf9ea4jgg",
            "changes": {}
          }
        },
        {
          "request": {
            "id": "example:fetchinvoice#2",
            "method": "fetchinvoice",
            "params": {
              "offer": "lno1qgsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzrcgqv85ysq2qepk7enxv4j3gqg2zcssytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82e",
              "amount_msat": 2000000,
              "quantity": 2
            }
          },
          "response": {
            "invoice": "lni1qqg86u6jfl660zfuk22sexem37r7xq3qqc3xu3s3rg94nj40zfsy866mhu5vxne6tcej5878k2mneuvgjy8ssqc0gfqq5pjrdanxvet9zsqs593pqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4j5pqqc3xu3s3rg94nj40zfsy866mhu5vxne6tcej5878k2mneuvgjy84yqc7sjq9vqgztqssxq2dwgnpqyhz3j68zx5cts28t6aqfgq937wsgvsmfncau3uhz8t05zvqytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82eq2rdjuqaychg3jndvsjrlu6y08aeuh4ytw6f6ak5n24p5n8zmsz2sqgrg3rg89hqfh6n7dfr0fugvq20ehecd3ezc438l6uh4r8epaakn4lsqv4qgr3ks4yxngyflq339lza456xt8uly085umq3gwql3qyfge0ec03dezeg8xulz33ntlj8yd7dcra9564zrsqqqqqqqqqqqqqqq5qqqqqqqqqqqqqayjedltzjqqqqqq9yq3n2s3894qsfwwvj3szk4yplg4fkw68nwzlwyc23457qx6v7xe38znuha72km6a2qv0gfq9syypz6g3kyz34nfrl7lm6c3rushzxey3a55ecjgs6qp2vz8q78j336k0sgz2rxjcsxs6s3lnngq9xeqn9pzy53n50p4ulcdvkx8dye7h8xgxpvjyg928m2txk2knl0zzfl7j82c6lq7xqlx83ey7z4aux9pjp4sp7",
            "changes": {}
          }
        }
      ]
    },
    "lightning-fundchannel.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "fundchannel",
      "title": "Command for establishing a lightning channel",
      "description": [
        "The **fundchannel** RPC command opens a payment channel with a peer by committing a funding transaction to the blockchain as defined in BOLT #2.",
        "",
        "If not already connected, **fundchannel** will automatically attempt to connect if Core Lightning knows a way to contact the node (either from normal gossip, or from a previous **connect** call).",
        "",
        "This auto-connection can fail if Core Lightning does not know how to contact the target node; see lightning-connect(7).",
        "",
        "Once the transaction is confirmed, normal channel operations may begin. Readiness is indicated by **listpeers** reporting a *state* of `CHANNELD_NORMAL` for the channel."
      ],
      "request": {
        "required": [
          "id",
          "amount"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "Id is the peer id obtained from connect."
            ]
          },
          "amount": {
            "type": "sat_or_all",
            "description": [
              "The amount in satoshis taken from the internal wallet to fund the channel (but if we have any anchor channels, this will always leave at least `min-emergency- msat` as change). The string *all* can be used to specify all available funds (or 16777215 satoshi if more is available and large channels were not negotiated with the peer). Otherwise, it is in satoshi precision; it can be a whole number, a whole number ending in *sat*, a whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*. The value cannot be less than the dust limit, currently set to 546, nor more than 16777215 satoshi (unless large channels were negotiated with the peer)."
            ]
          },
          "feerate": {
            "type": "feerate",
            "description": [
              "Used for the opening transaction and (unless *option_anchors* is negotiated), as initial feerate for commitment and HTLC transactions (see NOTES in lightning-feerates(7))."
            ],
            "default": "*normal*"
          },
          "announce": {
            "type": "boolean",
            "description": [
              "Whether to announce this channel or not. An unannounced channel is considered private."
            ],
            "default": "True"
          },
          "minconf": {
            "type": "u32",
            "description": [
              "The minimum number of confirmations that used outputs should have."
            ],
            "default": "1"
          },
          "push_msat": {
            "type": "msat",
            "description": [
              "The amount of millisatoshis to push to the channel peer at open. Note that this is a gift to the peer -- these satoshis are added to the initial balance of the peer at channel start and are largely unrecoverable once pushed."
            ]
          },
          "close_to": {
            "type": "string",
            "description": [
              "A Bitcoin address to which the channel funds should be sent to on close. Only valid if both peers have negotiated `option_upfront_shutdown_script`. Returns `close_to` set to closing script iff is negotiated."
            ]
          },
          "request_amt": {
            "type": "sat",
            "description": [
              "An amount of liquidity you'd like to lease from the peer. If peer supports `option_will_fund`, indicates to them to include this much liquidity into the channel. Must also pass in *compact_lease*."
            ]
          },
          "compact_lease": {
            "type": "string",
            "description": [
              "A compact representation of the peer's expected channel lease terms. If the peer's terms don't match this set, we will fail to open the channel."
            ]
          },
          "utxos": {
            "type": "array",
            "description": [
              "The utxos to be used to fund the channel, as an array of `txid:vout`."
            ],
            "items": {
              "type": "outpoint"
            }
          },
          "mindepth": {
            "description": [
              "Number of confirmations required before we consider the channel active."
            ],
            "type": "u32"
          },
          "reserve": {
            "type": "sat",
            "description": [
              "The amount we want the peer to maintain on its side of the channel. It can be a whole number, a whole number ending in *sat*, a whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*."
            ],
            "default": "1% of the funding amount"
          },
          "channel_type": {
            "added": "v24.02",
            "type": "array",
            "items": {
              "type": "u32",
              "description": [
                "Represents the explicit channel type to request. There is currently no sanity checking on this value so if you use strange values and your channel breaks, you get to keep both pieces. BOLT 2 defines the following value types:",
                "```",
                "The currently defined basic types are:",
                "  - `option_static_remotekey` (bit 12).",
                "  - `option_anchors` and `option_static_remotekey` (bits 22 and 12).",
                "",
                "Each basic type has the following variations allowed:",
                "  - `option_scid_alias` (bit 46).",
                "  - `option_zeroconf` (bit 50).",
                "```"
              ]
            }
          }
        }
      },
      "response": {
        "required": [
          "tx",
          "txid",
          "outnum",
          "channel_type",
          "channel_id"
        ],
        "properties": {
          "tx": {
            "type": "hex",
            "description": [
              "The raw transaction which funded the channel."
            ]
          },
          "txid": {
            "type": "txid",
            "description": [
              "The txid of the transaction which funded the channel."
            ]
          },
          "outnum": {
            "type": "u32",
            "description": [
              "The 0-based output index showing which output funded the channel."
            ]
          },
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel_id of the resulting channel."
            ]
          },
          "channel_type": {
            "type": "object",
            "description": [
              "Channel_type as negotiated with peer."
            ],
            "added": "v24.02",
            "additionalProperties": false,
            "required": [
              "bits",
              "names"
            ],
            "properties": {
              "bits": {
                "type": "array",
                "description": [
                  "Each bit set in this channel_type."
                ],
                "added": "v24.02",
                "items": {
                  "type": "u32",
                  "description": [
                    "Bit number."
                  ]
                }
              },
              "names": {
                "type": "array",
                "description": [
                  "Feature name for each bit set in this channel_type. Note that *anchors_zero_fee_htlc_tx* is a deprecated synonym for *anchors*."
                ],
                "added": "v24.02",
                "items": {
                  "type": "string",
                  "enum": [
                    "static_remotekey/even",
                    "anchor_outputs/even",
                    "anchors_zero_fee_htlc_tx/even",
                    "anchors/even",
                    "scid_alias/even",
                    "zeroconf/even"
                  ],
                  "description": [
                    "Name of feature bit."
                  ]
                }
              }
            }
          },
          "close_to": {
            "type": "hex",
            "description": [
              "The raw scriptPubkey which mutual close will go to; only present if *close_to* parameter was specified and peer supports `option_upfront_shutdown_script`."
            ]
          },
          "mindepth": {
            "type": "u32",
            "description": [
              "Number of confirmations before we consider the channel active."
            ]
          }
        }
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- -1: Catchall nonspecific error.",
        "- 300: The maximum allowed funding amount is exceeded.",
        "- 301: There are not enough funds in the internal wallet (including fees) to create the transaction.",
        "- 302: The output amount is too small, and would be considered dust.",
        "- 303: Broadcasting of the funding transaction failed, the internal call to bitcoin-cli returned with an error.",
        "- 313: The `min-emergency-msat` reserve not be preserved (and we have or are opening anchor channels).",
        "",
        "Failure may also occur if **lightningd** and the peer cannot agree on channel parameters (funding limits, channel reserves, fees, etc.)."
      ],
      "see_also": [
        "lightning-connect(7)",
        "lightning-listfunds()",
        "lightning-listpeers(7)",
        "lightning-feerates(7)",
        "lightning-multifundchannel(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:fundchannel#1",
            "method": "fundchannel",
            "params": {
              "id": "032cf15d1ad9c4a08d26eab1918f732d8ef8fdc6abb9640bf3db174372c491304e",
              "amount": 1000000,
              "announce": true
            }
          },
          "response": {
            "tx": "02000000000101a4f6a433b1c2625323c18bc25f880c3e7960722d9ca353d7ff5c2a2132d56a380000000000fdffffff0240420f0000000000220020b41521751a8eb257315f73a531763071cc39b7cece470f630fd5149fe7b7057a816cdc0b00000000225120a5410daebf4fc3cba618a840af497fbec4c3a084534f2b7b6a7d30bf35f8f566024730440220700ee63053ba1fea998685e721016c15cf7809fd77698560230457e122566f220220181aaa01f472ec575edc532bc612c749e7a3829f5616fc3289fd4dc7d96e98d8012102c8a8f25ed135cd671c88bd4e407bb3746678cfacbcf65ce89f8efc2aa0abe53596000000",
            "txid": "8326851788c6da23bc883c960affc6126f766348c131eda53d73bc06f0bd90ff",
            "channel_id": "1267da6521b372d7c6407a74066f7a3a5bc3489bbda5eb9f0e990e1e913e2eb9",
            "channel_type": {
              "bits": [
                12,
                22
              ],
              "names": [
                "static_remotekey/even",
                "anchors/even"
              ]
            },
            "outnum": 0
          }
        },
        {
          "description": [
            "This example shows how to to open new channel with peer 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518 from one whole utxo c8afe317789f3ecbd52893d2ac08be7499486df5a03c95ad063e395e931eb50a:1 (you can use **listfunds** command to get txid and vout):"
          ],
          "request": {
            "id": "example:fundchannel#2",
            "method": "fundchannel",
            "params": {
              "id": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
              "amount": "all",
              "feerate": "normal",
              "push_msat": 100000,
              "utxos": [
                "c8afe317789f3ecbd52893d2ac08be7499486df5a03c95ad063e395e931eb50a:1"
              ]
            }
          },
          "response": {
            "tx": "020000000001010ab51e935e393e06ad953ca0f56d489974be08acd29328d5cb3e9f7817e3afc80100000000fdffffff01cbb3eb0b00000000220020752dd5af63b98ff64fedf94683b0306c43f6eec74fbfe917639735b305e1b6d9024730440220431a00efd961f417160bd7180970a61b57c01b7c1e082d41429bb0c4e220d4180220542d0c9a1a59048751364b0ede571117fd8abdbf63d83d67a181c17ea3d3ef9e0121024740cce0e548f4ffe80c9914e43444d8e66ee8991dc9d93ec56dff4c56b933159a000000",
            "txid": "20bbe695f309285479e6b63b8ab4346ce66b2db7018485e09d59175cec6156b1",
            "channel_id": "222d999f537e32e9458c5db17a63e012dcced61340de06fda5bc30566270b0aa",
            "channel_type": {
              "bits": [
                12,
                22
              ],
              "names": [
                "static_remotekey/even",
                "anchors/even"
              ]
            },
            "outnum": 0
          }
        }
      ]
    },
    "lightning-fundchannel_cancel.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "fundchannel_cancel",
      "title": "Command for completing channel establishment",
      "description": [
        "`fundchannel_cancel` is a lower level RPC command. It allows channel opener to cancel a channel before funding broadcast with a connected peer.",
        "",
        "Note that the funding transaction MUST NOT be broadcast before `fundchannel_cancel`. Broadcasting transaction before `fundchannel_cancel` WILL lead to unrecoverable loss of funds.",
        "",
        "If `fundchannel_cancel` is called after `fundchannel_complete`, the remote peer may disconnect when command succeeds. In this case, user need to connect to remote peer again before opening channel."
      ],
      "request": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "Node id of the remote peer with which to cancel."
            ]
          }
        }
      },
      "response": {
        "required": [
          "cancelled"
        ],
        "properties": {
          "cancelled": {
            "type": "string",
            "description": [
              "A message indicating it was cancelled by RPC."
            ]
          }
        }
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- 306: Unknown peer id.",
        "- 307: No channel currently being funded that can be cancelled.",
        "- 308: It is unsafe to cancel the channel: the funding transaction has been broadcast, or there are HTLCs already in the channel, or the peer was the initiator and not us."
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-connect(7)",
        "lightning-fundchannel(7)",
        "lightning-multifundchannel(7)",
        "lightning-fundchannel_start(7)",
        "lightning-fundchannel_complete(7)",
        "lightning-openchannel_init(7)",
        "lightning-openchannel_update(7)",
        "lightning-openchannel_signed(7)",
        "lightning-openchannel_abort(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:fundchannel_cancel#1",
            "method": "fundchannel_cancel",
            "params": [
              "027ba5906fad81fcdbb774b4c806eb572b7fac3bee4720b12c44e7f70931d4b7cc"
            ]
          },
          "response": {
            "cancelled": "Channel open canceled by RPC"
          }
        },
        {
          "request": {
            "id": "example:fundchannel_cancel#2",
            "method": "fundchannel_cancel",
            "params": {
              "id": "027ba5906fad81fcdbb774b4c806eb572b7fac3bee4720b12c44e7f70931d4b7cc"
            }
          },
          "response": {
            "cancelled": "Channel open canceled by RPC"
          }
        }
      ]
    },
    "lightning-fundchannel_complete.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "fundchannel_complete",
      "title": "Command for completing channel establishment",
      "description": [
        "`fundchannel_complete` is a lower level RPC command. It allows a user to complete an initiated channel establishment with a connected peer.",
        "",
        "Note that the funding transaction MUST NOT be broadcast until after channel establishment has been successfully completed, as the commitment transactions for this channel are not secured until this command successfully completes. Broadcasting transaction before can lead to unrecoverable loss of funds."
      ],
      "request": {
        "required": [
          "id",
          "psbt"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "Node id of the remote peer."
            ]
          },
          "psbt": {
            "type": "string",
            "description": [
              "Transaction to use for funding (does not need to be signed but must be otherwise complete)."
            ]
          }
        }
      },
      "response": {
        "required": [
          "channel_id",
          "commitments_secured"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel_id of the resulting channel."
            ]
          },
          "commitments_secured": {
            "type": "boolean",
            "enum": [
              true
            ],
            "description": [
              "Indication that channel is safe to use."
            ]
          }
        }
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- -1: Catchall nonspecific error.",
        "- 305: Peer is not connected.",
        "- 306: Unknown peer id.",
        "- 309: PSBT does not have a unique, correct output to fund the channel."
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-connect(7)",
        "lightning-fundchannel(7)",
        "lightning-multifundchannel(7)",
        "lightning-fundchannel_start(7)",
        "lightning-fundchannel_cancel(7)",
        "lightning-openchannel_init(7)",
        "lightning-openchannel_update(7)",
        "lightning-openchannel_signed(7)",
        "lightning-openchannel_bump(7)",
        "lightning-openchannel_abort(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:fundchannel_complete#1",
            "method": "fundchannel_complete",
            "params": [
              "027ba5906fad81fcdbb774b4c806eb572b7fac3bee4720b12c44e7f70931d4b7cc",
              "cHNidP8BAgQCAAAAAQMElQAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAFpz79e9wou5mbmtaiB+6WfRTf8SpZxmrd6n+rIFcWewQAAAAAA/f///wLS79/eAAAAABYAFE35CMxYA4yQx9XLuFj0/q5uNmligJaYAQAAAAAWABT/hTPq8LE5vAc9KiJjjmygoIN81UsAAAABAR+AlpgBAAAAABYAFP+FM+rwsTm8Bz0qImOObKCgg3zVAQ4gl0vCMXO3vKmwYNrBKr0bsVjo7Wmj501PavWRmxX1dywBDwQBAAAAARAE/f///wABAwgAAAABAAAAAAEEIgAgrcWu1QvOE7IcR/Pw6wFIFh6/TLwoeKjo5eUoi7suzsEAAQMIQYOYAAAAAAABBCJRIIHaDT4wURNaieL52F4urfZh+Vm/sF5nEJeFRnLP0Kx9AA=="
            ]
          },
          "response": {
            "channel_id": "4ef7fbec78160e41ac53e32bb7d4d491222070cf719bd236a03a27109a306ced",
            "commitments_secured": true
          }
        },
        {
          "request": {
            "id": "example:fundchannel_complete#2",
            "method": "fundchannel_complete",
            "params": {
              "id": "027ba5906fad81fcdbb774b4c806eb572b7fac3bee4720b12c44e7f70931d4b7cc",
              "psbt": "cHNidP8BAgQCAAAAAQMETgAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCJAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAEAAAAA/f///wIAAAABAAAAACIAIK3FrtULzhOyHEfz8OsBSBYev0y8KHio6OXlKIu7Ls7BQYOYAAAAAAAiUSCB2g0+MFETWoni+dheLq32YflZv7BeZxCXhUZyz9CsfZUAAAABAStBg5gAAAAAACJRIIHaDT4wURNaieL52F4urfZh+Vm/sF5nEJeFRnLP0Kx9AQ4gTvf77HgWDkGsU+Mrt9TUkSIgcM9xm9I2oDonEJowbO0BDwQBAAAAARAE/f///wABAwhAQg8AAAAAAAEEIgAgyeosZcqM3Ce8Ew/hH15S4XVHXg4xtkWx3MODLcT3540AAQMIwi2JAAAAAAABBCJRIHdLHCqbSwqdzkO0Y5WUDaIAERXUAPo2Z5CeyGpdNlGLAA=="
            }
          },
          "response": {
            "channel_id": "589340033fb4e1ace8a5f6239a9bcc88e2d65191f68e4ad3f2ad37818718a2e9",
            "commitments_secured": true
          }
        }
      ]
    },
    "lightning-fundchannel_start.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "fundchannel_start",
      "title": "Command for initiating channel establishment for a lightning channel",
      "description": [
        "`fundchannel_start` is a lower level RPC command. It allows a user to initiate channel establishment with a connected peer.",
        "",
        "Note that the funding transaction MUST NOT be broadcast until after channel establishment has been successfully completed by running `fundchannel_complete`, as the commitment transactions for this channel are not secured until the complete command succeeds. Broadcasting transaction before that can lead to unrecoverable loss of funds."
      ],
      "request": {
        "required": [
          "id",
          "amount"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "The peer id obtained from connect."
            ]
          },
          "amount": {
            "type": "sat",
            "description": [
              "Satoshi value that the channel will be funded at. This value MUST be accurate, otherwise the negotiated commitment transactions will not encompass the correct channel value."
            ]
          },
          "feerate": {
            "type": "feerate",
            "description": [
              "Feerate for subsequent commitment transactions: see **fundchannel**. Note that this is ignored for channels with *option_anchors* (we always use a low commitment fee for these)."
            ]
          },
          "announce": {
            "type": "boolean",
            "description": [
              "Whether or not to announce this channel."
            ]
          },
          "close_to": {
            "type": "string",
            "description": [
              "Bitcoin address to which the channel funds should be sent to on close. Only valid if both peers have negotiated `option_upfront_shutdown_script`. Returns `close_to` set to closing script iff is negotiated."
            ]
          },
          "push_msat": {
            "type": "msat",
            "description": [
              "Amount of millisatoshis to push to the channel peer at open. Note that this is a gift to the peer -- these satoshis are added to the initial balance of the peer at channel start and are largely unrecoverable once pushed."
            ]
          },
          "mindepth": {
            "type": "u32",
            "description": [
              "Number of confirmations required before we consider the channel active."
            ]
          },
          "reserve": {
            "type": "sat",
            "description": [
              "The amount we want the peer to maintain on its side."
            ]
          },
          "channel_type": {
            "type": "array",
            "description": [
              "Each bit set in this channel_type."
            ],
            "items": {
              "type": "u32",
              "description": [
                "Bit number."
              ]
            }
          }
        },
        "pairedWith": [
          [
            "feerate",
            "announce",
            "close_to",
            "push_msat",
            "channel_type",
            "mindepth",
            "reserve"
          ]
        ]
      },
      "response": {
        "required": [
          "funding_address",
          "scriptpubkey",
          "warning_usage"
        ],
        "properties": {
          "funding_address": {
            "type": "string",
            "description": [
              "The address to send funding to for the channel. DO NOT SEND COINS TO THIS ADDRESS YET."
            ]
          },
          "scriptpubkey": {
            "type": "hex",
            "description": [
              "The raw scriptPubkey for the address."
            ]
          },
          "channel_type": {
            "type": "object",
            "description": [
              "Channel_type as negotiated with peer."
            ],
            "added": "v24.02",
            "additionalProperties": false,
            "required": [
              "bits",
              "names"
            ],
            "properties": {
              "bits": {
                "type": "array",
                "added": "v24.02",
                "description": [
                  "Each bit set in this channel_type."
                ],
                "items": {
                  "type": "u32",
                  "description": [
                    "Bit number."
                  ]
                }
              },
              "names": {
                "type": "array",
                "description": [
                  "Feature name for each bit set in this channel_type. Note that *anchors_zero_fee_htlc_tx* is a deprecated synonym for *anchors*."
                ],
                "added": "v24.02",
                "items": {
                  "type": "string",
                  "enum": [
                    "static_remotekey/even",
                    "anchor_outputs/even",
                    "anchors_zero_fee_htlc_tx/even",
                    "anchors/even",
                    "scid_alias/even",
                    "zeroconf/even"
                  ],
                  "description": [
                    "Name of feature bit."
                  ]
                }
              }
            }
          },
          "close_to": {
            "type": "hex",
            "description": [
              "The raw scriptPubkey which mutual close will go to; only present if *close_to* parameter was specified and peer supports `option_upfront_shutdown_script`."
            ]
          },
          "warning_usage": {
            "type": "string",
            "description": [
              "A warning not to prematurely broadcast the funding transaction (always present!)."
            ]
          },
          "mindepth": {
            "type": "u32",
            "description": [
              "Number of confirmations before we consider the channel active."
            ]
          }
        }
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- -1: Catchall nonspecific error.",
        "- 300: The amount exceeded the maximum configured funding amount.",
        "- 301: The provided `push_msat` is greater than the provided `amount`.",
        "- 304: Still syncing with bitcoin network",
        "- 305: Peer is not connected.",
        "- 306: Unknown peer id.",
        "- 312: Peer negotiated `option_dual_fund`, must use `openchannel_init` not `fundchannel_start`. (Only if ``experimental-dual-fund` is enabled)"
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-connect(7)",
        "lightning-fundchannel(7)",
        "lightning-multifundchannel(7)",
        "lightning-fundchannel_complete(7)",
        "lightning-fundchannel_cancel(7)",
        "lightning-openchannel_init(7)",
        "lightning-openchannel_update(7)",
        "lightning-openchannel_signed(7)",
        "lightning-openchannel_bump(7)",
        "lightning-openchannel_abort(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:fundchannel_start#1",
            "method": "fundchannel_start",
            "params": [
              "027ba5906fad81fcdbb774b4c806eb572b7fac3bee4720b12c44e7f70931d4b7cc",
              16777216
            ]
          },
          "response": {
            "funding_address": "bcrt1q5ptrvwlgcldm2ygf3nzsl09zfpp7dmtduqlczer97xvc4x5z5zwsc2ulv4",
            "scriptpubkey": "0020a056363be8c7dbb511098cc50fbca24843e6ed6de03f816465f1998a9a82a09d",
            "channel_type": {
              "bits": [
                12,
                22
              ],
              "names": [
                "static_remotekey/even",
                "anchors/even"
              ]
            },
            "warning_usage": "The funding transaction MUST NOT be broadcast until after channel establishment has been successfully completed by running `fundchannel_complete`"
          }
        },
        {
          "request": {
            "id": "example:fundchannel_start#2",
            "method": "fundchannel_start",
            "params": {
              "id": "027ba5906fad81fcdbb774b4c806eb572b7fac3bee4720b12c44e7f70931d4b7cc",
              "amount": 16777216
            }
          },
          "response": {
            "funding_address": "bcrt1q4hz6a4gtecfmy8z870cwkq2gzc0t7n9u9pu23689u55ghwewemqsv4v2zs",
            "scriptpubkey": "0020adc5aed50bce13b21c47f3f0eb0148161ebf4cbc2878a8e8e5e5288bbb2ecec1",
            "channel_type": {
              "bits": [
                12,
                22
              ],
              "names": [
                "static_remotekey/even",
                "anchors/even"
              ]
            },
            "warning_usage": "The funding transaction MUST NOT be broadcast until after channel establishment has been successfully completed by running `fundchannel_complete`"
          }
        }
      ]
    },
    "lightning-funderupdate.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "funderupdate",
      "title": "Command for adjusting node funding v2 channels",
      "description": [
        "NOTE: Must have --experimental-dual-fund enabled for these settings to take effect.",
        "",
        "For channel open requests using dual funding.",
        "",
        "Note: to maximize channel leases, best policy setting is (match, 100).",
        "",
        "Setting any of the 5 options from *lease_fee_base_msat*, *lease_fee_basis*, *funding_weight*, *channel_fee_max_base_msat* and, *channel_fee_max_proportional_thousandths* will activate channel leases for this node, and advertise these values via the lightning gossip network. If any one is set, the other values will be the default."
      ],
      "request": {
        "required": [],
        "properties": {
          "policy": {
            "type": "string",
            "enum": [
              "match",
              "available",
              "fixed"
            ],
            "description": [
              "Funder plugin will use to decide how much capital to commit to a v2 open channel request.",
              "There are three policy options, detailed below:",
              "    * `match` -- Contribute *policy_mod* percent of their requested funds. Valid *policy_mod* values are 0 to 200. If this is a channel lease request, we match based on their requested funds. If it is not a channel lease request (and *lease_only* is false), then we match their funding amount. Note: any lease match less than 100 will likely fail, as clients will not accept a lease less than their request.",
              "    * `available` -- Contribute *policy_mod* percent of our available node wallet funds. Valid *policy_mod* values are 0 to 100.",
              "    * `fixed` -- Contributes a fixed  *policy_mod* sats to v2 channel open requests."
            ],
            "default": "fixed"
          },
          "policy_mod": {
            "type": "msat",
            "description": [
              "Number or 'modification' to apply to the policy."
            ],
            "default": "0sats"
          },
          "leases_only": {
            "type": "boolean",
            "description": [
              "Only contribute funds to `option_will_fund` requests which pay to lease funds. It will fund any v2 open request using *policy* even if it's they're not seeking to lease funds. Note that `option_will_fund` commits funds for 4032 blocks (~1mo). Must also set *lease_fee_base_msat*, *lease_fee_basis*, *funding_weight*, *channel_fee_max_base_msat*, and *channel_fee_max_proportional_thousandths* to advertise available channel leases."
            ],
            "default": "False"
          },
          "min_their_funding_msat": {
            "type": "msat",
            "description": [
              "Minimum funding sats that we require in order to activate our contribution policy to the v2 open."
            ],
            "default": "10k sats"
          },
          "max_their_funding_msat": {
            "type": "msat",
            "description": [
              "Maximum funding sats that we will consider to activate our contribution policy to the v2 open. Any channel open above this will not be funded."
            ],
            "default": "no max (`UINT_MAX`)"
          },
          "per_channel_min_msat": {
            "type": "msat",
            "description": [
              "Minimum amount that we will contribute to a channel open."
            ],
            "default": "10k sats"
          },
          "per_channel_max_msat": {
            "type": "msat",
            "description": [
              "Maximum amount that we will contribute to a channel open."
            ],
            "default": "no max (`UINT_MAX`)"
          },
          "reserve_tank_msat": {
            "type": "msat",
            "description": [
              "Amount of sats to leave available in the node wallet."
            ],
            "default": "zero sats"
          },
          "fuzz_percent": {
            "type": "u32",
            "description": [
              "A percentage to fuzz the resulting contribution amount by. Valid values are 0 to 100. Note that turning this on with (match, 100) policy will randomly fail `option_will_fund` leases, as most clients expect an exact or greater match of their `requested_funds`."
            ],
            "default": "0% (no fuzz)"
          },
          "fund_probability": {
            "type": "u32",
            "description": [
              "The percent of v2 channel open requests to apply our policy to. Valid values are integers from 0 (fund 0% of all open requests) to 100 (fund every request). Useful for randomizing opens that receive funds. Useful for randomizing opens that receive funds."
            ],
            "default": "100"
          },
          "lease_fee_base_msat": {
            "type": "msat",
            "description": [
              "Flat fee for a channel lease. Node will receive this much extra added to their channel balance, paid by the opening node. Note that the minimum is 1sat."
            ],
            "default": "2k sats"
          },
          "lease_fee_basis": {
            "type": "u32",
            "description": [
              "A basis fee that's calculated as 1/10k of the total requested funds the peer is asking for. Node will receive the total of *lease_fee_basis* times requested funds / 10k satoshis added to their channel balance, paid by the opening node."
            ],
            "default": "0.65% (65 basis points)"
          },
          "funding_weight": {
            "type": "u32",
            "description": [
              "To calculate the fee the peer will compensate your node for its contributing inputs to the funding transaction. The total fee is calculated as the `open_channel2`.`funding_feerate_perkw` times this *funding_weight* divided by 1000. Node will have this funding fee added to their channel balance, paid by the opening node."
            ],
            "default": "2 inputs + 1 P2WPKH output"
          },
          "channel_fee_max_base_msat": {
            "type": "msat",
            "description": [
              "A commitment to a maximum `channel_fee_base_msat` that your node will charge for routing payments over this leased channel during the lease duration."
            ],
            "default": "5k sats"
          },
          "channel_fee_max_proportional_thousandths": {
            "type": "u32",
            "description": [
              "A commitment to a maximum `channel_fee_proportional_millionths` that your node will charge for routing payments over this leased channel during the lease duration. Note that it's denominated in 'thousandths'. A setting of `1` is equal to 1k ppm; `5` is 5k ppm, etc."
            ],
            "default": "100 (100k ppm)"
          },
          "compact_lease": {
            "type": "hex",
            "description": [
              "A compact description of the channel lease params. When opening a channel, passed in to `fundchannel` to indicate the terms we expect from the peer."
            ]
          }
        }
      },
      "response": {
        "required": [
          "summary",
          "policy",
          "policy_mod",
          "leases_only",
          "min_their_funding_msat",
          "max_their_funding_msat",
          "per_channel_min_msat",
          "per_channel_max_msat",
          "reserve_tank_msat",
          "fuzz_percent",
          "fund_probability"
        ],
        "properties": {
          "summary": {
            "type": "string",
            "description": [
              "Summary of the current funding policy e.g. (match 100)."
            ]
          },
          "policy": {
            "type": "string",
            "enum": [
              "match",
              "available",
              "fixed"
            ],
            "description": [
              "Policy funder plugin will use to decide how much capital to commit to a v2 open channel request."
            ]
          },
          "policy_mod": {
            "type": "u32",
            "description": [
              "The *policy_mod* is the number or 'modification' to apply to the policy."
            ]
          },
          "leases_only": {
            "type": "boolean",
            "description": [
              "Only contribute funds to `option_will_fund` lease requests."
            ]
          },
          "min_their_funding_msat": {
            "type": "msat",
            "description": [
              "The minimum funding sats that we require from peer to activate our funding policy."
            ]
          },
          "max_their_funding_msat": {
            "type": "msat",
            "description": [
              "The maximum funding sats that we'll allow from peer to activate our funding policy."
            ]
          },
          "per_channel_min_msat": {
            "type": "msat",
            "description": [
              "The minimum amount that we will fund a channel open with."
            ]
          },
          "per_channel_max_msat": {
            "type": "msat",
            "description": [
              "The maximum amount that we will fund a channel open with."
            ]
          },
          "reserve_tank_msat": {
            "type": "msat",
            "description": [
              "Amount of sats to leave available in the node wallet."
            ]
          },
          "fuzz_percent": {
            "type": "u32",
            "description": [
              "Percentage to fuzz our funding amount by."
            ]
          },
          "fund_probability": {
            "type": "u32",
            "description": [
              "Percent of opens to consider funding. 100 means we'll consider funding every requested open channel request."
            ]
          },
          "lease_fee_base_msat": {
            "type": "msat",
            "description": [
              "Flat fee to charge for a channel lease."
            ]
          },
          "lease_fee_basis": {
            "type": "u32",
            "description": [
              "Proportional fee to charge for a channel lease, calculated as 1/10,000th of requested funds."
            ]
          },
          "funding_weight": {
            "type": "u32",
            "description": [
              "Transaction weight the channel opener will pay us for a leased funding transaction."
            ]
          },
          "channel_fee_max_base_msat": {
            "type": "msat",
            "description": [
              "Maximum channel_fee_base_msat we'll charge for routing funds leased on this channel."
            ]
          },
          "channel_fee_max_proportional_thousandths": {
            "type": "u32",
            "description": [
              "Maximum channel_fee_proportional_millitionths we'll charge for routing funds leased on this channel, in thousandths."
            ]
          },
          "compact_lease": {
            "type": "hex",
            "description": [
              "Compact description of the channel lease parameters."
            ]
          }
        }
      },
      "errors": [
        "The following error code may occur:",
        "",
        "- -32602: If the given parameters are invalid."
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-fundchannel(7)",
        "lightning-listfunds(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:funderupdate#1",
            "method": "funderupdate",
            "params": {}
          },
          "response": {
            "summary": "fixed (0sat)",
            "policy": "fixed",
            "policy_mod": 0,
            "leases_only": true,
            "min_their_funding_msat": 10000000,
            "max_their_funding_msat": 4294967295000,
            "per_channel_min_msat": 10000000,
            "per_channel_max_msat": 4294967295000,
            "reserve_tank_msat": 0,
            "fuzz_percent": 0,
            "fund_probability": 100
          }
        },
        {
          "request": {
            "id": "example:funderupdate#2",
            "method": "funderupdate",
            "params": {
              "policy": "fixed",
              "policy_mod": "50000sat",
              "min_their_funding_msat": 1000,
              "per_channel_min_msat": "1000sat",
              "per_channel_max_msat": "500000sat",
              "fund_probability": 100,
              "fuzz_percent": 0,
              "leases_only": false
            }
          },
          "response": {
            "summary": "fixed (50000sat)",
            "policy": "fixed",
            "policy_mod": 50000,
            "leases_only": false,
            "min_their_funding_msat": 1000,
            "max_their_funding_msat": 4294967295000,
            "per_channel_min_msat": 1000000,
            "per_channel_max_msat": 500000000,
            "reserve_tank_msat": 0,
            "fuzz_percent": 0,
            "fund_probability": 100
          }
        }
      ]
    },
    "lightning-fundpsbt.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "fundpsbt",
      "title": "Command to populate PSBT inputs from the wallet",
      "description": [
        "`fundpsbt` is a low-level RPC command which creates a PSBT using unreserved inputs in the wallet, optionally reserving them as well."
      ],
      "request": {
        "required": [
          "satoshi",
          "feerate",
          "startweight"
        ],
        "properties": {
          "satoshi": {
            "type": "sat_or_all",
            "description": [
              "The minimum satoshi value of the output(s) needed (or the string `all` meaning use all unreserved inputs). If a value, it can be a whole number, a whole number ending in *sat*, a whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*."
            ]
          },
          "feerate": {
            "type": "feerate",
            "description": [
              "Used for the transaction as initial feerate."
            ],
            "default": "*normal*"
          },
          "startweight": {
            "type": "u32",
            "description": [
              "The weight of the transaction before *fundpsbt* has added any inputs."
            ]
          },
          "minconf": {
            "type": "u32",
            "description": [
              "The minimum number of confirmations that used outputs should have."
            ],
            "default": "1"
          },
          "reserve": {
            "type": "u32",
            "description": [
              "If not zero, then *reserveinputs* is called (successfully, with *exclusive* true) on the returned PSBT for this number of blocks."
            ],
            "default": "72 blocks"
          },
          "locktime": {
            "type": "u32",
            "description": [
              "The locktime of the transaction. if not set, it is set to a recent block height."
            ]
          },
          "min_witness_weight": {
            "type": "u32",
            "description": [
              "Minimum weight to use for a UTXO's witness. If the actual witness weight is greater than the provided minimum, the actual witness weight will be used."
            ]
          },
          "excess_as_change": {
            "type": "boolean",
            "description": [
              "Flag to add a change output for the excess sats."
            ]
          },
          "nonwrapped": {
            "added": "v23.02",
            "type": "boolean",
            "description": [
              "To signal to filter out any p2sh-wrapped inputs from funding this PSBT."
            ]
          },
          "opening_anchor_channel": {
            "added": "v23.08",
            "type": "boolean",
            "description": [
              "To signel that it needs emergency reserve for anchors so that we can lowball our commitment tx fees, and min-emergency-msat for reserving some sats for closing anchor channels."
            ]
          }
        }
      },
      "response": {
        "required": [
          "psbt",
          "feerate_per_kw",
          "estimated_final_weight",
          "excess_msat"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "Unsigned PSBT which fulfills the parameters given."
            ]
          },
          "feerate_per_kw": {
            "type": "u32",
            "description": [
              "The feerate used to create the PSBT, in satoshis-per-kiloweight."
            ]
          },
          "estimated_final_weight": {
            "type": "u32",
            "description": [
              "The estimated weight of the transaction once fully signed."
            ]
          },
          "excess_msat": {
            "type": "msat",
            "description": [
              "The amount above *satoshi* which is available. This could be zero, or dust; it will be zero if *change_outnum* is also returned."
            ]
          },
          "change_outnum": {
            "type": "u32",
            "description": [
              "The 0-based output number where change was placed (only if parameter *excess_as_change* was true and there was sufficient funds)."
            ]
          },
          "reservations": {
            "type": "array",
            "description": [
              "If *reserve* was true or a non-zero number, just as per lightning- reserveinputs(7)."
            ],
            "items": {
              "type": "object",
              "required": [
                "txid",
                "vout",
                "was_reserved",
                "reserved",
                "reserved_to_block"
              ],
              "additionalProperties": false,
              "properties": {
                "txid": {
                  "type": "txid",
                  "description": [
                    "The txid of the transaction."
                  ]
                },
                "vout": {
                  "type": "u32",
                  "description": [
                    "The 0-based output number."
                  ]
                },
                "was_reserved": {
                  "type": "boolean",
                  "enum": [
                    false
                  ],
                  "description": [
                    "Whether this output was previously reserved."
                  ]
                },
                "reserved": {
                  "type": "boolean",
                  "enum": [
                    true
                  ],
                  "description": [
                    "Whether this output is now reserved."
                  ]
                },
                "reserved_to_block": {
                  "type": "u32",
                  "description": [
                    "The blockheight the reservation will expire."
                  ]
                }
              }
            }
          }
        },
        "post_return_value_notes": [
          "If *excess_as_change* is true and the excess is enough to cover an additional output above the `dust_limit`, then an output is added to the PSBT for the excess amount. The *excess_msat* will be zero. A *change_outnum* will be returned with the index of the change output."
        ]
      },
      "usage": [
        "Let's assume the caller is trying to produce a 100,000 satoshi output.",
        "",
        "First, the caller estimates the weight of the core (typically 42) and known outputs of the transaction (typically (9 + scriptlen) * 4). For a simple P2WPKH it's a 22 byte scriptpubkey, so that's 124 weight.",
        "",
        "It calls \"*fundpsbt* 100000sat slow 166\", which succeeds, and returns the *psbt* and *feerate_per_kw* it used, the *estimated_final_weight* and any *excess_msat*.",
        "",
        "If *excess_msat* is greater than the cost of adding a change output, the caller adds a change output randomly to position 0 or 1 in the PSBT. Say *feerate_per_kw* is 253, and the change output is a P2WPKH (weight 124), the cost is around 31 sats. With the dust limit disallowing payments below 546 satoshis, we would only create a change output if *excess_msat* was greater or equal to 31 + 546."
      ],
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- -1: Catchall nonspecific error.",
        "- 301: Insufficient UTXOs to meet *satoshi* value."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-utxopsbt(7)",
        "lightning-reserveinputs(7)",
        "lightning-unreserveinputs(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:fundpsbt#1",
            "method": "fundpsbt",
            "params": {
              "satoshi": 1000000,
              "feerate": "253perkw",
              "startweight": 250,
              "reserve": 0
            }
          },
          "response": {
            "psbt": "cHNidP8BAF4CAAAAAZiQf/mEs4NcFFfD4K8xauOgSpbz/xeetoXVWAPCI0h6AQAAAAD9////AahhAAAAAAAAIlEg+3d9jpNmK0getyg5W+Mp31CPIRDKcJg/mZs/uaVrQ+GZAAAAAAEAiQIAAAABswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BAAAAAP3///8CgIQeAAAAAAAiACDJvFwGPK7796bHgUQHtWJ7T4GotW7L6TLGgvnLrA0Z32INzQsAAAAAIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2iYAAAAAQErYg3NCwAAAAAiUSDJGD7ekSHzxv0UmIIsR6dgJzInZpyQlQiEO6xbvYE/aAAA",
            "feerate_per_kw": 253,
            "estimated_final_weight": 693,
            "excess_msat": 196962507000,
            "change_outnum": 0
          }
        },
        {
          "request": {
            "id": "example:fundpsbt#2",
            "method": "fundpsbt",
            "params": {
              "satoshi": 500000,
              "feerate": "urgent",
              "startweight": 166,
              "reserve": 0,
              "excess_as_change": true,
              "min_witness_weight": 110
            }
          },
          "response": {
            "psbt": "cHNidP8BAF4CAAAAAZiQf/mEs4NcFFfD4K8xauOgSpbz/xeetoXVWAPCI0h6AQAAAAD9////AfZRxQsAAAAAIlEg21kTTo7K2doCG6F2JqgaDjc1kRCrH7AL08oPVVJhuE+ZAAAAAAEAiQIAAAABswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BAAAAAP3///8CgIQeAAAAAAAiACDJvFwGPK7796bHgUQHtWJ7T4GotW7L6TLGgvnLrA0Z32INzQsAAAAAIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2iYAAAAAQErYg3NCwAAAAAiUSDJGD7ekSHzxv0UmIIsR6dgJzInZpyQlQiEO6xbvYE/aAAA",
            "feerate_per_kw": 11000,
            "estimated_final_weight": 612,
            "excess_msat": 0,
            "change_outnum": 0
          }
        }
      ]
    },
    "lightning-getinfo.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "getinfo",
      "title": "Command to receive all information about the Core Lightning node.",
      "description": [
        "The **getinfo** gives a summary of the current running node."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {}
      },
      "response": {
        "required": [
          "id",
          "alias",
          "color",
          "num_peers",
          "num_pending_channels",
          "num_active_channels",
          "num_inactive_channels",
          "version",
          "blockheight",
          "network",
          "fees_collected_msat",
          "lightning-dir",
          "address"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "The public key unique to this node."
            ]
          },
          "alias": {
            "type": "string",
            "description": [
              "The fun alias this node will advertize."
            ],
            "maxLength": 32
          },
          "color": {
            "type": "hex",
            "description": [
              "The favorite RGB color this node will advertize."
            ],
            "minLength": 6,
            "maxLength": 6
          },
          "num_peers": {
            "type": "u32",
            "description": [
              "The total count of peers, connected or with channels."
            ]
          },
          "num_pending_channels": {
            "type": "u32",
            "description": [
              "The total count of channels being opened."
            ]
          },
          "num_active_channels": {
            "type": "u32",
            "description": [
              "The total count of channels in normal state."
            ]
          },
          "num_inactive_channels": {
            "type": "u32",
            "description": [
              "The total count of channels waiting for opening or closing transactions to be mined."
            ]
          },
          "version": {
            "type": "string",
            "description": [
              "Identifies what bugs you are running into."
            ]
          },
          "lightning-dir": {
            "type": "string",
            "description": [
              "Identifies where you can find the configuration and other related files."
            ]
          },
          "our_features": {
            "type": "object",
            "description": [
              "Our BOLT #9 feature bits (as hexstring) for various contexts."
            ],
            "additionalProperties": true,
            "required": [
              "init",
              "node",
              "channel",
              "invoice"
            ],
            "properties": {
              "init": {
                "type": "hex",
                "description": [
                  "Features (incl. globalfeatures) in our init message, these also restrict what we offer in open_channel or accept in accept_channel."
                ]
              },
              "node": {
                "type": "hex",
                "description": [
                  "Features in our node_announcement message."
                ]
              },
              "channel": {
                "type": "hex",
                "description": [
                  "Negotiated channel features we (as channel initiator) publish in the channel_announcement message."
                ]
              },
              "invoice": {
                "type": "hex",
                "description": [
                  "Features in our BOLT11 invoices."
                ]
              }
            }
          },
          "blockheight": {
            "type": "u32",
            "description": [
              "The highest block height we've learned."
            ]
          },
          "network": {
            "type": "string",
            "description": [
              "Represents the type of network on the node are working (e.g: `bitcoin`, `testnet`, or `regtest`)."
            ]
          },
          "fees_collected_msat": {
            "type": "msat",
            "description": [
              "Total routing fees collected by this node."
            ]
          },
          "address": {
            "type": "array",
            "description": [
              "The addresses we announce to the world."
            ],
            "items": {
              "type": "object",
              "required": [
                "type",
                "port"
              ],
              "additionalProperties": true,
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "dns",
                    "ipv4",
                    "ipv6",
                    "torv2",
                    "torv3"
                  ],
                  "description": [
                    "Type of connection (until 23.08, `websocket` was also allowed)."
                  ]
                },
                "port": {
                  "type": "u16",
                  "description": [
                    "Port number."
                  ]
                }
              },
              "if": {
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "dns",
                      "ipv4",
                      "ipv6",
                      "torv2",
                      "torv3"
                    ]
                  }
                }
              },
              "then": {
                "required": [
                  "type",
                  "address",
                  "port"
                ],
                "additionalProperties": false,
                "properties": {
                  "type": {},
                  "port": {},
                  "address": {
                    "type": "string",
                    "description": [
                      "Address in expected format for **type**."
                    ]
                  }
                }
              },
              "else": {
                "required": [
                  "type",
                  "port"
                ],
                "additionalProperties": false,
                "properties": {
                  "type": {},
                  "port": {}
                }
              }
            }
          },
          "binding": {
            "type": "array",
            "description": [
              "The addresses we are listening on."
            ],
            "items": {
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "local socket",
                    "websocket",
                    "ipv4",
                    "ipv6",
                    "torv2",
                    "torv3"
                  ],
                  "description": [
                    "Type of connection."
                  ]
                },
                "address": {
                  "type": "string",
                  "description": [
                    "Address in expected format for **type**."
                  ]
                },
                "port": {
                  "type": "u16",
                  "description": [
                    "Port number."
                  ]
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "local socket"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "socket"
                    ],
                    "properties": {
                      "type": {},
                      "socket": {
                        "type": "string",
                        "description": [
                          "Socket filename."
                        ]
                      }
                    }
                  },
                  "else": {
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "address",
                      "port"
                    ],
                    "properties": {
                      "type": {},
                      "address": {},
                      "port": {},
                      "subtype": {}
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "websocket"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "address",
                      "port",
                      "subtype"
                    ],
                    "properties": {
                      "type": {},
                      "address": {},
                      "port": {},
                      "subtype": {
                        "type": "string",
                        "description": [
                          "Type of address."
                        ]
                      }
                    }
                  },
                  "else": {
                    "additionalProperties": false,
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {},
                      "address": {},
                      "port": {},
                      "socket": {}
                    }
                  }
                }
              ]
            }
          },
          "warning_bitcoind_sync": {
            "type": "string",
            "description": [
              "Bitcoind is not up-to-date with network."
            ]
          },
          "warning_lightningd_sync": {
            "type": "string",
            "description": [
              "Lightningd is still loading latest blocks from bitcoind."
            ]
          }
        }
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters or some error happened during the command process."
      ],
      "author": [
        "Vincenzo Palazzo <<vincenzo.palazzo@protonmail.com>> wrote the initial version of this man page,",
        "but many others did the hard work of actually implementing this rpc command."
      ],
      "see_also": [
        "lightning-connect(7)",
        "lightning-fundchannel(7)",
        "lightning-listconfigs(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:getinfo#1",
            "method": "getinfo",
            "params": {}
          },
          "response": {
            "id": "02bf811f7571754f0b51e6d41a8885f5561041a7b14fac093e4cffb95749de1a8d",
            "alias": "SLICKERGOPHER",
            "color": "02bf81",
            "num_peers": 0,
            "num_pending_channels": 0,
            "num_active_channels": 0,
            "num_inactive_channels": 0,
            "address": [],
            "binding": [
              {
                "type": "ipv4",
                "address": "127.0.0.1",
                "port": 9736
              }
            ],
            "version": "v0.10.2",
            "blockheight": 724302,
            "network": "bitcoin",
            "msatoshi_fees_collected": 0,
            "fees_collected_msat": "0msat",
            "lightning-dir": "/media/vincent/Maxtor/C-lightning/node/bitcoin",
            "our_features": {
              "init": "08a0802a8a59a1",
              "node": "88a0802a8a59a1",
              "channel": "",
              "invoice": "02000002024100"
            }
          }
        }
      ]
    },
    "lightning-getlog.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "getlog",
      "title": "Command to show logs.",
      "description": [
        "The **getlog** the RPC command to show logs, with optional log *level*."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "level": {
            "type": "string",
            "enum": [
              "broken",
              "unusual",
              "info",
              "debug",
              "trace",
              "io"
            ],
            "description": [
              "A string that represents the log level."
            ],
            "default": "*info*"
          }
        }
      },
      "response": {
        "required": [
          "created_at",
          "bytes_used",
          "bytes_max",
          "log"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "description": [
              "UNIX timestamp with 9 decimal places, when logging was initialized."
            ]
          },
          "bytes_used": {
            "type": "u32",
            "description": [
              "The number of bytes used by logging records."
            ]
          },
          "bytes_max": {
            "type": "u32",
            "description": [
              "The bytes_used values at which records will be trimmed ."
            ]
          },
          "log": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "type"
              ],
              "additionalProperties": true,
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "SKIPPED",
                    "BROKEN",
                    "UNUSUAL",
                    "INFO",
                    "DEBUG",
                    "TRACE",
                    "IO_IN",
                    "IO_OUT"
                  ]
                }
              },
              "allOf": [
                {
                  "if": {
                    "additionalProperties": true,
                    "properties": {
                      "type": {
                        "enum": [
                          "SKIPPED"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "num_skipped"
                    ],
                    "properties": {
                      "type": {},
                      "num_skipped": {
                        "type": "u32",
                        "description": [
                          "Number of unprinted log entries (deleted or below *level* parameter)."
                        ]
                      }
                    }
                  }
                },
                {
                  "if": {
                    "additionalProperties": true,
                    "properties": {
                      "type": {
                        "enum": [
                          "BROKEN",
                          "UNUSUAL",
                          "INFO",
                          "DEBUG",
                          "TRACE"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "time",
                      "source",
                      "log"
                    ],
                    "properties": {
                      "type": {},
                      "time": {
                        "type": "string",
                        "description": [
                          "UNIX timestamp with 9 decimal places after **created_at**."
                        ]
                      },
                      "source": {
                        "type": "string",
                        "description": [
                          "The particular logbook this was found in."
                        ]
                      },
                      "log": {
                        "type": "string",
                        "description": [
                          "The actual log message."
                        ]
                      },
                      "node_id": {
                        "type": "pubkey",
                        "description": [
                          "The peer this is associated with."
                        ]
                      }
                    }
                  }
                },
                {
                  "if": {
                    "additionalProperties": true,
                    "properties": {
                      "type": {
                        "enum": [
                          "IO_IN",
                          "IO_OUT"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "time",
                      "source",
                      "log",
                      "data"
                    ],
                    "properties": {
                      "type": {},
                      "time": {
                        "type": "string",
                        "description": [
                          "Seconds after **created_at**, with 9 decimal places."
                        ]
                      },
                      "source": {
                        "type": "string",
                        "description": [
                          "The particular logbook this was found in."
                        ]
                      },
                      "log": {
                        "type": "string",
                        "description": [
                          "The associated log message."
                        ]
                      },
                      "node_id": {
                        "type": "pubkey",
                        "description": [
                          "The peer this is associated with."
                        ]
                      },
                      "data": {
                        "type": "hex",
                        "description": [
                          "The IO which occurred."
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters."
      ],
      "author": [
        "Vincenzo Palazzo <<vincenzo.palazzo@protonmail.com>> wrote the initial version of this man page,",
        "but many others did the hard work of actually implementing this rpc command."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:getlog#1",
            "method": "getlog",
            "params": {
              "level": "unusual"
            }
          },
          "response": {
            "created_at": "1722303623.956237697",
            "bytes_used": 1723719,
            "bytes_max": 10485760,
            "log": [
              {
                "type": "SKIPPED",
                "num_skipped": 2927
              },
              {
                "type": "UNUSUAL",
                "time": "59.598510878",
                "node_id": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                "source": "chan#1",
                "log": "No peer channel with scid=6250403x3681116x19863"
              },
              {
                "type": "SKIPPED",
                "num_skipped": 1183
              },
              {
                "type": "UNUSUAL",
                "time": "71.923794351",
                "node_id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "source": "chan#2",
                "log": "Peer permanent failure in CLOSINGD_COMPLETE: Funding transaction spent (reason=unknown)"
              },
              {
                "type": "SKIPPED",
                "num_skipped": 557
              },
              {
                "type": "BROKEN",
                "time": "89.108598990",
                "source": "plugin-topology",
                "log": "DEPRECATED API USED: listchannels.include_private by \\\"-c:listchannels#114/cln:listchannels#175\\\""
              },
              {
                "type": "SKIPPED",
                "num_skipped": 1246
              },
              {
                "type": "UNUSUAL",
                "time": "95.217065000",
                "source": "plugin-cln-renepay",
                "log": "Failed to update hint channel 111x1x0: Failed to update scid=111x1x0 in the local_gossmods."
              },
              {
                "type": "SKIPPED",
                "num_skipped": 1696
              }
            ]
          }
        }
      ]
    },
    "lightning-getroute.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "getroute",
      "title": "Command for routing a payment (low-level)",
      "description": [
        "The **getroute** RPC command attempts to find the best route for the payment of *amount_msat* to lightning node *id*, such that the payment will arrive at *id* with *cltv*.",
        "",
        "There are two considerations for how good a route is: how low the fees are, and how long your payment will get stuck in a delayed output if a node goes down during the process. ."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [
          "id",
          "amount_msat",
          "riskfactor"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "Node pubkey to find the best route for the payment."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "Amount to send. It can be a whole number, or a whole number ending in *msat* or *sat*, or a number with three decimal places ending in *sat*, or a number with 1 to 11 decimal places ending in *btc*. The 0 value is special: it ignores any *htlc_minimum_msat* setting on channels, and simply returns a possible route (if any) which is useful for simple probing."
            ]
          },
          "riskfactor": {
            "type": "u64",
            "description": [
              "A non-negative floating-point field controls this tradeoff; it is the annual cost of your funds being stuck (as a percentage). For example, if you thought the convenience of keeping your funds liquid (not stuck) was worth 20% per annum interest, *riskfactor* would be 20. If you didn't care about risk, *riskfactor* would be zero."
            ]
          },
          "cltv": {
            "type": "u32",
            "description": [
              "Cltv-blocks to spare."
            ],
            "default": "9"
          },
          "fromid": {
            "type": "pubkey",
            "description": [
              "The node to start the route from."
            ],
            "default": "this node"
          },
          "fuzzpercent": {
            "type": "u32",
            "description": [
              "Used to distort fees to provide some randomization to the route generated, but it was not properly implemented and is ignored."
            ]
          },
          "exclude": {
            "type": "array",
            "description": [
              "A JSON array of short-channel-id/direction (e.g. ['564334x877x1/0', '564195x1292x0/1' ]) or node-id which should be excluded from consideration for routing. Note if the source or destination is excluded, the command result is undefined."
            ],
            "default": "not to exclude any channels or nodes",
            "items": {
              "type": "string"
            }
          },
          "maxhops": {
            "type": "u32",
            "description": [
              "The maximum number of channels to return."
            ],
            "default": "20"
          }
        }
      },
      "response": {
        "required": [
          "route"
        ],
        "properties": {
          "route": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "direction",
                "channel",
                "amount_msat",
                "delay",
                "style"
              ],
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "pubkey",
                  "description": [
                    "The node at the end of this hop."
                  ]
                },
                "channel": {
                  "type": "short_channel_id",
                  "description": [
                    "The channel joining these nodes."
                  ]
                },
                "direction": {
                  "type": "u32",
                  "description": [
                    "0 if this channel is traversed from lesser to greater **id**, otherwise 1."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount expected by the node at the end of this hop."
                  ]
                },
                "delay": {
                  "type": "u32",
                  "description": [
                    "The total CLTV expected by the node at the end of this hop."
                  ]
                },
                "style": {
                  "type": "string",
                  "description": [
                    "The features understood by the destination node."
                  ],
                  "enum": [
                    "tlv"
                  ]
                }
              }
            }
          }
        },
        "post_return_value_notes": [
          "The final *id* will be the destination *id* given in the input. The difference between the first *amount_msat* minus the *amount_msat* given in the input is the fee (assuming the first hop is free). The first *delay* is the very worst case timeout for the payment failure, in blocks."
        ]
      },
      "riskfactor_effect_on_routing": [
        "The risk factor is treated as if it were an additional fee on the route, for the purposes of comparing routes.",
        "",
        "The formula used is the following approximation:",
        "",
        "    risk-fee = amount x blocks-timeout x per-block-cost",
        "",
        "We are given a *riskfactor* expressed as a percentage. There are 52596 blocks per year, thus *per-block-cost* is *riskfactor* divided by 5,259,600.",
        "",
        "The final result is:",
        "",
        "    risk-fee = amount x blocks-timeout x riskfactor / 5259600",
        "",
        "Here are the risk fees in millisatoshis, using various parameters. I assume a channel charges the default of 1000 millisatoshis plus 1 part-per-million. Common to_self_delay values on the network at 14 and 144 blocks.",
        "",
        "<table>",
        "<colgroup>",
        "<col style=\"width: 20%\" />",
        "<col style=\"width: 20%\" />",
        "<col style=\"width: 20%\" />",
        "<col style=\"width: 20%\" />",
        "<col style=\"width: 20%\" />",
        "</colgroup>",
        "<thead>",
        "<tr class=\"header\">",
        "<th style=\"text-align: left;\">Amount (msat)</th>",
        "<th style=\"text-align: left;\">Riskfactor</th>",
        "<th style=\"text-align: left;\">Delay</th>",
        "<th style=\"text-align: left;\">Risk Fee</th>",
        "<th style=\"text-align: left;\">Route fee</th>",
        "</tr>",
        "</thead>",
        "<tbody>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>10,000</p></td>",
        "<td style=\"text-align: left;\"><p>1</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>0</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>10,000</p></td>",
        "<td style=\"text-align: left;\"><p>10</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>0</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>10,000</p></td>",
        "<td style=\"text-align: left;\"><p>100</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>2</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>10,000</p></td>",
        "<td style=\"text-align: left;\"><p>1000</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>26</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>1,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>1</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>2</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>1,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>10</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>26</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>1,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>100</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>266</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>1,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>1000</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>2661</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>100,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>1</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>266</p></td>",
        "<td style=\"text-align: left;\"><p>1100</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>100,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>10</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>2661</p></td>",
        "<td style=\"text-align: left;\"><p>1100</p></td>",
        "</tr>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>100,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>100</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>26617</p></td>",
        "<td style=\"text-align: left;\"><p>1100</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>100,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>1000</p></td>",
        "<td style=\"text-align: left;\"><p>14</p></td>",
        "<td style=\"text-align: left;\"><p>266179</p></td>",
        "<td style=\"text-align: left;\"><p>1100</p></td>",
        "</tr>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>10,000</p></td>",
        "<td style=\"text-align: left;\"><p>1</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>0</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>10,000</p></td>",
        "<td style=\"text-align: left;\"><p>10</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>2</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>10,000</p></td>",
        "<td style=\"text-align: left;\"><p>100</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>27</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>10,000</p></td>",
        "<td style=\"text-align: left;\"><p>1000</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>273</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>1,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>1</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>27</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>1,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>10</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>273</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>1,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>100</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>2737</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>1,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>1000</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>27378</p></td>",
        "<td style=\"text-align: left;\"><p>1001</p></td>",
        "</tr>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>100,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>1</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>2737</p></td>",
        "<td style=\"text-align: left;\"><p>1100</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>100,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>10</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>27378</p></td>",
        "<td style=\"text-align: left;\"><p>1100</p></td>",
        "</tr>",
        "<tr class=\"odd\">",
        "<td style=\"text-align: left;\"><p>100,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>100</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>273785</p></td>",
        "<td style=\"text-align: left;\"><p>1100</p></td>",
        "</tr>",
        "<tr class=\"even\">",
        "<td style=\"text-align: left;\"><p>100,000,000</p></td>",
        "<td style=\"text-align: left;\"><p>1000</p></td>",
        "<td style=\"text-align: left;\"><p>144</p></td>",
        "<td style=\"text-align: left;\"><p>2737850</p></td>",
        "<td style=\"text-align: left;\"><p>1100</p></td>",
        "</tr>",
        "</tbody>",
        "</table>"
      ],
      "recommended_riskfactor_values": [
        "The default *fuzz* factor is 5%, so as you can see from the table above, that tends to overwhelm the effect of *riskfactor* less than about 5.",
        "",
        "1 is a conservative value for a stable lightning network with very few failures.",
        "",
        "1000 is an aggressive value for trying to minimize timeouts at all costs.",
        "",
        "The default for lightning-pay(7) is 10, which starts to become a major factor for larger amounts, and is basically ignored for tiny ones."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-pay(7)",
        "lightning-sendpay(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:getroute#1",
            "method": "getroute",
            "params": {
              "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
              "amount_msat": 10000,
              "riskfactor": 1
            }
          },
          "response": {
            "route": [
              {
                "id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "channel": "109x1x1",
                "direction": 1,
                "amount_msat": 10001,
                "delay": 15,
                "style": "tlv"
              },
              {
                "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "channel": "111x1x0",
                "direction": 0,
                "amount_msat": 10000,
                "delay": 9,
                "style": "tlv"
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:getroute#2",
            "method": "getroute",
            "params": {
              "id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
              "amount_msat": 500000,
              "riskfactor": 10,
              "cltv": 9
            }
          },
          "response": {
            "route": [
              {
                "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "channel": "111x1x0",
                "direction": 0,
                "amount_msat": 500006,
                "delay": 15,
                "style": "tlv"
              },
              {
                "id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "channel": "113x1x1",
                "direction": 0,
                "amount_msat": 500000,
                "delay": 9,
                "style": "tlv"
              }
            ]
          }
        }
      ]
    },
    "lightning-getroutes.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "getroutes",
      "title": "Command for routing a payment (EXPERIMENTAL)",
      "added": "v24.08",
      "description": [
        "WARNING: experimental, so API may change.",
        "",
        "The **getroutes** RPC command attempts to find the best set of paths for the payment from *source* to *destination* of *amount_msat*, using the given *layers* on top of the gossip information.  The result is constrained by *maxfee*, and will arrive at the destination with *final_cltv*.",
        "",
        "NOTE: The returned paths are a different format then *getroute*, being more appropriate for creating intermediary onion layers.",
        "",
        "Layers are generally maintained by plugins, either to contain persistent information about capacities which have been discovered, or to contain transient information for this particular payment (such as blinded paths or routehints).",
        "",
        "There are two automatic layers: *auto.localchans* contains information on local channels from this node (including non-public ones), and their exact current spendable capacities, and *auto.sourcefree* overrides all channels leading out of the *source* to be zero fee and zero delay.  These are both useful in the case where the source is the current node."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [
          "source",
          "destination",
          "amount_msat",
          "layers",
          "maxfee_msat",
          "final_cltv"
        ],
        "properties": {
          "source": {
            "type": "pubkey",
            "description": [
              "Node pubkey to start the paths"
            ]
          },
          "destination": {
            "type": "pubkey",
            "description": [
              "Node pubkey to end the paths"
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "Amount to send. It can be a whole number, or a whole number ending in *msat* or *sat*, or a number with three decimal places ending in *sat*, or a number with 1 to 11 decimal places ending in *btc*."
            ]
          },
          "layers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": [
                "Layer to apply to the gossip map before attempting to find routes."
              ]
            }
          },
          "maxfee_msat": {
            "type": "msat",
            "description": [
              "Maximum fee to spend: we will never return a set of routes more expensive than this. It can be a whole number, or a whole number ending in *msat* or *sat*, or a number with three decimal places ending in *sat*, or a number with 1 to 11 decimal places ending in *btc*."
            ]
          },
          "final_cltv": {
            "type": "u32",
            "description": [
              "Number of blocks for the final node.  We need to know this because no HTLC is allowed to have a CLTV delay more than 2016 blocks."
            ]
          }
        }
      },
      "response": {
        "required": [
          "probability_ppm",
          "routes"
        ],
        "properties": {
          "probability_ppm": {
            "type": "u64",
            "description": [
              "The estimated probability of success using these routes, in millionths."
            ]
          },
          "routes": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "probability_ppm",
                "amount_msat",
                "final_cltv",
                "path"
              ],
              "properties": {
                "probability_ppm": {
                  "type": "u64",
                  "description": [
                    "The estimated probability of success using this route, in millionths."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount delivered to the *destination* by this path."
                  ]
                },
                "final_cltv": {
                  "type": "u32",
                  "description": [
                    "Number of blocks required by the final node (set by caller)"
                  ]
                },
                "path": {
                  "type": "array",
                  "description": [
                    "The hops to get from *source* to *destination*."
                  ],
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "short_channel_id",
                      "direction",
                      "next_node_id",
                      "amount_msat",
                      "delay"
                    ],
                    "properties": {
                      "short_channel_id": {
                        "type": "short_channel_id",
                        "description": [
                          "The channel joining these nodes."
                        ]
                      },
                      "direction": {
                        "type": "u32",
                        "description": [
                          "0 if this channel is traversed from lesser to greater **id**, otherwise 1."
                        ]
                      },
                      "amount_msat": {
                        "type": "msat",
                        "description": [
                          "The amount to send into this hop."
                        ]
                      },
                      "next_node_id": {
                        "type": "pubkey",
                        "description": [
                          "The peer id at the end of this hop."
                        ]
                      },
                      "delay": {
                        "type": "u32",
                        "description": [
                          "The total CLTV expected by the node at the start of this hop."
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "author": [
        "<<lagrang3@protonmail.com>> wrote the minimum-cost-flow solver, Rusty Russell <<rusty@rustcorp.com.au>> wrote the API and this documentation."
      ],
      "see_also": [
        "lightning-askrene-reserve(7)",
        "lightning-askrene-unreserve(7)",
        "lightning-askrene-disable-node(7)",
        "lightning-askrene-create-channel(7)",
        "lightning-askrene-inform-channel(7)",
        "lightning-askrene-report(7)",
        "lightning-askrene-age(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ]
    },
    "lightning-help.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "help",
      "title": "Command to return all information about RPC commands.",
      "description": [
        "The **help** is a RPC command which is possible consult all information about the RPC commands, or a specific command if *command* is given.",
        "",
        "Note that the lightning-cli(1) tool will prefer to list a man page when a specific *command* is specified, and will only return the JSON if the man page is not found."
      ],
      "request": {
        "required": [],
        "properties": {
          "command": {
            "type": "string",
            "description": [
              "Command to get information about."
            ]
          }
        }
      },
      "response": {
        "required": [
          "help"
        ],
        "properties": {
          "help": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "command"
              ],
              "properties": {
                "command": {
                  "type": "string",
                  "description": [
                    "The command."
                  ]
                }
              }
            }
          },
          "format-hint": {
            "type": "string",
            "enum": [
              "simple"
            ],
            "description": [
              "Prints the help in human-readable flat form."
            ]
          }
        }
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters."
      ],
      "author": [
        "Vincenzo Palazzo <<vincenzo.palazzo@protonmail.com>> wrote the initial version of this man page,",
        "but many others did the hard work of actually implementing this rpc command."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:help#1",
            "method": "help",
            "params": {
              "command": "pay"
            }
          },
          "response": {
            "help": [
              {
                "command": "pay bolt11 [amount_msat] [label] [riskfactor] [maxfeepercent] [retry_for] [maxdelay] [exemptfee] [localinvreqid] [exclude] [maxfee] [description] [partial_msat] [dev_use_shadow]"
              }
            ],
            "format-hint": "simple"
          }
        },
        {
          "request": {
            "id": "example:help#2",
            "method": "help",
            "params": {
              "command": "dev"
            }
          },
          "response": {
            "help": [
              {
                "command": "dev subcommand=crash|rhash|slowcmd"
              }
            ],
            "format-hint": "simple"
          }
        }
      ]
    },
    "lightning-invoice.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "invoice",
      "title": "Command for accepting payments",
      "description": [
        "The **invoice** RPC command creates the expectation of a payment of a given amount of milli-satoshi: it returns a unique token which another lightning daemon can use to pay this invoice. This token includes a *route hint* description of an incoming channel with capacity to pay the invoice, if any exists."
      ],
      "request": {
        "required": [
          "amount_msat",
          "label",
          "description"
        ],
        "properties": {
          "amount_msat": {
            "type": "msat_or_any",
            "description": [
              "The string `any`, which creates an invoice that can be paid with any amount. Otherwise it is a positive value in millisatoshi precision; it can be a whole number, or a whole number ending in *msat* or *sat*, or a number with three decimal places ending in *sat*, or a number with 1 to 11 decimal places ending in *btc*."
            ]
          },
          "label": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "description": [
              "A unique string or number (which is treated as a string, so `01` is different from `1`); it is never revealed to other nodes on the lightning network, but it can be used to query the status of this invoice."
            ]
          },
          "description": {
            "type": "string",
            "description": [
              "A short description of purpose of payment, e.g. *1 cup of coffee*. This value is encoded into the BOLT11 invoice and is viewable by any node you send this invoice to (unless *deschashonly* is true as described below). It must be UTF-8, and cannot use *\\u* JSON escape codes."
            ]
          },
          "expiry": {
            "type": "u64",
            "description": [
              "The time the invoice is valid for, in seconds. If no value is provided the default of 604800 (1 week) is used."
            ]
          },
          "fallbacks": {
            "type": "array",
            "description": [
              "One or more fallback addresses to include in the invoice (in order from most- preferred to least): note that these arrays are not currently tracked to fulfill the invoice."
            ],
            "items": {
              "type": "string"
            }
          },
          "preimage": {
            "type": "hex",
            "description": [
              "A 64-digit hex string to be used as payment preimage for the created invoice. By default, if unspecified, lightningd will generate a secure pseudorandom preimage seeded from an appropriate entropy source on your system. **IMPORTANT**: if you specify the *preimage*, you are responsible, to ensure appropriate care for generating using a secure pseudorandom generator seeded with sufficient entropy, and keeping the preimage secret. This parameter is an advanced feature intended for use with cutting-edge cryptographic protocols and should not be used unless explicitly needed."
            ]
          },
          "exposeprivatechannels": {
            "description": [
              "If specified, it overrides the default route hint logic, which will use unpublished channels only if there are no published channels."
            ],
            "oneOf": [
              {
                "type": "boolean",
                "description": [
                  "If *True* unpublished channels are always considered as a route hint candidate; if *False*, never."
                ]
              },
              {
                "type": "array",
                "description": [
                  "Array of short channel ids (or a remote alias), only those specific channels will be considered candidates, even if they are public or dead-ends."
                ],
                "items": {
                  "type": "short_channel_id"
                }
              },
              {
                "type": "short_channel_id",
                "description": [
                  "If it is a short channel id (e.g. *1x1x3*), only this specific channel will be considered candidate, even if it is public or dead-end."
                ]
              }
            ]
          },
          "cltv": {
            "type": "u32",
            "description": [
              "If specified, sets the *min_final_cltv_expiry* for the invoice. Otherwise, it's set to the parameter **cltv-final**."
            ]
          },
          "deschashonly": {
            "type": "boolean",
            "description": [
              "If True, then the bolt11 returned contains a hash of the *description*, rather than the *description* itself: this allows much longer descriptions, but they must be communicated via some other mechanism."
            ],
            "default": "False"
          }
        }
      },
      "response": {
        "required": [
          "payment_hash",
          "expires_at",
          "created_index",
          "bolt11",
          "payment_secret"
        ],
        "properties": {
          "bolt11": {
            "type": "string",
            "description": [
              "The bolt11 string."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "payment_secret": {
            "type": "secret",
            "description": [
              "The *payment_secret* to place in the onion."
            ]
          },
          "expires_at": {
            "type": "u64",
            "description": [
              "UNIX timestamp of when invoice expires."
            ]
          },
          "created_index": {
            "type": "u64",
            "added": "v23.08",
            "description": [
              "1-based index indicating order this invoice was created in."
            ]
          },
          "warning_capacity": {
            "type": "string",
            "description": [
              "Even using all possible channels, there's not enough incoming capacity to pay this invoice."
            ]
          },
          "warning_offline": {
            "type": "string",
            "description": [
              "There would be enough incoming capacity, but some channels are offline, so there isn't."
            ]
          },
          "warning_deadends": {
            "type": "string",
            "description": [
              "There would be enough incoming capacity, but some channels are dead-ends (no other public channels from those peers), so there isn't."
            ]
          },
          "warning_private_unused": {
            "type": "string",
            "description": [
              "There would be enough incoming capacity, but some channels are unannounced and *exposeprivatechannels* is *false*, so there isn't."
            ]
          },
          "warning_mpp": {
            "type": "string",
            "description": [
              "There is sufficient capacity, but not in a single channel, so the payer will have to use multi-part payments."
            ]
          }
        }
      },
      "errors": [
        "On failure, an error is returned and no invoice is created. If the",
        "lightning process fails before responding, the caller should use",
        "lightning-listinvoices(7) to query whether this invoice was created or",
        "not.",
        "",
        "The following error codes may occur:",
        "",
        "- -1: Catchall nonspecific error.",
        "- 900: An invoice with the given *label* already exists.",
        "- 901: An invoice with the given *preimage* already exists.",
        "- 902: None of the specified *exposeprivatechannels* were usable."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listinvoices(7)",
        "lightning-delinvoice(7)",
        "lightning-pay(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:invoice#1",
            "method": "invoice",
            "params": {
              "amount_msat": 10000,
              "label": "lbl_l31",
              "description": "Invoice description l31"
            }
          },
          "response": {
            "payment_hash": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2",
            "expires_at": 1722908474,
            "bolt11": "lnbcrt100n1pn2s396sp5v3en0qa3rrljw4m0wtz88sx99q20rarufhjpfysefhwhs42gvqjqpp56kvvl33d594nsxu0hzhesvazgqzlwv89fnpjcvtlanz3rl7x623qdp9f9h8vmmfvdjjqer9wd3hy6tsw35k7m3qdsenzxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgq7za6z8kx2k5nul45zwttfz2njx3836v69mxqsl4ty9228pyjrkfnkymysy8ygsrrje9qf6j4tpalt5qkqusfp2esrsqc5ak7t4yzajgpezef54",
            "payment_secret": "64733783b118ff27576f72c473c0c52814f1f47c4de41492194ddd7855486024",
            "created_index": 2
          }
        },
        {
          "request": {
            "id": "example:invoice#2",
            "method": "invoice",
            "params": {
              "amount_msat": "50000msat",
              "label": "lbl_l32",
              "description": "l32 description"
            }
          },
          "response": {
            "payment_hash": "788aea729ede48d315a199ce5ded76169601a61dd52e9734e707eb7c52e4e79e",
            "expires_at": 1722908474,
            "bolt11": "lnbcrt500n1pn2s396sp5h5tz6fpm3dxvrlwcnwmfq85v45wfj43mdmplpce6ku2vmfdhrx5qpp50z9w5u57meydx9dpn889mmtkz6tqrfsa65hfwd88ql4hc5hyu70qdqcdsenygryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqt5m8qx0t25a0gygya7u4sxulyyp2dec87pwsxuuwtg0u66c07703g9j6vlwgmlhqk7qgn95qw7allhnuj2m9hf0xkcr2zkaxltv3t6gqjcdpll",
            "payment_secret": "bd162d243b8b4cc1fdd89bb6901e8cad1c99563b6ec3f0e33ab714cda5b719a8",
            "created_index": 3
          }
        }
      ]
    },
    "lightning-invoicerequest.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v22.11",
      "rpc": "invoicerequest",
      "title": "Command for offering payments",
      "warning": "experimental-offers only",
      "description": [
        "The **invoicerequest** RPC command creates an `invoice_request` to send payments: it automatically enables the processing of an incoming invoice, and payment of it. The reader of the resulting `invoice_request` can use lightning-sendinvoice(7) to collect their payment."
      ],
      "request": {
        "required": [
          "amount",
          "description"
        ],
        "properties": {
          "amount": {
            "type": "msat",
            "description": [
              "A positive value in millisatoshi precision; it can be a whole number, or a whole number ending in *msat* or *sat*, or a number with three decimal places ending in *sat*, or a number with 1 to 11 decimal places ending in *btc*."
            ]
          },
          "description": {
            "type": "string",
            "description": [
              "A short description of purpose of the payment, e.g. *ATM withdrawl*. This value is encoded into the resulting `invoice_request` and is viewable by anyone you expose it to. It must be UTF-8, and cannot use *\\u* JSON escape codes."
            ]
          },
          "issuer": {
            "type": "string",
            "description": [
              "Who is issuing it (i.e. you) if appropriate."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "An internal-use name for the offer, which can be any UTF-8 string."
            ]
          },
          "absolute_expiry": {
            "type": "u64",
            "description": [
              "The time the offer is valid until, in seconds since the first day of 1970 UTC. If not set, the `invoice_request` remains valid (though it can be deactivated by the issuer of course). This is encoded in the `invoice_request`."
            ]
          },
          "single_use": {
            "type": "boolean",
            "description": [
              "Indicates that the `invoice_request` is only valid once; we may attempt multiple payments, but as soon as one is successful no more invoices are accepted (i.e. only one person can take the money)."
            ],
            "default": "True"
          }
        }
      },
      "response": {
        "required": [
          "invreq_id",
          "single_use",
          "active",
          "bolt12",
          "used"
        ],
        "properties": {
          "invreq_id": {
            "type": "hash",
            "description": [
              "The SHA256 hash of all invoice_request fields less than 160."
            ]
          },
          "active": {
            "type": "boolean",
            "enum": [
              true
            ],
            "description": [
              "Whether the invoice_request is currently active."
            ]
          },
          "single_use": {
            "type": "boolean",
            "description": [
              "Whether the invoice_request will become inactive after we pay an invoice for it."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The bolt12 string starting with lnr."
            ]
          },
          "used": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": [
              "Whether the invoice_request has already been used."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "The label provided when creating the invoice_request."
            ]
          }
        }
      },
      "errors": [
        "On failure, an error is returned and no `invoice_request` is created. If the lightning process fails before responding, the caller should use lightning-listinvoicerequests(7) to query whether it was created or not.",
        "",
        "- -1: Catchall nonspecific error."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listinvoicerequests(7)",
        "lightning-disableinvoicerequest(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:invoicerequest#1",
            "method": "invoicerequest",
            "params": {
              "amount": 1000000,
              "description": "Simple test"
            }
          },
          "response": {
            "invreq_id": "93f193cd2432d292f8b64af08942989d71c0a0366fb52d57ddb688c8fb066399",
            "active": true,
            "single_use": true,
            "bolt12": "lnr1qqgypua5g7rp293k00s66ayvnv26czst2d5k6urvv5s8getnw3gzqp3zderpzxstt8927ynqg044h0egcd8n5h3n9g0u0v4h8ncc3yg02gps7sjqtqssytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82e7pq947t0ks7a4yejz8w79x4zj25s3pu6zrnw2e0v2ugdescpcqsq307z4p2dlxe92fv7xd43qut0pjkg4y094hupqyhsj8dlhvmmfng6sv",
            "used": false
          }
        },
        {
          "request": {
            "id": "example:invoicerequest#2",
            "method": "invoicerequest",
            "params": {
              "amount": "10000sat",
              "description": "Requesting for invoice",
              "issuer": "clightning store"
            }
          },
          "response": {
            "invreq_id": "a621a0e8e8ea9aa97fd47ab9b140e413be7f4ea45377617e693eb7afe5a3dbf9",
            "active": true,
            "single_use": true,
            "bolt12": "lnr1qqgx5t5hcw5ru9fgkhgxj4thjq4ugzsk2fjhzat9wd6xjmn8ypnx7u3qd9h8vmmfvdj3yyrrd35kw6r5de5kueeqwd6x7un92qsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzr6jqwvfdqzcyypz6g3kyz34nfrl7lm6c3rushzxey3a55ecjgs6qp2vz8q78j336k0sgpvamrunx5t6vdaeu7nmmlh5u6f0dnscasy2alyxq79f5wnc043gxrzyqt640dmuj7c94644j5ae6wfse7tsejwqnmc575ly9t38h4hf",
            "used": false
          }
        }
      ]
    },
    "lightning-keysend.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "keysend",
      "title": "Send funds to a node without an invoice",
      "description": [
        "The **keysend** RPC command attempts to find a route to the given destination, and send the specified amount to it. Unlike the `pay` RPC command the `keysend` command does not require an invoice, instead it uses the `destination` node ID, and `amount` to find a route to the specified node.",
        "",
        "In order for the destination to be able to claim the payment, the `payment_key` is randomly generated by the sender and included in the encrypted payload for the destination. As a consequence there is not proof-of-payment, like there is with an invoice where the `payment_key` is generated on the destination, and the only way sender could have it is by sending a payment. Please ensure that this matches your use-case when using `keysend`.",
        "",
        "When using *lightning-cli*, you may skip optional parameters by using *null*. Alternatively, use **-k** option to provide parameters by name."
      ],
      "request": {
        "required": [
          "destination",
          "amount_msat"
        ],
        "properties": {
          "destination": {
            "type": "pubkey",
            "description": [
              "The 33 byte, hex-encoded, node ID of the node that the payment should go to."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "A whole number, or a whole number with suffix `msat` or `sat`, or a three decimal point number with suffix `sat`, or an 1 to 11 decimal point number suffixed by `btc`."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "Used to attach a label to payments, and is returned in lightning-listpays(7) and lightning-listsendpays(7)."
            ]
          },
          "maxfeepercent": {
            "type": "number",
            "description": [
              "Limits the money paid in fees as percentage of the total amount that is to be transferred."
            ],
            "default": "0.5"
          },
          "retry_for": {
            "type": "u32",
            "description": [
              "Until *retry_for* seconds passes, the command will keep finding routes and retrying the payment. However, a payment may be delayed for up to `maxdelay` blocks by another node; clients should be prepared for this worst case."
            ],
            "default": "60 seconds"
          },
          "maxdelay": {
            "type": "u32",
            "description": [
              "Number of blocks the payment may be delayed."
            ]
          },
          "exemptfee": {
            "type": "msat",
            "description": [
              "Used for tiny payments which would be dominated by the fee leveraged by forwarding nodes. Setting `exemptfee` allows the `maxfeepercent` check to be skipped on fees that are smaller than *exemptfee*."
            ],
            "default": "5000 millisatoshi"
          },
          "routehints": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "id",
                  "scid",
                  "feebase",
                  "feeprop",
                  "expirydelta"
                ],
                "properties": {
                  "id": {
                    "type": "pubkey"
                  },
                  "scid": {
                    "type": "short_channel_id"
                  },
                  "feebase": {
                    "type": "msat"
                  },
                  "feeprop": {
                    "type": "u32"
                  },
                  "expirydelta": {
                    "type": "u16"
                  }
                }
              }
            }
          },
          "extratlvs": {
            "type": "object",
            "additionalProperties": true,
            "required": [],
            "description": [
              "Dictionary of additional fields to insert into the final tlv. The format is 'fieldnumber': 'hexstring'."
            ]
          }
        }
      },
      "response": {
        "required": [
          "payment_preimage",
          "payment_hash",
          "created_at",
          "parts",
          "amount_msat",
          "amount_sent_msat",
          "status"
        ],
        "properties": {
          "payment_preimage": {
            "type": "secret",
            "description": [
              "The proof of payment: SHA256 of this **payment_hash**."
            ]
          },
          "destination": {
            "type": "pubkey",
            "description": [
              "The final destination of the payment."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "created_at": {
            "type": "number",
            "description": [
              "The UNIX timestamp showing when this payment was initiated."
            ]
          },
          "parts": {
            "type": "u32",
            "description": [
              "How many attempts this took."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "Amount the recipient received."
            ]
          },
          "amount_sent_msat": {
            "type": "msat",
            "description": [
              "Total amount we sent (including fees)."
            ]
          },
          "warning_partial_completion": {
            "type": "string",
            "description": [
              "Not all parts of a multi-part payment have completed."
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "complete"
            ],
            "description": [
              "Status of payment."
            ]
          }
        },
        "post_return_value_notes": [
          "You can monitor the progress and retries of a payment using the lightning-paystatus(7) command."
        ]
      },
      "randomization": [
        "To protect user privacy, the payment algorithm performs some randomization.",
        "",
        "1: Route Randomization",
        "",
        "Route randomization means the payment algorithm does not always use the lowest-fee or shortest route. This prevents some highly-connected node from learning all of the user payments by reducing their fees below the network average.",
        "",
        "2: Shadow Route",
        "",
        "Shadow route means the payment algorithm will virtually extend the route by adding delays and fees along it, making it appear to intermediate nodes that the route is longer than it actually is. This prevents intermediate nodes from reliably guessing their distance from the payee.",
        "",
        "Route randomization will never exceed *maxfeepercent* of the payment. Route randomization and shadow routing will not take routes that would exceed *maxdelay*."
      ],
      "errors": [
        "The following error codes may occur:",
        "",
        "- -1: Catchall nonspecific error.",
        "- 203: Permanent failure at destination. The *data* field of the error will be routing failure object.",
        "- 205: Unable to find a route.",
        "- 206: Route too expensive. Either the fee or the needed total locktime for the route exceeds your *maxfeepercent* or *maxdelay* settings, respectively. The *data* field of the error will indicate the actual *fee* as well as the *feepercent* percentage that the fee has of the destination payment amount. It will also indicate the actual *delay* along the route.",
        "- 210: Payment timed out without a payment in progress.",
        "",
        "A routing failure object has the fields below:",
        "",
        "*erring_index*: The index of the node along the route that reported the error. 0 for the local node, 1 for the first hop, and so on.",
        "*erring_node*: The hex string of the pubkey id of the node that reported the error.",
        "*erring_channel*: The short channel ID of the channel that has the error, or *0:0:0* if the destination node raised the error.",
        "*failcode*: The failure code, as per BOLT #4.",
        "*channel_update*: The hex string of the *channel_update* message received from the remote node. Only present if error is from the remote node and the *failcode* has the `UPDATE` bit set, as per BOLT #4."
      ],
      "author": [
        "Christian Decker <<decker@blockstream.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listpays(7)",
        "lightning-decodepay(7)",
        "lightning-listinvoices(7)",
        "lightning-delinvoice(7)",
        "lightning-getroute(7)",
        "lightning-invoice(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:keysend#1",
            "method": "keysend",
            "params": {
              "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
              "amount_msat": 10000
            }
          },
          "response": {
            "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
            "payment_hash": "80ff407792947a23f193f9a1968e9a437b071364ae3159f83631335c9a453c1b",
            "created_at": 1722303677.1300898,
            "parts": 1,
            "amount_msat": 10000,
            "amount_sent_msat": 10001,
            "payment_preimage": "0d802c9c611bae611d51afa8ddf396df8ba4e0580a2eccfd1120da97e70482a0",
            "status": "complete"
          }
        },
        {
          "request": {
            "id": "example:keysend#2",
            "method": "keysend",
            "params": {
              "destination": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
              "amount_msat": 10000000,
              "extratlvs": {
                "133773310": "68656c6c6f776f726c64",
                "133773312": "66696c7465726d65"
              }
            }
          },
          "response": {
            "destination": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
            "payment_hash": "3b80a3028343b16f8ab7261343eae40ff73ba833b0b7d4dcbfd42a3078dc322b",
            "created_at": 1722303679.3164163,
            "parts": 1,
            "amount_msat": 10000000,
            "amount_sent_msat": 10000202,
            "payment_preimage": "f76d6b7ef362f33e25eb5571e616f6e539a2c77caf0afa4227d1351546823664",
            "status": "complete"
          }
        },
        {
          "request": {
            "id": "example:keysend#3",
            "method": "keysend",
            "params": {
              "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
              "amount_msat": 10000,
              "routehints": [
                [
                  {
                    "scid": "6250403x3681116x19863",
                    "id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                    "feebase": "1msat",
                    "feeprop": 10,
                    "expirydelta": 9
                  }
                ]
              ]
            }
          },
          "response": {
            "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
            "payment_hash": "0458c01fdd3aa0b9829002390301f92083e78dc27bb293bc3e7caee5d4ed7259",
            "created_at": 1722303682.5805738,
            "parts": 2,
            "amount_msat": 10000,
            "amount_sent_msat": 10001,
            "payment_preimage": "4dad6dcf625f650a35a8199fbda18ea4f6717cdfadb40e6bed2bf5f96a4742b0",
            "status": "complete"
          }
        }
      ]
    },
    "lightning-listchannels.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listchannels",
      "title": "Command to query active lightning channels in the entire network",
      "description": [
        "The **listchannels** RPC command returns data on channels that are known to the node. Because channels may be bidirectional, up to 2 objects will be returned for each channel (one for each direction).",
        "",
        "Only one of *short_channel_id*, *source* or *destination* can be supplied. If nothing is supplied, data on all lightning channels known to this node, are returned. These can be local channels or public channels broadcast on the gossip network."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "short_channel_id": {
            "type": "short_channel_id",
            "description": [
              "If short_channel_id is a short channel id, then only known channels with a matching short_channel_id are returned. Otherwise, it must be null."
            ]
          },
          "source": {
            "type": "pubkey",
            "description": [
              "If source is a node id, then only channels leading from that node id are returned."
            ]
          },
          "destination": {
            "type": "pubkey",
            "description": [
              "If destination is a node id, then only channels leading to that node id are returned."
            ]
          }
        }
      },
      "response": {
        "required": [
          "channels"
        ],
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "source",
                "destination",
                "short_channel_id",
                "direction",
                "public",
                "amount_msat",
                "message_flags",
                "channel_flags",
                "active",
                "last_update",
                "base_fee_millisatoshi",
                "fee_per_millionth",
                "delay",
                "htlc_minimum_msat",
                "features"
              ],
              "properties": {
                "source": {
                  "type": "pubkey",
                  "description": [
                    "The source node."
                  ]
                },
                "destination": {
                  "type": "pubkey",
                  "description": [
                    "The destination node."
                  ]
                },
                "short_channel_id": {
                  "type": "short_channel_id",
                  "description": [
                    "Short channel id of channel."
                  ]
                },
                "direction": {
                  "type": "u32",
                  "description": [
                    "Direction (0 if source < destination, 1 otherwise)."
                  ]
                },
                "public": {
                  "type": "boolean",
                  "description": [
                    "True if this is announced (from *v24.02*, being false is deprecated)."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "The total capacity of this channel (always a whole number of satoshis)."
                  ]
                },
                "message_flags": {
                  "type": "u8",
                  "description": [
                    "As defined by BOLT #7."
                  ]
                },
                "channel_flags": {
                  "type": "u8",
                  "description": [
                    "As defined by BOLT #7."
                  ]
                },
                "active": {
                  "type": "boolean",
                  "description": [
                    "True unless source has disabled it (or (deprecated in *v24.02*) it's a local channel and the peer is disconnected or it's still opening or closing)."
                  ]
                },
                "last_update": {
                  "type": "u32",
                  "description": [
                    "UNIX timestamp on the last channel_update from *source*."
                  ]
                },
                "base_fee_millisatoshi": {
                  "type": "u32",
                  "description": [
                    "Base fee changed by *source* to use this channel."
                  ]
                },
                "fee_per_millionth": {
                  "type": "u32",
                  "description": [
                    "Proportional fee changed by *source* to use this channel, in parts-per-million."
                  ]
                },
                "delay": {
                  "type": "u32",
                  "description": [
                    "The number of blocks delay required by *source* to use this channel."
                  ]
                },
                "htlc_minimum_msat": {
                  "type": "msat",
                  "description": [
                    "The smallest payment *source* will allow via this channel."
                  ]
                },
                "htlc_maximum_msat": {
                  "type": "msat",
                  "description": [
                    "The largest payment *source* will allow via this channel."
                  ]
                },
                "features": {
                  "type": "hex",
                  "description": [
                    "BOLT #9 features bitmap for this channel."
                  ]
                }
              }
            }
          }
        },
        "post_return_value_notes": [
          "If one of *short_channel_id*, *source* or *destination* is supplied and no matching channels are found, a 'channels' object with an empty list is returned."
        ]
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong."
      ],
      "author": [
        "Michael Hawkins <<michael.hawkins@protonmail.com>>."
      ],
      "see_also": [
        "lightning-fundchannel(7)",
        "lightning-listnodes(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>",
        "",
        "BOLT #7: <https://github.com/lightning/bolts/blob/master/07-routing-gossip.md>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listchannels#1",
            "method": "listchannels",
            "params": {
              "short_channel_id": "109x1x1"
            }
          },
          "response": {
            "channels": [
              {
                "source": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "destination": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                "short_channel_id": "109x1x1",
                "direction": 0,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 0,
                "active": true,
                "last_update": 1722303662,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              },
              {
                "source": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "short_channel_id": "109x1x1",
                "direction": 1,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 1,
                "active": true,
                "last_update": 1722303662,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listchannels#2",
            "method": "listchannels",
            "params": {}
          },
          "response": {
            "channels": [
              {
                "source": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "destination": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                "short_channel_id": "109x1x1",
                "direction": 0,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 0,
                "active": true,
                "last_update": 1722303662,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              },
              {
                "source": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "short_channel_id": "109x1x1",
                "direction": 1,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 1,
                "active": true,
                "last_update": 1722303662,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              },
              {
                "source": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "short_channel_id": "111x1x0",
                "direction": 0,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 2,
                "active": false,
                "last_update": 1722303692,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              },
              {
                "source": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "short_channel_id": "111x1x0",
                "direction": 1,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 1,
                "active": true,
                "last_update": 1722303669,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              },
              {
                "source": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "destination": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "short_channel_id": "113x1x1",
                "direction": 0,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 0,
                "active": true,
                "last_update": 1722303669,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              },
              {
                "source": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "short_channel_id": "113x1x1",
                "direction": 1,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 1,
                "active": true,
                "last_update": 1722303669,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              },
              {
                "source": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "short_channel_id": "123x1x1",
                "direction": 0,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 0,
                "active": true,
                "last_update": 1722303711,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              },
              {
                "source": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "short_channel_id": "123x1x1",
                "direction": 1,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 1,
                "active": true,
                "last_update": 1722303711,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              },
              {
                "source": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "destination": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "short_channel_id": "125x1x1",
                "direction": 0,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 0,
                "active": true,
                "last_update": 1722303714,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              },
              {
                "source": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "short_channel_id": "125x1x1",
                "direction": 1,
                "public": true,
                "amount_msat": 1000000000,
                "message_flags": 1,
                "channel_flags": 1,
                "active": true,
                "last_update": 1722303714,
                "base_fee_millisatoshi": 1,
                "fee_per_millionth": 10,
                "delay": 6,
                "htlc_minimum_msat": 0,
                "htlc_maximum_msat": 990000000,
                "features": ""
              }
            ]
          }
        }
      ]
    },
    "lightning-listclosedchannels.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.05",
      "rpc": "listclosedchannels",
      "title": "Get data on our closed historical channels",
      "description": [
        "The **listclosedchannels** RPC command returns data on channels which are otherwise forgotten (more than 100 blocks after they're completely resolved onchain)."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "If no *id* is supplied, then channel data on all historical channels are given. Supplying *id* will filter the results to only match channels to that peer. Note that prior to v23.05, old peers were forgotten."
            ]
          }
        }
      },
      "response": {
        "required": [
          "closedchannels"
        ],
        "properties": {
          "closedchannels": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "channel_id",
                "opener",
                "private",
                "total_msat",
                "total_local_commitments",
                "total_remote_commitments",
                "total_htlcs_sent",
                "funding_txid",
                "funding_outnum",
                "leased",
                "final_to_us_msat",
                "min_to_us_msat",
                "max_to_us_msat",
                "close_cause"
              ],
              "properties": {
                "peer_id": {
                  "type": "pubkey",
                  "description": [
                    "Peer public key (can be missing with pre-v23.05 closes!)."
                  ]
                },
                "channel_id": {
                  "type": "hash",
                  "description": [
                    "The full channel_id (funding txid Xored with output number)."
                  ]
                },
                "short_channel_id": {
                  "type": "short_channel_id",
                  "description": [
                    "The short_channel_id."
                  ]
                },
                "alias": {
                  "type": "object",
                  "required": [],
                  "properties": {
                    "local": {
                      "type": "short_channel_id",
                      "description": [
                        "An alias assigned by this node to this channel, used for outgoing payments."
                      ]
                    },
                    "remote": {
                      "type": "short_channel_id",
                      "description": [
                        "An alias assigned by the remote node to this channel, usable in routehints and invoices."
                      ]
                    }
                  }
                },
                "opener": {
                  "type": "string",
                  "enum": [
                    "local",
                    "remote"
                  ],
                  "description": [
                    "Who initiated the channel."
                  ]
                },
                "closer": {
                  "type": "string",
                  "enum": [
                    "local",
                    "remote"
                  ],
                  "description": [
                    "Who initiated the channel close (only present if closing)."
                  ]
                },
                "private": {
                  "type": "boolean",
                  "description": [
                    "If True, we will not announce this channel."
                  ]
                },
                "channel_type": {
                  "type": "object",
                  "description": [
                    "Channel_type as negotiated with peer."
                  ],
                  "additionalProperties": false,
                  "required": [
                    "bits",
                    "names"
                  ],
                  "properties": {
                    "bits": {
                      "type": "array",
                      "description": [
                        "Each bit set in this channel_type."
                      ],
                      "items": {
                        "type": "u32",
                        "description": [
                          "Bit number."
                        ]
                      }
                    },
                    "names": {
                      "type": "array",
                      "description": [
                        "Feature name for each bit set in this channel_type. Note that *anchors_zero_fee_htlc_tx* is a deprecated synonym for *anchors*."
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "static_remotekey/even",
                          "anchor_outputs/even",
                          "anchors/even",
                          "anchors_zero_fee_htlc_tx/even",
                          "scid_alias/even",
                          "zeroconf/even"
                        ],
                        "description": [
                          "Name of feature bit."
                        ]
                      }
                    }
                  }
                },
                "total_local_commitments": {
                  "type": "u64",
                  "description": [
                    "Number of commitment transaction we made."
                  ]
                },
                "total_remote_commitments": {
                  "type": "u64",
                  "description": [
                    "Number of commitment transaction they made."
                  ]
                },
                "total_htlcs_sent": {
                  "type": "u64",
                  "description": [
                    "Number of HTLCs we ever sent."
                  ]
                },
                "funding_txid": {
                  "type": "txid",
                  "description": [
                    "ID of the funding transaction."
                  ]
                },
                "funding_outnum": {
                  "type": "u32",
                  "description": [
                    "The 0-based output number of the funding transaction which opens the channel."
                  ]
                },
                "leased": {
                  "type": "boolean",
                  "description": [
                    "Whether this channel was leased from `opener`."
                  ]
                },
                "funding_fee_paid_msat": {
                  "type": "msat",
                  "description": [
                    "How much we paid to lease the channel (iff `leased` is true and `opener` is local)."
                  ]
                },
                "funding_fee_rcvd_msat": {
                  "type": "msat",
                  "description": [
                    "How much they paid to lease the channel (iff `leased` is true and `opener` is remote)."
                  ]
                },
                "funding_pushed_msat": {
                  "type": "msat",
                  "description": [
                    "How much `opener` pushed immediate (if non-zero)."
                  ]
                },
                "total_msat": {
                  "type": "msat",
                  "description": [
                    "Total amount in the channel."
                  ]
                },
                "final_to_us_msat": {
                  "type": "msat",
                  "description": [
                    "Our balance in final commitment transaction."
                  ]
                },
                "min_to_us_msat": {
                  "type": "msat",
                  "description": [
                    "Least amount owed to us ever. If the peer were to successfully steal from us, this is the amount we would still retain."
                  ]
                },
                "max_to_us_msat": {
                  "type": "msat",
                  "description": [
                    "Most amount owed to us ever. If we were to successfully steal from the peer, this is the amount we could potentially get."
                  ]
                },
                "last_commitment_txid": {
                  "type": "hash",
                  "description": [
                    "The final commitment tx's txid (or mutual close, if we accepted it). Not present for some very old, small channels pre-0.7.0."
                  ]
                },
                "last_commitment_fee_msat": {
                  "type": "msat",
                  "description": [
                    "The fee on `last_commitment_txid`."
                  ]
                },
                "close_cause": {
                  "type": "string",
                  "enum": [
                    "unknown",
                    "local",
                    "user",
                    "remote",
                    "protocol",
                    "onchain"
                  ],
                  "description": [
                    "What caused the channel to close."
                  ]
                },
                "last_stable_connection": {
                  "type": "u64",
                  "added": "v24.02",
                  "description": [
                    "Last time we reestablished the open channel and stayed connected for 1 minute."
                  ]
                }
              }
            }
          }
        }
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong."
      ],
      "author": [
        "Rusty Russell <<rusty@blockstream.com>>."
      ],
      "see_also": [
        "lightning-listpeerchannels(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listclosedchannels#1",
            "method": "listclosedchannels",
            "params": {}
          },
          "response": {
            "closedchannels": []
          }
        }
      ]
    },
    "lightning-listconfigs.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listconfigs",
      "title": "Command to list all configuration options.",
      "description": [
        "The **listconfigs** RPC command to list all configuration options, or with *config* only one."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "config": {
            "type": "string",
            "description": [
              "Configuration option name to restrict return."
            ]
          }
        }
      },
      "response": {
        "required": [],
        "properties": {
          "configs": {
            "added": "v23.08",
            "type": "object",
            "comment": "Plugins can add fields to this, so we can't rule out additional properties :(",
            "additionalProperties": true,
            "required": [],
            "properties": {
              "conf": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "enum": [
                      "cmdline"
                    ],
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "developer": {
                "type": "object",
                "added": "v23.08",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "clear-plugins": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "disable-mpp": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  },
                  "plugin": {
                    "type": "string",
                    "description": [
                      "Plugin which registered this configuration setting."
                    ]
                  }
                }
              },
              "mainnet": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "regtest": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "signet": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "testnet": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "important-plugin": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "values_str",
                  "sources"
                ],
                "properties": {
                  "values_str": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Field from config or cmdline."
                      ]
                    }
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Source of configuration setting."
                      ]
                    }
                  }
                }
              },
              "plugin": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "values_str",
                  "sources"
                ],
                "properties": {
                  "values_str": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Field from config or cmdline."
                      ]
                    }
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Source of configuration setting."
                      ]
                    }
                  }
                }
              },
              "plugin-dir": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "values_str",
                  "sources"
                ],
                "properties": {
                  "values_str": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Field from config or cmdline."
                      ]
                    }
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Source of configuration setting."
                      ]
                    }
                  }
                }
              },
              "lightning-dir": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "network": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default (can also be changed by `testnet`, `signet`, `regtest` options!)."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "allow-deprecated-apis": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_bool",
                  "source"
                ],
                "properties": {
                  "value_bool": {
                    "type": "boolean",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "rpc-file": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "disable-plugin": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "values_str",
                  "sources"
                ],
                "properties": {
                  "values_str": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Field from config or cmdline."
                      ]
                    }
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Source of configuration setting."
                      ]
                    }
                  }
                }
              },
              "always-use-proxy": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_bool",
                  "source"
                ],
                "properties": {
                  "value_bool": {
                    "type": "boolean",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "daemon": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "wallet": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "large-channels": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "experimental-dual-fund": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "experimental-splicing": {
                "added": "v23.08",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "experimental-onion-messages": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "experimental-offers": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "experimental-shutdown-wrong-funding": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "experimental-peer-storage": {
                "added": "v23.02",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "experimental-anchors": {
                "type": "object",
                "added": "v23.08",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "database-upgrade": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_bool",
                  "source"
                ],
                "properties": {
                  "value_bool": {
                    "type": "boolean",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "rgb": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "hex",
                    "description": [
                      "Field from config or cmdline, or default."
                    ],
                    "maxLength": 6,
                    "minLength": 6
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "alias": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "pid-file": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "ignore-fee-limits": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_bool",
                  "source"
                ],
                "properties": {
                  "value_bool": {
                    "type": "boolean",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "watchtime-blocks": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u32",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "max-locktime-blocks": {
                "type": "object",
                "deprecated": [
                  "v24.05",
                  "v24.11"
                ],
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u32",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "funding-confirms": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u32",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "cltv-delta": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u32",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "cltv-final": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u32",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "commit-time": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u32",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "fee-base": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u32",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "rescan": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "integer",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "fee-per-satoshi": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u32",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "max-concurrent-htlcs": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u32",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "htlc-minimum-msat": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_msat",
                  "source"
                ],
                "properties": {
                  "value_msat": {
                    "type": "msat",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "htlc-maximum-msat": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_msat",
                  "source"
                ],
                "properties": {
                  "value_msat": {
                    "type": "msat",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "max-dust-htlc-exposure-msat": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_msat",
                  "source"
                ],
                "properties": {
                  "value_msat": {
                    "type": "msat",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "min-capacity-sat": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u64",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  },
                  "dynamic": {
                    "type": "boolean",
                    "enum": [
                      true
                    ],
                    "description": [
                      "Can this be set by setconfig()."
                    ]
                  }
                }
              },
              "addr": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "values_str",
                  "sources"
                ],
                "properties": {
                  "values_str": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Field from config or cmdline."
                      ]
                    }
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Source of configuration setting."
                      ]
                    }
                  }
                }
              },
              "announce-addr": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "values_str",
                  "sources"
                ],
                "properties": {
                  "values_str": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Field from config or cmdline."
                      ]
                    }
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Source of configuration setting."
                      ]
                    }
                  }
                }
              },
              "bind-addr": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "values_str",
                  "sources"
                ],
                "properties": {
                  "values_str": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Field from config or cmdline."
                      ]
                    }
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Source of configuration setting."
                      ]
                    }
                  }
                }
              },
              "offline": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "autolisten": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_bool",
                  "source"
                ],
                "properties": {
                  "value_bool": {
                    "type": "boolean",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "proxy": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "disable-dns": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "announce-addr-discovered": {
                "added": "v23.02",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "auto"
                    ],
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "announce-addr-discovered-port": {
                "added": "v23.02",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u32",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "encrypted-hsm": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "rpc-file-mode": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "log-level": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "log-prefix": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "log-file": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "values_str",
                  "sources"
                ],
                "properties": {
                  "values_str": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Field from config or cmdline."
                      ]
                    }
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Source of configuration setting."
                      ]
                    }
                  }
                }
              },
              "log-timestamps": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_bool",
                  "source"
                ],
                "properties": {
                  "value_bool": {
                    "type": "boolean",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "force-feerates": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "subdaemon": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "values_str",
                  "sources"
                ],
                "properties": {
                  "values_str": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Field from config or cmdline."
                      ]
                    }
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": [
                        "Source of configuration setting."
                      ]
                    }
                  }
                }
              },
              "fetchinvoice-noconnect": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "set",
                  "source"
                ],
                "properties": {
                  "set": {
                    "type": "boolean",
                    "description": [
                      "`true` if set in config or cmdline."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  },
                  "plugin": {
                    "added": "v23.08",
                    "type": "string",
                    "description": [
                      "Plugin which registered this configuration setting."
                    ]
                  }
                }
              },
              "accept-htlc-tlv-types": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "tor-service-password": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_str",
                  "source"
                ],
                "properties": {
                  "value_str": {
                    "type": "string",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "announce-addr-dns": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_bool",
                  "source"
                ],
                "properties": {
                  "value_bool": {
                    "type": "boolean",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "require-confirmed-inputs": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_bool",
                  "source"
                ],
                "properties": {
                  "value_bool": {
                    "type": "boolean",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "commit-fee": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u64",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              },
              "commit-feerate-offset": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "value_int",
                  "source"
                ],
                "properties": {
                  "value_int": {
                    "type": "u32",
                    "description": [
                      "Field from config or cmdline, or default."
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": [
                      "Source of configuration setting."
                    ]
                  }
                }
              }
            }
          },
          "# version": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "Special field indicating the current version."
            ]
          },
          "plugins": {
            "type": "array",
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "path",
                "name"
              ],
              "description": [
                "`plugin` field from config or cmdline."
              ],
              "properties": {
                "path": {
                  "type": "string",
                  "description": [
                    "Full path of the plugin."
                  ]
                },
                "name": {
                  "type": "string",
                  "description": [
                    "Short name of the plugin."
                  ]
                },
                "options": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [],
                  "description": [
                    "Specific options set for this plugin."
                  ],
                  "properties": {}
                }
              }
            }
          },
          "important-plugins": {
            "type": "array",
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "path",
                "name"
              ],
              "description": [
                "`important-plugin` field from config or cmdline, or built-in."
              ],
              "properties": {
                "path": {
                  "type": "string",
                  "description": [
                    "Full path of the plugin."
                  ]
                },
                "name": {
                  "type": "string",
                  "description": [
                    "Short name of the plugin."
                  ]
                },
                "options": {
                  "type": "object",
                  "additionalProperties": true,
                  "required": [],
                  "description": [
                    "Specific options set for this plugin."
                  ],
                  "properties": {}
                }
              }
            }
          },
          "conf": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`conf` field from cmdline, or default."
            ]
          },
          "lightning-dir": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`lightning-dir` field from config or cmdline, or default."
            ]
          },
          "network": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`network` field from config or cmdline, or default."
            ]
          },
          "allow-deprecated-apis": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`allow-deprecated-apis` field from config or cmdline, or default."
            ]
          },
          "rpc-file": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`rpc-file` field from config or cmdline, or default."
            ]
          },
          "disable-plugin": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "array",
            "items": {
              "type": "string",
              "description": [
                "`disable-plugin` field from config or cmdline."
              ]
            }
          },
          "bookkeeper-dir": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`bookkeeper-dir` field from config or cmdline, or default."
            ]
          },
          "bookkeeper-db": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`bookkeeper-db` field from config or cmdline, or default."
            ]
          },
          "always-use-proxy": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`always-use-proxy` field from config or cmdline, or default."
            ]
          },
          "daemon": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`daemon` field from config or cmdline, or default."
            ]
          },
          "wallet": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`wallet` field from config or cmdline default."
            ]
          },
          "large-channels": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`large-channels` field from config or cmdline, or default."
            ]
          },
          "experimental-dual-fund": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`experimental-dual-fund` field from config or cmdline, or default."
            ]
          },
          "experimental-splicing": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`experimental-splicing` field from config or cmdline, or default."
            ]
          },
          "experimental-onion-messages": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`experimental-onion-messages` field from config or cmdline, or default."
            ]
          },
          "experimental-offers": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`experimental-offers` field from config or cmdline, or default."
            ]
          },
          "experimental-shutdown-wrong-funding": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`experimental-shutdown-wrong-funding` field from config or cmdline, or default."
            ]
          },
          "experimental-peer-storage": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "added": "v23.02",
            "description": [
              "`experimental-peer-storage` field from config or cmdline, or default."
            ]
          },
          "experimental-quiesce": {
            "type": "boolean",
            "added": "v23.08",
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "description": [
              "`experimental-quiesce` field from config or cmdline, or default."
            ]
          },
          "experimental-upgrade-protocol": {
            "type": "boolean",
            "added": "v23.08",
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "description": [
              "`experimental-upgrade-protocol` field from config or cmdline, or default."
            ]
          },
          "invoices-onchain-fallback": {
            "type": "boolean",
            "added": "v23.11",
            "description": [
              "`invoices-onchain-fallback` field from config or cmdline, or default."
            ]
          },
          "database-upgrade": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`database-upgrade` field from config or cmdline."
            ]
          },
          "rgb": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "hex",
            "description": [
              "`rgb` field from config or cmdline, or default."
            ],
            "maxLength": 6,
            "minLength": 6
          },
          "alias": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`alias` field from config or cmdline, or default."
            ]
          },
          "pid-file": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`pid-file` field from config or cmdline, or default."
            ]
          },
          "ignore-fee-limits": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`ignore-fee-limits` field from config or cmdline, or default."
            ]
          },
          "watchtime-blocks": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "u32",
            "description": [
              "`watchtime-blocks` field from config or cmdline, or default."
            ]
          },
          "max-locktime-blocks": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "u32",
            "description": [
              "`max-locktime-blocks` field from config or cmdline, or default."
            ]
          },
          "funding-confirms": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "u32",
            "description": [
              "`funding-confirms` field from config or cmdline, or default."
            ]
          },
          "cltv-delta": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "u32",
            "description": [
              "`cltv-delta` field from config or cmdline, or default."
            ]
          },
          "cltv-final": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "u32",
            "description": [
              "`cltv-final` field from config or cmdline, or default."
            ]
          },
          "commit-time": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "u32",
            "description": [
              "`commit-time` field from config or cmdline, or default."
            ]
          },
          "fee-base": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "u32",
            "description": [
              "`fee-base` field from config or cmdline, or default."
            ]
          },
          "rescan": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "integer",
            "description": [
              "`rescan` field from config or cmdline, or default."
            ]
          },
          "fee-per-satoshi": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "u32",
            "description": [
              "`fee-per-satoshi` field from config or cmdline, or default."
            ]
          },
          "max-concurrent-htlcs": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "u32",
            "description": [
              "`max-concurrent-htlcs` field from config or cmdline, or default."
            ]
          },
          "htlc-minimum-msat": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "msat",
            "description": [
              "`htlc-minimum-msat` field from config or cmdline, or default."
            ]
          },
          "htlc-maximum-msat": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "msat",
            "description": [
              "`htlc-maximum-msat` field from config or cmdline, or default."
            ]
          },
          "max-dust-htlc-exposure-msat": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "msat",
            "description": [
              "`max-dust-htlc-exposure-mast` field from config or cmdline, or default."
            ]
          },
          "min-capacity-sat": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "u64",
            "description": [
              "`min-capacity-sat` field from config or cmdline, or default."
            ]
          },
          "addr": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`addr` field from config or cmdline (can be more than one)."
            ]
          },
          "announce-addr": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`announce-addr` field from config or cmdline (can be more than one)."
            ]
          },
          "bind-addr": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`bind-addr` field from config or cmdline (can be more than one)."
            ]
          },
          "offline": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`true` if `offline` was set in config or cmdline."
            ]
          },
          "autolisten": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`autolisten` field from config or cmdline, or default."
            ]
          },
          "proxy": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`proxy` field from config or cmdline, or default."
            ]
          },
          "disable-dns": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`true` if `disable-dns` was set in config or cmdline."
            ]
          },
          "announce-addr-discovered": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`true`/`false`/`auto` depending on how `announce-addr-discovered` was set in config or cmdline."
            ],
            "added": "v23.02"
          },
          "announce-addr-discovered-port": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "integer",
            "description": [
              "Sets the announced TCP port for dynamically discovered IPs."
            ],
            "added": "v23.02"
          },
          "encrypted-hsm": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`true` if `encrypted-hsm` was set in config or cmdline."
            ]
          },
          "rpc-file-mode": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`rpc-file-mode` field from config or cmdline, or default."
            ]
          },
          "log-level": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`log-level` field from config or cmdline, or default."
            ]
          },
          "log-prefix": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`log-prefix` field from config or cmdline, or default."
            ]
          },
          "log-file": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`log-file` field from config or cmdline, or default."
            ]
          },
          "log-timestamps": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`log-timestamps` field from config or cmdline, or default."
            ]
          },
          "force-feerates": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "Force-feerate configuration setting, if any."
            ]
          },
          "subdaemon": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`subdaemon` fields from config or cmdline if any (can be more than one)."
            ]
          },
          "fetchinvoice-noconnect": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "`fetchinvoice-noconnect` fields from config or cmdline, or default."
            ]
          },
          "accept-htlc-tlv-types": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`accept-htlc-tlv-types` field from config or cmdline, or not present."
            ]
          },
          "tor-service-password": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "string",
            "description": [
              "`tor-service-password` field from config or cmdline, if any."
            ]
          },
          "dev-allowdustreserve": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "Whether we allow setting dust reserves."
            ]
          },
          "announce-addr-dns": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "added": "v22.11.1",
            "description": [
              "Whether we put DNS entries into node_announcement."
            ]
          },
          "require-confirmed-inputs": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "boolean",
            "description": [
              "Request peers to only send confirmed inputs (dual-fund only)."
            ]
          },
          "developer": {
            "added": "v23.08",
            "type": "boolean",
            "description": [
              "Whether developer mode is enabled."
            ]
          },
          "commit-fee": {
            "deprecated": [
              "v23.08",
              "v24.02"
            ],
            "type": "u64",
            "added": "v23.05",
            "description": [
              "The percentage of the 6-block fee estimate to use for commitment transactions."
            ]
          },
          "min-emergency-msat": {
            "type": "msat",
            "added": "v23.08",
            "description": [
              "Field from config or cmdline, or default."
            ]
          },
          "commit-feerate-offset": {
            "type": "u32",
            "added": "v23.11",
            "description": [
              "Additional commitment feerate applied by channel owner."
            ]
          }
        },
        "pre_return_value_notes": [
          "The returned values reflect the current configuration, including showing default values (`dev-` options are not shown unless specified as *config* explicitly).",
          "",
          "Note: as plugins can add options, not all configuration settings are listed here! The format of each entry is as follows:",
          "",
          "- **source** (string): source of configuration setting (`file`:`linenum`)",
          "- **dynamic** (boolean, optional): true if this option is settable via setconfig",
          "- **plugin** (string, optional): set if this is from a plugin",
          "",
          "Depending on the option type, exactly one of the following is present:",
          "",
          "- **set** (boolean, optional): for simple flag options",
          "- **value_str** (string, optional): for string options",
          "- **value_msat** (msat, optional): for msat options",
          "- **value_int** (integer, optional): for integer options",
          "- **value_bool** (boolean, optional): for boolean options"
        ]
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters or field with *config* name doesn't exist."
      ],
      "author": [
        "Vincenzo Palazzo <<vincenzo.palazzo@protonmail.com>> wrote the initial version of this man page,",
        "but many others did the hard work of actually implementing this rpc command."
      ],
      "see_also": [
        "lightning-getinfo(7)",
        "lightningd-config(5)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listconfigs#1",
            "method": "listconfigs",
            "params": {
              "config": "network"
            }
          },
          "response": {
            "network": "regtest",
            "configs": {
              "network": {
                "value_str": "regtest",
                "source": "cmdline"
              }
            }
          }
        },
        {
          "request": {
            "id": "example:listconfigs#2",
            "method": "listconfigs",
            "params": {
              "config": "experimental-dual-fund"
            }
          },
          "response": {
            "experimental-dual-fund": true,
            "configs": {
              "experimental-dual-fund": {
                "set": true,
                "source": "cmdline"
              }
            }
          }
        },
        {
          "request": {
            "id": "example:listconfigs#3",
            "method": "listconfigs",
            "params": {}
          },
          "response": {
            "# version": "v24.05-190-g5fd2f9c-modded",
            "developer": true,
            "lightning-dir": "/tmp/.lightning/",
            "network": "regtest",
            "rpc-file": "lightning-rpc",
            "allow-deprecated-apis": true,
            "plugins": [
              {
                "path": "/root/lightning/plugins/cln-renepay",
                "name": "cln-renepay",
                "options": {}
              }
            ],
            "important-plugins": [
              {
                "path": "/root/lightning/plugins/autoclean",
                "name": "autoclean",
                "options": {
                  "autoclean-cycle": 3600,
                  "dev-autoclean-max-batch": 10000
                }
              },
              {
                "path": "/root/lightning/plugins/chanbackup",
                "name": "chanbackup"
              },
              {
                "path": "/root/lightning/plugins/bcli",
                "name": "bcli",
                "options": {
                  "bitcoin-datadir": "/tmp/.lightning/",
                  "bitcoin-rpcuser": "rpcuser",
                  "bitcoin-rpcpassword": "rpcpass",
                  "bitcoin-rpcport": 51251,
                  "bitcoin-rpcclienttimeout": 60,
                  "bitcoin-retry-timeout": 60
                }
              },
              {
                "path": "/root/lightning/plugins/commando",
                "name": "commando"
              },
              {
                "path": "/root/lightning/plugins/funder",
                "name": "funder",
                "options": {
                  "funder-policy": "fixed",
                  "funder-policy-mod": "0",
                  "funder-min-their-funding": "10000sat",
                  "funder-max-their-funding": "4294967295sat",
                  "funder-per-channel-min": "10000sat",
                  "funder-per-channel-max": "4294967295sat",
                  "funder-reserve-tank": "0sat",
                  "funder-fuzz-percent": 0,
                  "funder-fund-probability": 100,
                  "funder-lease-requests-only": true
                }
              },
              {
                "path": "/root/lightning/plugins/topology",
                "name": "topology"
              },
              {
                "path": "/root/lightning/plugins/keysend",
                "name": "keysend"
              },
              {
                "path": "/root/lightning/plugins/offers",
                "name": "offers",
                "options": {}
              },
              {
                "path": "/root/lightning/plugins/pay",
                "name": "pay",
                "options": {}
              },
              {
                "path": "/root/lightning/plugins/recover",
                "name": "recover"
              },
              {
                "path": "/root/lightning/plugins/txprepare",
                "name": "txprepare"
              },
              {
                "path": "/root/lightning/plugins/spenderp",
                "name": "spenderp"
              },
              {
                "path": "/root/lightning/plugins/sql",
                "name": "sql",
                "options": {}
              },
              {
                "path": "/root/lightning/plugins/bookkeeper",
                "name": "bookkeeper",
                "options": {}
              }
            ],
            "disable-plugin": [],
            "always-use-proxy": false,
            "daemon": false,
            "wallet": "sqlite3:///tmp/.lightning/regtest/lightningd.sqlite3",
            "experimental-dual-fund": true,
            "experimental-splicing": false,
            "experimental-offers": true,
            "experimental-shutdown-wrong-funding": false,
            "experimental-peer-storage": false,
            "experimental-quiesce": false,
            "rgb": "022d22",
            "alias": "SILENTARTIST-190-g5fd2f9c-modded",
            "pid-file": "/tmp/.lightning/lightningd-regtest.pid",
            "ignore-fee-limits": false,
            "watchtime-blocks": 5,
            "funding-confirms": 1,
            "require-confirmed-inputs": false,
            "cltv-delta": 6,
            "cltv-final": 5,
            "commit-time": 10,
            "fee-base": 1,
            "rescan": 1,
            "fee-per-satoshi": 10,
            "htlc-minimum-msat": 0,
            "htlc-maximum-msat": 18446744073709552000,
            "max-concurrent-htlcs": 483,
            "max-dust-htlc-exposure-msat": 50000000,
            "min-capacity-sat": 10000,
            "addr": "127.0.0.1:41219",
            "announce-addr-discovered": "auto",
            "announce-addr-discovered-port": 19846,
            "offline": false,
            "autolisten": false,
            "disable-dns": true,
            "encrypted-hsm": false,
            "rpc-file-mode": "0600",
            "commit-fee": 100,
            "commit-feerate-offset": 5,
            "min-emergency-msat": 25000000,
            "experimental-upgrade-protocol": false,
            "invoices-onchain-fallback": false,
            "log-level": "debug",
            "log-timestamps": true,
            "log-prefix": "lightningd-2 ",
            "log-file": "/tmp/.lightning/log",
            "configs": {
              "developer": {
                "set": true,
                "source": "cmdline"
              },
              "lightning-dir": {
                "value_str": "/tmp/.lightning/",
                "source": "cmdline"
              },
              "network": {
                "value_str": "regtest",
                "source": "cmdline"
              },
              "testnet": {
                "set": false,
                "source": "default"
              },
              "signet": {
                "set": false,
                "source": "default"
              },
              "mainnet": {
                "set": false,
                "source": "default"
              },
              "regtest": {
                "set": false,
                "source": "default"
              },
              "rpc-file": {
                "value_str": "lightning-rpc",
                "source": "default"
              },
              "allow-deprecated-apis": {
                "value_bool": true,
                "source": "cmdline"
              },
              "plugin": {
                "values_str": [],
                "sources": []
              },
              "plugin-dir": {
                "values_str": [],
                "sources": []
              },
              "clear-plugins": {
                "set": false,
                "source": "default"
              },
              "disable-plugin": {
                "values_str": [],
                "sources": []
              },
              "important-plugin": {
                "values_str": [],
                "sources": []
              },
              "always-use-proxy": {
                "value_bool": false,
                "source": "default"
              },
              "daemon": {
                "set": false,
                "source": "default"
              },
              "experimental-dual-fund": {
                "set": true,
                "source": "cmdline"
              },
              "experimental-splicing": {
                "set": false,
                "source": "default"
              },
              "experimental-offers": {
                "set": true,
                "source": "cmdline"
              },
              "experimental-shutdown-wrong-funding": {
                "set": false,
                "source": "default"
              },
              "experimental-peer-storage": {
                "set": false,
                "source": "default"
              },
              "experimental-quiesce": {
                "set": false,
                "source": "default"
              },
              "rgb": {
                "value_str": "022d22",
                "source": "default"
              },
              "alias": {
                "value_str": "SILENTARTIST-190-g5fd2f9c-modded",
                "source": "default"
              },
              "pid-file": {
                "value_str": "/tmp/.lightning/lightningd-regtest.pid",
                "source": "default"
              },
              "ignore-fee-limits": {
                "value_bool": false,
                "source": "cmdline"
              },
              "watchtime-blocks": {
                "value_int": 5,
                "source": "cmdline"
              },
              "funding-confirms": {
                "value_int": 1,
                "source": "default"
              },
              "require-confirmed-inputs": {
                "value_bool": false,
                "source": "default"
              },
              "cltv-delta": {
                "value_int": 6,
                "source": "cmdline"
              },
              "cltv-final": {
                "value_int": 5,
                "source": "cmdline"
              },
              "commit-time": {
                "value_int": 10,
                "source": "default"
              },
              "fee-base": {
                "value_int": 1,
                "source": "default"
              },
              "rescan": {
                "value_int": 1,
                "source": "cmdline"
              },
              "fee-per-satoshi": {
                "value_int": 10,
                "source": "default"
              },
              "htlc-minimum-msat": {
                "value_msat": 0,
                "source": "default"
              },
              "htlc-maximum-msat": {
                "value_msat": 18446744073709552000,
                "source": "default"
              },
              "max-concurrent-htlcs": {
                "value_int": 483,
                "source": "default"
              },
              "max-dust-htlc-exposure-msat": {
                "value_msat": 50000000,
                "source": "default"
              },
              "min-capacity-sat": {
                "value_int": 10000,
                "source": "default",
                "dynamic": true
              },
              "addr": {
                "values_str": [
                  "127.0.0.1:41219"
                ],
                "sources": [
                  "cmdline"
                ]
              },
              "bind-addr": {
                "values_str": [],
                "sources": []
              },
              "announce-addr": {
                "values_str": [],
                "sources": []
              },
              "announce-addr-discovered": {
                "value_str": "auto",
                "source": "default"
              },
              "announce-addr-discovered-port": {
                "value_int": 19846,
                "source": "default"
              },
              "offline": {
                "set": false,
                "source": "default"
              },
              "autolisten": {
                "value_bool": false,
                "source": "default"
              },
              "accept-htlc-tlv-type": {
                "values_int": [],
                "sources": []
              },
              "disable-dns": {
                "set": true,
                "source": "cmdline"
              },
              "encrypted-hsm": {
                "set": false,
                "source": "default"
              },
              "rpc-file-mode": {
                "value_str": "0600",
                "source": "default"
              },
              "commit-fee": {
                "value_int": 100,
                "source": "default"
              },
              "commit-feerate-offset": {
                "value_int": 5,
                "source": "default"
              },
              "min-emergency-msat": {
                "value_msat": 25000000,
                "source": "default"
              },
              "subdaemon": {
                "values_str": [],
                "sources": []
              },
              "experimental-upgrade-protocol": {
                "set": false,
                "source": "default"
              },
              "invoices-onchain-fallback": {
                "set": false,
                "source": "default"
              },
              "i-promise-to-fix-broken-api-user": {
                "values_str": [],
                "sources": []
              },
              "log-level": {
                "value_str": "debug",
                "source": "cmdline"
              },
              "log-timestamps": {
                "value_bool": true,
                "source": "default"
              },
              "log-prefix": {
                "value_str": "lightningd-2 ",
                "source": "cmdline"
              },
              "log-file": {
                "values_str": [
                  "-",
                  "/tmp/.lightning/log"
                ],
                "sources": [
                  "cmdline",
                  "cmdline"
                ]
              },
              "dev-fail-on-subdaemon-fail": {
                "set": true,
                "source": "cmdline"
              },
              "dev-bitcoind-poll": {
                "value_int": 3,
                "source": "cmdline"
              },
              "dev-fast-gossip": {
                "set": true,
                "source": "cmdline"
              },
              "dev-hsmd-no-preapprove-check": {
                "set": true,
                "source": "cmdline"
              },
              "autoclean-cycle": {
                "value_int": 3600,
                "source": "default",
                "plugin": "/root/lightning/plugins/autoclean",
                "dynamic": true
              },
              "dev-autoclean-max-batch": {
                "value_int": 10000,
                "source": "default",
                "plugin": "/root/lightning/plugins/autoclean",
                "dynamic": true
              },
              "bitcoin-datadir": {
                "value_str": "/tmp/.lightning/",
                "source": "cmdline",
                "plugin": "/root/lightning/plugins/bcli"
              },
              "bitcoin-rpcuser": {
                "value_str": "rpcuser",
                "source": "cmdline",
                "plugin": "/root/lightning/plugins/bcli"
              },
              "bitcoin-rpcpassword": {
                "value_str": "rpcpass",
                "source": "cmdline",
                "plugin": "/root/lightning/plugins/bcli"
              },
              "bitcoin-rpcport": {
                "value_int": 51251,
                "source": "cmdline",
                "plugin": "/root/lightning/plugins/bcli"
              },
              "bitcoin-rpcclienttimeout": {
                "value_int": 60,
                "source": "default",
                "plugin": "/root/lightning/plugins/bcli"
              },
              "bitcoin-retry-timeout": {
                "value_int": 60,
                "source": "default",
                "plugin": "/root/lightning/plugins/bcli"
              },
              "funder-policy": {
                "value_str": "fixed",
                "source": "default",
                "plugin": "/root/lightning/plugins/funder"
              },
              "funder-policy-mod": {
                "value_str": "0",
                "source": "default",
                "plugin": "/root/lightning/plugins/funder"
              },
              "funder-min-their-funding": {
                "value_str": "10000sat",
                "source": "default",
                "plugin": "/root/lightning/plugins/funder"
              },
              "funder-max-their-funding": {
                "value_str": "4294967295sat",
                "source": "default",
                "plugin": "/root/lightning/plugins/funder"
              },
              "funder-per-channel-min": {
                "value_str": "10000sat",
                "source": "default",
                "plugin": "/root/lightning/plugins/funder"
              },
              "funder-per-channel-max": {
                "value_str": "4294967295sat",
                "source": "default",
                "plugin": "/root/lightning/plugins/funder"
              },
              "funder-reserve-tank": {
                "value_str": "0sat",
                "source": "default",
                "plugin": "/root/lightning/plugins/funder"
              },
              "funder-fuzz-percent": {
                "value_int": 0,
                "source": "default",
                "plugin": "/root/lightning/plugins/funder"
              },
              "funder-fund-probability": {
                "value_int": 100,
                "source": "default",
                "plugin": "/root/lightning/plugins/funder"
              },
              "funder-lease-requests-only": {
                "value_bool": true,
                "source": "default",
                "plugin": "/root/lightning/plugins/funder"
              },
              "fetchinvoice-noconnect": {
                "set": false,
                "source": "default",
                "plugin": "/root/lightning/plugins/offers"
              },
              "dev-invoice-bpath-scid": {
                "set": false,
                "source": "default",
                "plugin": "/root/lightning/plugins/offers"
              },
              "disable-mpp": {
                "set": false,
                "source": "default",
                "plugin": "/root/lightning/plugins/pay"
              },
              "renepay-debug-mcf": {
                "set": false,
                "source": "default",
                "plugin": "/root/lightning/plugins/cln-renepay"
              },
              "renepay-debug-payflow": {
                "set": false,
                "source": "default",
                "plugin": "/root/lightning/plugins/cln-renepay"
              }
            }
          }
        }
      ]
    },
    "lightning-listdatastore.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listdatastore",
      "title": "Command for listing (plugin) data",
      "description": [
        "The **listdatastore** RPC command allows plugins to fetch data which was stored in the Core Lightning database."
      ],
      "request": {
        "required": [],
        "properties": {
          "key": {
            "oneOf": [
              {
                "type": "array",
                "description": [
                  "All immediate children of the *key* (or root children) are returned.",
                  "    Using the first element of the key as the plugin name (e.g. `[ 'summary' ]`) is recommended.",
                  "    An array of values to form a hierarchy (though a single value is treated as a one-element array)."
                ],
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "response": {
        "required": [
          "datastore"
        ],
        "properties": {
          "datastore": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": [
                      "Part of the key added to the datastore."
                    ]
                  }
                },
                "generation": {
                  "type": "u64",
                  "description": [
                    "The number of times this has been updated."
                  ]
                },
                "hex": {
                  "type": "hex",
                  "description": [
                    "The hex data from the datastore."
                  ]
                },
                "string": {
                  "type": "string",
                  "description": [
                    "The data as a string, if it's valid utf-8."
                  ]
                }
              }
            }
          }
        }
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- -32602: invalid parameters."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-datastore(7)",
        "lightning-deldatastore(7)",
        "lightning-datastoreusage(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listdatastore#1",
            "method": "listdatastore",
            "params": {
              "key": [
                "test"
              ]
            }
          },
          "response": {
            "datastore": [
              {
                "key": [
                  "test",
                  "name"
                ],
                "generation": 0,
                "hex": "736176696e67206461746120746f207468652073746f7265",
                "string": "saving data to the store"
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listdatastore#2",
            "method": "listdatastore",
            "params": {
              "key": "otherkey"
            }
          },
          "response": {
            "datastore": [
              {
                "key": [
                  "otherkey"
                ],
                "generation": 1,
                "hex": "666f6f626172",
                "string": "foobar"
              }
            ]
          }
        }
      ]
    },
    "lightning-listforwards.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listforwards",
      "title": "Command showing all htlcs and their information",
      "description": [
        "The **listforwards** RPC command displays all htlcs that have been attempted to be forwarded by the Core Lightning node."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "status": {
            "type": "string",
            "description": [
              "If specified, then only the forwards with the given status are returned."
            ],
            "enum": [
              "offered",
              "settled",
              "local_failed",
              "failed"
            ]
          },
          "in_channel": {
            "type": "short_channel_id",
            "description": [
              "Only the matching forwards on the given inbound channel are returned."
            ]
          },
          "out_channel": {
            "type": "short_channel_id",
            "description": [
              "Only the matching forwards on the given outbount channel are returned."
            ]
          },
          "index": {
            "type": "string",
            "added": "v23.11",
            "enum": [
              "created",
              "updated"
            ],
            "description": [
              "If neither *in_channel* nor *out_channel* is specified, it controls ordering."
            ],
            "default": "`created`"
          },
          "start": {
            "type": "u64",
            "added": "v23.11",
            "description": [
              "If `index` is specified, `start` may be specified to start from that value, which is generally returned from lightning-wait(7)."
            ]
          },
          "limit": {
            "type": "u32",
            "added": "v23.11",
            "description": [
              "If `index` is specified, `limit` can be used to specify the maximum number of entries to return."
            ]
          }
        },
        "dependentUpon": {
          "index": [
            "start",
            "limit"
          ]
        }
      },
      "response": {
        "required": [
          "forwards"
        ],
        "properties": {
          "forwards": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "created_index",
                "in_channel",
                "in_msat",
                "status",
                "received_time"
              ],
              "properties": {
                "created_index": {
                  "added": "v23.11",
                  "type": "u64",
                  "description": [
                    "1-based index indicating order this forward was created in."
                  ]
                },
                "in_channel": {
                  "type": "short_channel_id",
                  "description": [
                    "The channel that received the HTLC."
                  ]
                },
                "in_htlc_id": {
                  "type": "u64",
                  "description": [
                    "The unique HTLC id the sender gave this (not present if incoming channel was closed before upgrade to v22.11)."
                  ]
                },
                "in_msat": {
                  "type": "msat",
                  "description": [
                    "The value of the incoming HTLC."
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "offered",
                    "settled",
                    "local_failed",
                    "failed"
                  ],
                  "description": [
                    "Still ongoing, completed, failed locally, or failed after forwarding."
                  ]
                },
                "received_time": {
                  "type": "number",
                  "description": [
                    "The UNIX timestamp when this was received."
                  ]
                },
                "out_channel": {
                  "type": "short_channel_id",
                  "description": [
                    "The channel that the HTLC (trying to) forward to."
                  ]
                },
                "out_htlc_id": {
                  "type": "u64",
                  "description": [
                    "The unique HTLC id we gave this when sending (may be missing even if out_channel is present, for old forwards before v22.11)."
                  ]
                },
                "updated_index": {
                  "added": "v23.11",
                  "type": "u64",
                  "description": [
                    "1-based index indicating order this forward was changed (only present if it has changed since creation)."
                  ]
                },
                "style": {
                  "type": "string",
                  "enum": [
                    "legacy",
                    "tlv"
                  ],
                  "description": [
                    "Either a legacy onion format or a modern tlv format."
                  ]
                }
              },
              "allOf": [
                {
                  "if": {
                    "required": [
                      "out_msat"
                    ]
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "fee_msat",
                      "out_msat",
                      "out_channel"
                    ],
                    "properties": {
                      "created_index": {},
                      "updated_index": {},
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msatoshi": {},
                      "in_msat": {},
                      "status": {},
                      "style": {},
                      "received_time": {},
                      "resolved_time": {},
                      "out_channel": {},
                      "out_htlc_id": {},
                      "failcode": {},
                      "failreason": {},
                      "fee_msat": {
                        "type": "msat",
                        "description": [
                          "The amount this paid in fees."
                        ]
                      },
                      "out_msat": {
                        "type": "msat",
                        "description": [
                          "The amount we sent out the *out_channel*."
                        ]
                      }
                    }
                  },
                  "else": {
                    "additionalProperties": false,
                    "required": [],
                    "properties": {
                      "created_index": {},
                      "updated_index": {},
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msatoshi": {},
                      "in_msat": {},
                      "status": {},
                      "style": {},
                      "received_time": {},
                      "resolved_time": {},
                      "failcode": {},
                      "failreason": {},
                      "out_channel": {}
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "settled",
                          "failed"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "resolved_time"
                    ],
                    "properties": {
                      "created_index": {},
                      "updated_index": {},
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msatoshi": {},
                      "in_msat": {},
                      "status": {},
                      "style": {},
                      "received_time": {},
                      "out_channel": {},
                      "out_htlc_id": {},
                      "fee": {},
                      "fee_msat": {},
                      "out_msatoshi": {},
                      "out_msat": {},
                      "failcode": {},
                      "failreason": {},
                      "resolved_time": {
                        "type": "number",
                        "description": [
                          "The UNIX timestamp when this was resolved."
                        ]
                      }
                    }
                  },
                  "else": {
                    "additionalProperties": false,
                    "properties": {
                      "created_index": {},
                      "updated_index": {},
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msatoshi": {},
                      "in_msat": {},
                      "status": {},
                      "style": {},
                      "received_time": {},
                      "out_channel": {},
                      "out_htlc_id": {},
                      "fee": {},
                      "fee_msat": {},
                      "failcode": {},
                      "failreason": {},
                      "out_msatoshi": {},
                      "out_msat": {}
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "local_failed",
                          "failed"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [],
                    "properties": {
                      "created_index": {},
                      "updated_index": {},
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msatoshi": {},
                      "in_msat": {},
                      "status": {},
                      "style": {},
                      "received_time": {},
                      "out_channel": {},
                      "out_htlc_id": {},
                      "fee": {},
                      "fee_msat": {},
                      "out_msatoshi": {},
                      "out_msat": {},
                      "resolved_time": {},
                      "failcode": {
                        "type": "u32",
                        "description": [
                          "The numeric onion code returned."
                        ]
                      },
                      "failreason": {
                        "type": "string",
                        "description": [
                          "The name of the onion code returned."
                        ]
                      }
                    }
                  },
                  "else": {
                    "additionalProperties": false,
                    "required": [],
                    "properties": {
                      "created_index": {},
                      "updated_index": {},
                      "in_channel": {},
                      "in_htlc_id": {},
                      "in_msatoshi": {},
                      "in_msat": {},
                      "status": {},
                      "style": {},
                      "received_time": {},
                      "out_channel": {},
                      "out_htlc_id": {},
                      "fee": {},
                      "fee_msat": {},
                      "out_msatoshi": {},
                      "out_msat": {},
                      "resolved_time": {}
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "author": [
        "Rene Pickhardt <<r.pickhardt@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-autoclean-status(7)",
        "lightning-getinfo(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listforwards#1",
            "method": "listforwards",
            "params": {
              "in_channel": "109x1x1",
              "out_channel": "111x1x0",
              "status": "settled"
            }
          },
          "response": {
            "forwards": [
              {
                "created_index": 1,
                "updated_index": 1,
                "in_channel": "109x1x1",
                "in_htlc_id": 1,
                "out_channel": "111x1x0",
                "out_htlc_id": 1,
                "in_msat": 10001,
                "out_msat": 10000,
                "fee_msat": 1,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303675.3853297,
                "resolved_time": 1722303676.8396847
              },
              {
                "created_index": 2,
                "updated_index": 2,
                "in_channel": "109x1x1",
                "in_htlc_id": 2,
                "out_channel": "111x1x0",
                "out_htlc_id": 2,
                "in_msat": 10001,
                "out_msat": 10000,
                "fee_msat": 1,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303677.6214294,
                "resolved_time": 1722303679.0363395
              },
              {
                "created_index": 3,
                "updated_index": 3,
                "in_channel": "109x1x1",
                "in_htlc_id": 3,
                "out_channel": "111x1x0",
                "out_htlc_id": 3,
                "in_msat": 10000202,
                "out_msat": 10000101,
                "fee_msat": 101,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303679.8093705,
                "resolved_time": 1722303682.2599013
              },
              {
                "created_index": 5,
                "updated_index": 4,
                "in_channel": "109x1x1",
                "in_htlc_id": 5,
                "out_channel": "111x1x0",
                "out_htlc_id": 4,
                "in_msat": 10001,
                "out_msat": 10000,
                "fee_msat": 1,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303684.4914763,
                "resolved_time": 1722303685.8940926
              },
              {
                "created_index": 6,
                "updated_index": 5,
                "in_channel": "109x1x1",
                "in_htlc_id": 6,
                "out_channel": "111x1x0",
                "out_htlc_id": 5,
                "in_msat": 50001,
                "out_msat": 50000,
                "fee_msat": 1,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303686.7160892,
                "resolved_time": 1722303688.1316907
              },
              {
                "created_index": 7,
                "updated_index": 6,
                "in_channel": "109x1x1",
                "in_htlc_id": 7,
                "out_channel": "111x1x0",
                "out_htlc_id": 7,
                "in_msat": 1002,
                "out_msat": 1001,
                "fee_msat": 1,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303689.9082303,
                "resolved_time": 1722303692.3156552
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listforwards#2",
            "method": "listforwards",
            "params": {}
          },
          "response": {
            "forwards": [
              {
                "created_index": 1,
                "updated_index": 1,
                "in_channel": "109x1x1",
                "in_htlc_id": 1,
                "out_channel": "111x1x0",
                "out_htlc_id": 1,
                "in_msat": 10001,
                "out_msat": 10000,
                "fee_msat": 1,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303675.3853297,
                "resolved_time": 1722303676.8396847
              },
              {
                "created_index": 2,
                "updated_index": 2,
                "in_channel": "109x1x1",
                "in_htlc_id": 2,
                "out_channel": "111x1x0",
                "out_htlc_id": 2,
                "in_msat": 10001,
                "out_msat": 10000,
                "fee_msat": 1,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303677.6214294,
                "resolved_time": 1722303679.0363395
              },
              {
                "created_index": 3,
                "updated_index": 3,
                "in_channel": "109x1x1",
                "in_htlc_id": 3,
                "out_channel": "111x1x0",
                "out_htlc_id": 3,
                "in_msat": 10000202,
                "out_msat": 10000101,
                "fee_msat": 101,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303679.8093705,
                "resolved_time": 1722303682.2599013
              },
              {
                "created_index": 4,
                "in_channel": "109x1x1",
                "in_htlc_id": 4,
                "out_channel": "6250403x3681116x19863",
                "in_msat": 10001,
                "status": "local_failed",
                "failcode": 16394,
                "failreason": "WIRE_UNKNOWN_NEXT_PEER",
                "style": "tlv",
                "received_time": 1722303683.0972922
              },
              {
                "created_index": 5,
                "updated_index": 4,
                "in_channel": "109x1x1",
                "in_htlc_id": 5,
                "out_channel": "111x1x0",
                "out_htlc_id": 4,
                "in_msat": 10001,
                "out_msat": 10000,
                "fee_msat": 1,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303684.4914763,
                "resolved_time": 1722303685.8940926
              },
              {
                "created_index": 6,
                "updated_index": 5,
                "in_channel": "109x1x1",
                "in_htlc_id": 6,
                "out_channel": "111x1x0",
                "out_htlc_id": 5,
                "in_msat": 50001,
                "out_msat": 50000,
                "fee_msat": 1,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303686.7160892,
                "resolved_time": 1722303688.1316907
              },
              {
                "created_index": 7,
                "updated_index": 6,
                "in_channel": "109x1x1",
                "in_htlc_id": 7,
                "out_channel": "111x1x0",
                "out_htlc_id": 7,
                "in_msat": 1002,
                "out_msat": 1001,
                "fee_msat": 1,
                "status": "settled",
                "style": "tlv",
                "received_time": 1722303689.9082303,
                "resolved_time": 1722303692.3156552
              },
              {
                "created_index": 8,
                "in_channel": "109x1x1",
                "in_htlc_id": 8,
                "out_channel": "111x1x0",
                "in_msat": 10001,
                "status": "local_failed",
                "failcode": 16394,
                "failreason": "WIRE_UNKNOWN_NEXT_PEER",
                "style": "tlv",
                "received_time": 1722303697.0961268
              }
            ]
          }
        }
      ]
    },
    "lightning-listfunds.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listfunds",
      "title": "Command showing all funds currently managed by the Core Lightning node",
      "description": [
        "The **listfunds** RPC command displays all funds available, either in unspent outputs (UTXOs) in the internal wallet or funds locked in currently open channels."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "spent": {
            "type": "boolean",
            "description": [
              "If True, then the *outputs* will include spent outputs in addition to the unspent ones."
            ],
            "default": "False"
          }
        }
      },
      "response": {
        "required": [
          "outputs",
          "channels"
        ],
        "properties": {
          "outputs": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "txid",
                "output",
                "amount_msat",
                "scriptpubkey",
                "status",
                "reserved"
              ],
              "properties": {
                "txid": {
                  "type": "txid",
                  "description": [
                    "The ID of the spendable transaction."
                  ]
                },
                "output": {
                  "type": "u32",
                  "description": [
                    "The index within *txid*."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount of the output."
                  ]
                },
                "scriptpubkey": {
                  "type": "hex",
                  "description": [
                    "The scriptPubkey of the output."
                  ]
                },
                "address": {
                  "type": "string",
                  "description": [
                    "The bitcoin address of the output."
                  ]
                },
                "redeemscript": {
                  "type": "hex",
                  "description": [
                    "The redeemscript, only if it's p2sh-wrapped."
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "unconfirmed",
                    "confirmed",
                    "spent",
                    "immature"
                  ]
                },
                "reserved": {
                  "type": "boolean",
                  "description": [
                    "Whether this UTXO is currently reserved for an in-flight tx."
                  ]
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "confirmed"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "blockheight"
                    ],
                    "properties": {
                      "txid": {},
                      "output": {},
                      "amount_msat": {},
                      "scriptpubkey": {},
                      "address": {},
                      "value": {},
                      "redeemscript": {},
                      "status": {},
                      "reserved": {},
                      "reserved_to_block": {},
                      "blockheight": {
                        "type": "u32",
                        "description": [
                          "Block height where it was confirmed."
                        ]
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "reserved": {
                        "type": "boolean",
                        "enum": [
                          "true"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "reserved_to_block"
                    ],
                    "properties": {
                      "txid": {},
                      "output": {},
                      "amount_msat": {},
                      "scriptpubkey": {},
                      "address": {},
                      "value": {},
                      "redeemscript": {},
                      "status": {},
                      "blockheight": {},
                      "reserved": {},
                      "reserved_to_block": {
                        "type": "u32",
                        "description": [
                          "Block height where reservation will expire."
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "peer_id",
                "our_amount_msat",
                "amount_msat",
                "funding_txid",
                "funding_output",
                "connected",
                "state",
                "channel_id"
              ],
              "properties": {
                "peer_id": {
                  "type": "pubkey",
                  "description": [
                    "The peer with which the channel is opened."
                  ]
                },
                "our_amount_msat": {
                  "type": "msat",
                  "description": [
                    "Available satoshis on our node's end of the channel."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "Total channel value."
                  ]
                },
                "funding_txid": {
                  "type": "txid",
                  "description": [
                    "Funding transaction id."
                  ]
                },
                "funding_output": {
                  "type": "u32",
                  "description": [
                    "The 0-based index of the output in the funding transaction."
                  ]
                },
                "connected": {
                  "type": "boolean",
                  "description": [
                    "Whether the channel peer is connected."
                  ]
                },
                "state": {
                  "type": "string",
                  "enum": [
                    "OPENINGD",
                    "CHANNELD_AWAITING_LOCKIN",
                    "CHANNELD_NORMAL",
                    "CHANNELD_SHUTTING_DOWN",
                    "CLOSINGD_SIGEXCHANGE",
                    "CLOSINGD_COMPLETE",
                    "AWAITING_UNILATERAL",
                    "FUNDING_SPEND_SEEN",
                    "ONCHAIN",
                    "DUALOPEND_OPEN_INIT",
                    "DUALOPEND_AWAITING_LOCKIN",
                    "DUALOPEND_OPEN_COMMITTED",
                    "DUALOPEND_OPEN_COMMIT_READY"
                  ],
                  "description": [
                    "The channel state, in particular `CHANNELD_NORMAL` means the channel can be used normally."
                  ]
                },
                "channel_id": {
                  "type": "hash",
                  "description": [
                    "The full channel_id (funding txid Xored with output number)."
                  ],
                  "added": "v23.05"
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "state": {
                        "type": "string",
                        "enum": [
                          "CHANNELD_NORMAL"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "short_channel_id"
                    ],
                    "properties": {
                      "peer_id": {},
                      "our_amount_msat": {},
                      "channel_sat": {},
                      "amount_msat": {},
                      "channel_total_sat": {},
                      "funding_txid": {},
                      "funding_output": {},
                      "connected": {},
                      "state": {},
                      "channel_id": {},
                      "short_channel_id": {
                        "type": "short_channel_id",
                        "description": [
                          "Short channel id of channel."
                        ]
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "state": {
                        "type": "string",
                        "enum": [
                          "CHANNELD_SHUTTING_DOWN",
                          "CLOSINGD_SIGEXCHANGE",
                          "CLOSINGD_COMPLETE",
                          "AWAITING_UNILATERAL",
                          "FUNDING_SPEND_SEEN",
                          "ONCHAIN"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [],
                    "properties": {
                      "peer_id": {},
                      "our_amount_msat": {},
                      "channel_sat": {},
                      "amount_msat": {},
                      "channel_total_sat": {},
                      "funding_txid": {},
                      "funding_output": {},
                      "connected": {},
                      "state": {},
                      "channel_id": {},
                      "short_channel_id": {
                        "type": "short_channel_id",
                        "description": [
                          "Short channel id of channel (only if funding reached lockin depth before closing)."
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "author": [
        "Felix <<fixone@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-newaddr(7)",
        "lightning-fundchannel(7)",
        "lightning-withdraw(7)",
        "lightning-listtransactions(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listfunds#1",
            "method": "listfunds",
            "params": {}
          },
          "response": {
            "outputs": [
              {
                "txid": "9454852bb62e304ee8933662284e10bd22a7f3710c262da4c94bdcc8b05ae407",
                "output": 0,
                "amount_msat": 19993653000,
                "scriptpubkey": "51206c27e1956acfa61e68292c80908880e813450f754132e8a2ac471a86bf1326b5",
                "address": "bcrt1pdsn7r9t2e7npu6pf9jqfpzyqaqf52rm4gyew3g4vgudgd0cny66srft45s",
                "status": "confirmed",
                "blockheight": 103,
                "reserved": false
              },
              {
                "txid": "7547ffc11396c62852104f7100d5ca27a2b9c0d5d43d08122147b2b03eb157a5",
                "output": 0,
                "amount_msat": 2000000000,
                "scriptpubkey": "00149fb67bfcefee6cb7db4c7e55d9c6bfd749e31d1e",
                "address": "bcrt1qn7m8hl80aekt0k6v0e2an34l6ay7x8g703x07y",
                "status": "confirmed",
                "blockheight": 108,
                "reserved": false
              },
              {
                "txid": "737d6835ddafd515ba9e9def733bb4e4211f6053a32b1422bf1c8cc240850f96",
                "output": 0,
                "amount_msat": 198995073000,
                "scriptpubkey": "512035f1184f6b470c9df347da62c4b28e7ec9ee10b220bac3accd22209def0036ea",
                "address": "bcrt1pxhc3snmtguxfmu68mf3vfv5w0my7uy9jyzav8txdygsfmmcqxm4q0mms62",
                "status": "confirmed",
                "blockheight": 109,
                "reserved": false
              }
            ],
            "channels": [
              {
                "peer_id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "connected": true,
                "state": "CHANNELD_NORMAL",
                "channel_id": "252d1b0a1e57895e84137f28cf19ab2c35847e284c112fefdecc7afeaa5c1de7",
                "short_channel_id": "109x1x1",
                "our_amount_msat": 490518792,
                "amount_msat": 1000000000,
                "funding_txid": "737d6835ddafd515ba9e9def733bb4e4211f6053a32b1422bf1c8cc240850f96",
                "funding_output": 1
              }
            ]
          }
        }
      ]
    },
    "lightning-listhtlcs.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listhtlcs",
      "title": "Command for querying HTLCs",
      "description": [
        "The **listhtlcs** RPC command gets all HTLCs (which, generally, we remember for as long as a channel is open, even if they've completed long ago)."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "id": {
            "type": "string",
            "description": [
              "A short channel id (e.g. 1x2x3) or full 64-byte hex channel id, it will only list htlcs for that channel (which must be known)."
            ]
          }
        }
      },
      "response": {
        "required": [
          "htlcs"
        ],
        "properties": {
          "htlcs": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "short_channel_id",
                "id",
                "expiry",
                "direction",
                "amount_msat",
                "payment_hash",
                "state"
              ],
              "properties": {
                "short_channel_id": {
                  "type": "short_channel_id",
                  "description": [
                    "The channel that contains/contained the HTLC."
                  ]
                },
                "id": {
                  "type": "u64",
                  "description": [
                    "The unique, incrementing HTLC id the creator gave this."
                  ]
                },
                "expiry": {
                  "type": "u32",
                  "description": [
                    "The block number where this HTLC expires/expired."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "The value of the HTLC."
                  ]
                },
                "direction": {
                  "type": "string",
                  "enum": [
                    "out",
                    "in"
                  ],
                  "description": [
                    "Out if we offered this to the peer, in if they offered it."
                  ]
                },
                "payment_hash": {
                  "type": "hash",
                  "description": [
                    "Payment hash sought by HTLC."
                  ]
                },
                "state": {
                  "type": "string",
                  "enum": [
                    "SENT_ADD_HTLC",
                    "SENT_ADD_COMMIT",
                    "RCVD_ADD_REVOCATION",
                    "RCVD_ADD_ACK_COMMIT",
                    "SENT_ADD_ACK_REVOCATION",
                    "RCVD_REMOVE_HTLC",
                    "RCVD_REMOVE_COMMIT",
                    "SENT_REMOVE_REVOCATION",
                    "SENT_REMOVE_ACK_COMMIT",
                    "RCVD_REMOVE_ACK_REVOCATION",
                    "RCVD_ADD_HTLC",
                    "RCVD_ADD_COMMIT",
                    "SENT_ADD_REVOCATION",
                    "SENT_ADD_ACK_COMMIT",
                    "RCVD_ADD_ACK_REVOCATION",
                    "SENT_REMOVE_HTLC",
                    "SENT_REMOVE_COMMIT",
                    "RCVD_REMOVE_REVOCATION",
                    "RCVD_REMOVE_ACK_COMMIT",
                    "SENT_REMOVE_ACK_REVOCATION"
                  ],
                  "description": [
                    "The first 10 states are for `in`, the next 10 are for `out`."
                  ]
                }
              }
            }
          }
        }
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listforwards(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listhtlcs#1",
            "method": "listhtlcs",
            "params": [
              "109x1x1"
            ]
          },
          "response": {
            "htlcs": [
              {
                "short_channel_id": "109x1x1",
                "id": 0,
                "expiry": 126,
                "direction": "out",
                "amount_msat": 500000000,
                "payment_hash": "684b5650b3deb052c93efe1fe16e7703b56272468eecdeb3daac5b81216dcb52",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 1,
                "expiry": 136,
                "direction": "out",
                "amount_msat": 10001,
                "payment_hash": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 2,
                "expiry": 149,
                "direction": "out",
                "amount_msat": 10001,
                "payment_hash": "80ff407792947a23f193f9a1968e9a437b071364ae3159f83631335c9a453c1b",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 3,
                "expiry": 155,
                "direction": "out",
                "amount_msat": 10000202,
                "payment_hash": "3b80a3028343b16f8ab7261343eae40ff73ba833b0b7d4dcbfd42a3078dc322b",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 4,
                "expiry": 152,
                "direction": "out",
                "amount_msat": 10001,
                "payment_hash": "0458c01fdd3aa0b9829002390301f92083e78dc27bb293bc3e7caee5d4ed7259",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 5,
                "expiry": 149,
                "direction": "out",
                "amount_msat": 10001,
                "payment_hash": "0458c01fdd3aa0b9829002390301f92083e78dc27bb293bc3e7caee5d4ed7259",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 6,
                "expiry": 132,
                "direction": "out",
                "amount_msat": 50001,
                "payment_hash": "788aea729ede48d315a199ce5ded76169601a61dd52e9734e707eb7c52e4e79e",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 7,
                "expiry": 142,
                "direction": "out",
                "amount_msat": 1002,
                "payment_hash": "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 8,
                "expiry": 137,
                "direction": "out",
                "amount_msat": 10001,
                "payment_hash": "968c136c07c39b17d1925358dd36f5dd86f8691c666ec27f24de5a84d590dc49",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 0,
                "expiry": 136,
                "direction": "in",
                "amount_msat": 1000000,
                "payment_hash": "a003badd6ad30f05f56e3607fd538456b05b9aad6135a494dad5320010af5844",
                "state": "SENT_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 9,
                "expiry": 136,
                "direction": "out",
                "amount_msat": 400000,
                "payment_hash": "781dc1aee5839bf106f264b0a06cf0740f2c71fc51c9562e90f4ee38ca0fc459",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listhtlcs#2",
            "method": "listhtlcs",
            "params": {}
          },
          "response": {
            "htlcs": [
              {
                "short_channel_id": "109x1x1",
                "id": 0,
                "expiry": 126,
                "direction": "out",
                "amount_msat": 500000000,
                "payment_hash": "684b5650b3deb052c93efe1fe16e7703b56272468eecdeb3daac5b81216dcb52",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 1,
                "expiry": 136,
                "direction": "out",
                "amount_msat": 10001,
                "payment_hash": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 2,
                "expiry": 149,
                "direction": "out",
                "amount_msat": 10001,
                "payment_hash": "80ff407792947a23f193f9a1968e9a437b071364ae3159f83631335c9a453c1b",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 3,
                "expiry": 155,
                "direction": "out",
                "amount_msat": 10000202,
                "payment_hash": "3b80a3028343b16f8ab7261343eae40ff73ba833b0b7d4dcbfd42a3078dc322b",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 4,
                "expiry": 152,
                "direction": "out",
                "amount_msat": 10001,
                "payment_hash": "0458c01fdd3aa0b9829002390301f92083e78dc27bb293bc3e7caee5d4ed7259",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 5,
                "expiry": 149,
                "direction": "out",
                "amount_msat": 10001,
                "payment_hash": "0458c01fdd3aa0b9829002390301f92083e78dc27bb293bc3e7caee5d4ed7259",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 6,
                "expiry": 132,
                "direction": "out",
                "amount_msat": 50001,
                "payment_hash": "788aea729ede48d315a199ce5ded76169601a61dd52e9734e707eb7c52e4e79e",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 7,
                "expiry": 142,
                "direction": "out",
                "amount_msat": 1002,
                "payment_hash": "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 8,
                "expiry": 137,
                "direction": "out",
                "amount_msat": 10001,
                "payment_hash": "968c136c07c39b17d1925358dd36f5dd86f8691c666ec27f24de5a84d590dc49",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 0,
                "expiry": 136,
                "direction": "in",
                "amount_msat": 1000000,
                "payment_hash": "a003badd6ad30f05f56e3607fd538456b05b9aad6135a494dad5320010af5844",
                "state": "SENT_REMOVE_ACK_REVOCATION"
              },
              {
                "short_channel_id": "109x1x1",
                "id": 9,
                "expiry": 136,
                "direction": "out",
                "amount_msat": 400000,
                "payment_hash": "781dc1aee5839bf106f264b0a06cf0740f2c71fc51c9562e90f4ee38ca0fc459",
                "state": "RCVD_REMOVE_ACK_REVOCATION"
              }
            ]
          }
        }
      ]
    },
    "lightning-listinvoicerequests.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v22.11",
      "rpc": "listinvoicerequests",
      "title": "Command for querying invoice_request status",
      "description": [
        "The **listinvoicerequests** RPC command gets the status of a specific `invoice_request`, if it exists, or the status of all `invoice_requests` if given no argument."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "invreq_id": {
            "type": "string",
            "description": [
              "A specific invoice can be queried by providing the `invreq_id`, which is presented by lightning-invoicerequest(7), or can be calculated from a bolt12 invoice."
            ]
          },
          "active_only": {
            "type": "boolean",
            "description": [
              "If it is *True* then only active invoice requests are returned."
            ],
            "default": "*False*"
          }
        }
      },
      "response": {
        "required": [
          "invoicerequests"
        ],
        "properties": {
          "invoicerequests": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "invreq_id",
                "single_use",
                "active",
                "bolt12",
                "used"
              ],
              "properties": {
                "invreq_id": {
                  "type": "hash",
                  "description": [
                    "The SHA256 hash of all invoice_request fields less than 160."
                  ]
                },
                "active": {
                  "type": "boolean",
                  "description": [
                    "Whether the invoice_request is currently active."
                  ]
                },
                "single_use": {
                  "type": "boolean",
                  "description": [
                    "Whether the invoice_request will become inactive after we pay an invoice for it."
                  ]
                },
                "bolt12": {
                  "type": "string",
                  "description": [
                    "The bolt12 string starting with lnr."
                  ]
                },
                "used": {
                  "type": "boolean",
                  "description": [
                    "Whether the invoice_request has already been used."
                  ]
                },
                "label": {
                  "type": "string",
                  "description": [
                    "The label provided when creating the invoice_request."
                  ]
                }
              }
            }
          }
        }
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-invoicerequests(7)",
        "lightning-disableinvoicerequest(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listinvoicerequests#1",
            "method": "listinvoicerequests",
            "params": [
              "a621a0e8e8ea9aa97fd47ab9b140e413be7f4ea45377617e693eb7afe5a3dbf9"
            ]
          },
          "response": {
            "invoicerequests": [
              {
                "invreq_id": "a621a0e8e8ea9aa97fd47ab9b140e413be7f4ea45377617e693eb7afe5a3dbf9",
                "active": false,
                "single_use": true,
                "bolt12": "lnr1qqgx5t5hcw5ru9fgkhgxj4thjq4ugzsk2fjhzat9wd6xjmn8ypnx7u3qd9h8vmmfvdj3yyrrd35kw6r5de5kueeqwd6x7un92qsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzr6jqwvfdqzcyypz6g3kyz34nfrl7lm6c3rushzxey3a55ecjgs6qp2vz8q78j336k0sgpvamrunx5t6vdaeu7nmmlh5u6f0dnscasy2alyxq79f5wnc043gxrzyqt640dmuj7c94644j5ae6wfse7tsejwqnmc575ly9t38h4hf",
                "used": false
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listinvoicerequests#2",
            "method": "listinvoicerequests",
            "params": {}
          },
          "response": {
            "invoicerequests": [
              {
                "invreq_id": "93f193cd2432d292f8b64af08942989d71c0a0366fb52d57ddb688c8fb066399",
                "active": false,
                "single_use": true,
                "bolt12": "lnr1qqgypua5g7rp293k00s66ayvnv26czst2d5k6urvv5s8getnw3gzqp3zderpzxstt8927ynqg044h0egcd8n5h3n9g0u0v4h8ncc3yg02gps7sjqtqssytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82e7pq947t0ks7a4yejz8w79x4zj25s3pu6zrnw2e0v2ugdescpcqsq307z4p2dlxe92fv7xd43qut0pjkg4y094hupqyhsj8dlhvmmfng6sv",
                "used": true
              },
              {
                "invreq_id": "a621a0e8e8ea9aa97fd47ab9b140e413be7f4ea45377617e693eb7afe5a3dbf9",
                "active": false,
                "single_use": true,
                "bolt12": "lnr1qqgx5t5hcw5ru9fgkhgxj4thjq4ugzsk2fjhzat9wd6xjmn8ypnx7u3qd9h8vmmfvdj3yyrrd35kw6r5de5kueeqwd6x7un92qsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzr6jqwvfdqzcyypz6g3kyz34nfrl7lm6c3rushzxey3a55ecjgs6qp2vz8q78j336k0sgpvamrunx5t6vdaeu7nmmlh5u6f0dnscasy2alyxq79f5wnc043gxrzyqt640dmuj7c94644j5ae6wfse7tsejwqnmc575ly9t38h4hf",
                "used": false
              }
            ]
          }
        }
      ]
    },
    "lightning-listinvoices.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listinvoices",
      "title": "Command for querying invoice status",
      "description": [
        "The **listinvoices** RPC command gets the status of a specific invoice, if it exists, or the status of all invoices if given no argument.",
        "",
        "Only one of the query parameters can be used from *label*, *invstring*, *payment_hash*, or *offer_id*."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "label": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "description": [
              "A label used a the creation of the invoice to get a specific invoice."
            ]
          },
          "invstring": {
            "type": "string",
            "description": [
              "The string value to query a specific invoice."
            ]
          },
          "payment_hash": {
            "type": "hex",
            "description": [
              "A payment_hash of the invoice to get the details of a specific invoice."
            ]
          },
          "offer_id": {
            "type": "string",
            "description": [
              "A local `offer_id` the invoice was issued for a specific invoice details."
            ]
          },
          "index": {
            "type": "string",
            "added": "v23.08",
            "enum": [
              "created",
              "updated"
            ],
            "description": [
              "If neither *in_channel* nor *out_channel* is specified, it controls ordering."
            ],
            "default": "`created`"
          },
          "start": {
            "type": "u64",
            "added": "v23.08",
            "description": [
              "If `index` is specified, `start` may be specified to start from that value, which is generally returned from lightning-wait(7)."
            ]
          },
          "limit": {
            "type": "u32",
            "added": "v23.08",
            "description": [
              "If `index` is specified, `limit` can be used to specify the maximum number of entries to return."
            ]
          }
        },
        "dependentUpon": {
          "index": [
            "start",
            "limit"
          ]
        }
      },
      "response": {
        "required": [
          "invoices"
        ],
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "label",
                "created_index",
                "payment_hash",
                "status",
                "expires_at"
              ],
              "properties": {
                "label": {
                  "type": "string",
                  "description": [
                    "Unique label supplied at invoice creation."
                  ]
                },
                "description": {
                  "type": "string",
                  "description": [
                    "Description used in the invoice."
                  ]
                },
                "payment_hash": {
                  "type": "hash",
                  "description": [
                    "The hash of the *payment_preimage* which will prove payment."
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "unpaid",
                    "paid",
                    "expired"
                  ],
                  "description": [
                    "Whether it's paid, unpaid or unpayable."
                  ]
                },
                "expires_at": {
                  "type": "u64",
                  "description": [
                    "UNIX timestamp of when it will become / became unpayable."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount required to pay this invoice."
                  ]
                },
                "bolt11": {
                  "type": "string",
                  "description": [
                    "The BOLT11 string (always present unless *bolt12* is)."
                  ]
                },
                "bolt12": {
                  "type": "string",
                  "description": [
                    "The BOLT12 string (always present unless *bolt11* is)."
                  ]
                },
                "local_offer_id": {
                  "type": "hash",
                  "description": [
                    "The *id* of our offer which created this invoice (**experimental-offers** only)."
                  ]
                },
                "invreq_payer_note": {
                  "type": "string",
                  "description": [
                    "The optional *invreq_payer_note* from invoice_request which created this invoice (**experimental-offers** only)."
                  ]
                },
                "created_index": {
                  "type": "u64",
                  "added": "v23.08",
                  "description": [
                    "1-based index indicating order this invoice was created in."
                  ]
                },
                "updated_index": {
                  "type": "u64",
                  "added": "v23.08",
                  "description": [
                    "1-based index indicating order this invoice was changed (only present if it has changed since creation)."
                  ]
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "paid"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "pay_index",
                      "amount_received_msat",
                      "paid_at",
                      "payment_preimage"
                    ],
                    "properties": {
                      "label": {},
                      "description": {},
                      "payment_hash": {},
                      "status": {},
                      "msatoshi": {},
                      "amount_msat": {},
                      "bolt11": {},
                      "bolt12": {},
                      "local_offer_id": {},
                      "invreq_payer_note": {},
                      "expires_at": {},
                      "created_index": {},
                      "updated_index": {},
                      "pay_index": {
                        "type": "u64",
                        "description": [
                          "Unique incrementing index for this payment."
                        ]
                      },
                      "amount_received_msat": {
                        "type": "msat",
                        "description": [
                          "The amount actually received (could be slightly greater than *amount_msat*, since clients may overpay)."
                        ]
                      },
                      "paid_at": {
                        "type": "u64",
                        "description": [
                          "UNIX timestamp of when it was paid."
                        ]
                      },
                      "paid_outpoint": {
                        "type": "object",
                        "description": [
                          "Outpoint this invoice was paid with."
                        ],
                        "added": "v23.11",
                        "additionalProperties": false,
                        "required": [
                          "txid",
                          "outnum"
                        ],
                        "properties": {
                          "txid": {
                            "added": "v23.11",
                            "type": "txid",
                            "description": [
                              "ID of the transaction that paid the invoice."
                            ]
                          },
                          "outnum": {
                            "added": "v23.11",
                            "type": "u32",
                            "description": [
                              "The 0-based output number of the transaction that paid the invoice."
                            ]
                          }
                        }
                      },
                      "payment_preimage": {
                        "type": "secret",
                        "description": [
                          "Proof of payment."
                        ]
                      }
                    }
                  },
                  "else": {
                    "additionalProperties": false,
                    "properties": {
                      "label": {},
                      "description": {},
                      "payment_hash": {},
                      "status": {},
                      "msatoshi": {},
                      "amount_msat": {},
                      "bolt11": {},
                      "bolt12": {},
                      "local_offer_id": {},
                      "invreq_payer_note": {},
                      "created_index": {},
                      "updated_index": {},
                      "expires_at": {}
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-waitinvoice(7)",
        "lightning-delinvoice(7)",
        "lightning-invoice(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listinvoices#1",
            "method": "listinvoices",
            "params": {
              "label": "lbl_l21"
            }
          },
          "response": {
            "invoices": [
              {
                "label": "lbl_l21",
                "bolt11": "lnbcrt1pn2s3xxsp5xvccgadvepzypat5v8u8tstwdvn9ez4908h7ntl4s0ggx76ug4cqpp50qwurth9swdlzphjvjc2qm8sws8jcu0u28y4vt5s7nhr3js0c3vsdqcdserzgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqw4qfxj30wqn2m2qmcfz2gs6ttszdhkc0kjqk0mgg59tj2cy90wcke4tjzmzakrkvcgqgf3367j47q5g2ruuw67cxaqxm2t4m42yecsqp92jzs7",
                "payment_hash": "781dc1aee5839bf106f264b0a06cf0740f2c71fc51c9562e90f4ee38ca0fc459",
                "status": "paid",
                "pay_index": 3,
                "amount_received_msat": 400000,
                "paid_at": 1722303718,
                "payment_preimage": "af67b48518e78e157db404d13cb42987c31e034634203d10b224302b05fc6c90",
                "description": "l21 description",
                "expires_at": 1722908486,
                "created_index": 2,
                "updated_index": 3
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listinvoices#2",
            "method": "listinvoices",
            "params": {}
          },
          "response": {
            "invoices": [
              {
                "label": "lbl balance l1 to l2",
                "bolt11": "lnbcrt5m1pn2s39ksp53sknyy2mxxurt4y0wqgp730z0cnm0vz3zmzth8p79xsrtmg5llxspp5dp94v59nm6c99jf7lc07zmnhqw6kyujx3mkdav7643dczgtdedfqdpcv3jhxcmjd9c8g6t0dcs8xetwvss8xmmdv5s8xct5wvsxcvfqw3hjqmpjxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqdz9cftkxe6kcqfddyrvr7j57ulsfxxxkgkjyhr3k77n8v59mzs5rmuexz9lxusyhhehlemd9ujclgahln8e0n8y86stc7u8uys6mjqgqerm6q4",
                "payment_hash": "684b5650b3deb052c93efe1fe16e7703b56272468eecdeb3daac5b81216dcb52",
                "amount_msat": 500000000,
                "status": "paid",
                "pay_index": 1,
                "amount_received_msat": 500000000,
                "paid_at": 1722303671,
                "payment_preimage": "bed4140e1db302720d7f9547dc9127d45b115080447cce7e23cfd00b60991831",
                "description": "description send some sats l1 to l2",
                "expires_at": 1722908470,
                "created_index": 1,
                "updated_index": 1
              },
              {
                "label": "lbl_l21",
                "bolt11": "lnbcrt1pn2s3xxsp5xvccgadvepzypat5v8u8tstwdvn9ez4908h7ntl4s0ggx76ug4cqpp50qwurth9swdlzphjvjc2qm8sws8jcu0u28y4vt5s7nhr3js0c3vsdqcdserzgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqw4qfxj30wqn2m2qmcfz2gs6ttszdhkc0kjqk0mgg59tj2cy90wcke4tjzmzakrkvcgqgf3367j47q5g2ruuw67cxaqxm2t4m42yecsqp92jzs7",
                "payment_hash": "781dc1aee5839bf106f264b0a06cf0740f2c71fc51c9562e90f4ee38ca0fc459",
                "status": "paid",
                "pay_index": 3,
                "amount_received_msat": 400000,
                "paid_at": 1722303718,
                "payment_preimage": "af67b48518e78e157db404d13cb42987c31e034634203d10b224302b05fc6c90",
                "description": "l21 description",
                "expires_at": 1722908486,
                "created_index": 2,
                "updated_index": 3
              },
              {
                "label": "lbl_l22",
                "bolt11": "lnbcrt2u1pn2s3xxsp5cpcdj2cy5wpd2nphp2evrp9kqymxf9434zftkmdd6dlgmy8cu78qpp58yq5qf3h0694xwymzjs5e8eejce83vjmxv6cpwqv8cs9e05dxe4qdqcdserygryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgq9wlpxf8ur0q798646w94tduf6wfkaw7m0ecmxepgatd4utvsyvcy0pku9t8m39rlsjzhe8x53mup5jkn0f84clfj3ctc6qj09t35wxspycpup2",
                "payment_hash": "39014026377e8b53389b14a14c9f39963278b25b333580b80c3e205cbe8d366a",
                "amount_msat": 200000,
                "status": "unpaid",
                "description": "l22 description",
                "expires_at": 1722908486,
                "created_index": 3
              },
              {
                "label": "label inv_l24",
                "bolt11": "lnbcrt1230n1pn2s38psp5jf2zk7py4wmutyq4pdr6783egft24nkyhfrxegrzzqnef2matw2qpp5rf5zgqyexdt7q5ean83cvcjuc3jafn8etm3c0za6xldwcyllvffqdqlv3jhxcmjd9c8g6t0dcsxjmnktakrydqcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgq8nn5qkcp9xl5u7dlqamdys6e6yc0ngyqe676cqajnwax6657verj7at5gvdqu6nk3l0wcagq4muyhqqms4t0t9sfvyazpga5eywj6uqpyc409e",
                "payment_hash": "1a682400993357e0533d99e386625cc465d4ccf95ee3878bba37daec13ff6252",
                "amount_msat": 123000,
                "status": "unpaid",
                "description": "description inv_l24",
                "expires_at": 1722307313,
                "created_index": 4
              },
              {
                "label": "label inv_l25",
                "bolt11": "lnbcrt1240n1pn2s38psp5ufjqj6kuxlvl65xue9p06ulyvwf9sm0utxlch59d0ynl05778vwspp5qlacxkrdmc2p50yl8lsl75pwmlhve2ret2yd2f34z7jfs7yffwvqdqlv3jhxcmjd9c8g6t0dcsxjmnktakrydgcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqkml60qaytvnd08p57w7enuna95s7cqej8cfuvsgjzpeq9u83s0hqh60667nrp40qkqxkdu36z8wqtmac5z3208rwyn0q2pv56sgz5dcp9mn5hc",
                "payment_hash": "07fb83586dde141a3c9f3fe1ff502edfeecca8795a88d5263517a49878894b98",
                "amount_msat": 124000,
                "status": "unpaid",
                "description": "description inv_l25",
                "expires_at": 1722307313,
                "created_index": 5
              },
              {
                "label": "label inv_l26",
                "bolt11": "lnbcrt1250n1pn2s38psp5u22hlvy5mk7keq57m4fatz7aqnmh4whcuk45npdexrw4m5athcvqpp5ps4h5lt8waz5pprvad3skzssnksl2wxng985rcsuedp8teh29rkqdqlv3jhxcmjd9c8g6t0dcsxjmnktakrydscqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqyljtru0gcvqh7k5l9u8ulcuxw8fwa9qycyd32hl7wwdpjtlefgrpyjch6aprcdah2pthx3pku3y7c6dzluzjjy9c32cs3m5hqq6ww3sp0j4tr8",
                "payment_hash": "0c2b7a7d67774540846ceb630b0a109da1f538d3414f41e21ccb4275e6ea28ec",
                "amount_msat": 125000,
                "status": "unpaid",
                "description": "description inv_l26",
                "expires_at": 1722307313,
                "created_index": 6
              },
              {
                "label": "lbl_l13",
                "bolt11": "lnbcrt1u1pn2s38zsp5j9w8t9p2y6an5se63n3vkpp8c20vdsthtn78sv5t2lmt57l742wqpp5wtxkappzcsrlkmgfs6g0zyct0hkhashh7hsaxz7e65slq9fkx7fsdqcdscnxgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqd5qqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqcjq9fq26ph2skcsm65xjwnw3crgygpampszjcvqs8aw2zf3jzcxqg4dh58fm8mxul29vh5urpyjkll9m4dq3807xcmq2q9yvgd5qt7qp695qvu",
                "payment_hash": "72cd6e8422c407fb6d098690f1130b7ded7ec2f7f5e1d30bd9d521f015363793",
                "amount_msat": 100000,
                "status": "unpaid",
                "description": "l13 description",
                "expires_at": 1722908514,
                "created_index": 7
              },
              {
                "label": "lbl_l23",
                "bolt11": "lnbcrt1pn2s38zsp5lv49w44a8tvkwtkxfxwts8rnr864u59srp7sxuua3haahdhlhtrqpp5p928w8rmsg2hjeymedcn54vxhsz372qhcedgf003nmsknhx9594sdqcdserxgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqt5h8te9lkn0jpdkhkmlkzs80aw7mt5kdm6jxmvddkavt3vj0vakkmfcs0hsde8y8g8za46sch2lp4jxy56u8ve25sgpgcsya0vp92sgphzw570",
                "payment_hash": "0954771c7b821579649bcb713a5586bc051f2817c65a84bdf19ee169dcc5a16b",
                "status": "paid",
                "pay_index": 2,
                "amount_received_msat": 9900,
                "paid_at": 1722303715,
                "payment_preimage": "f3a3b40d63e62785f537aad60f93980914c5639872c7746299a6a1228abbc303",
                "description": "l23 description",
                "expires_at": 1722908514,
                "created_index": 8,
                "updated_index": 2
              },
              {
                "label": "dca9774ba2925b48c42eb12e599c09389d9d80d44445c4d0c944556c7228746e-025f3305ae63d757b277dd49301833087ba6208e743ce95fa6e950fa80be407e5f-0",
                "bolt12": "lni1qqg9g04gczk9ntk4gsjg3aptwykk2q3qqc3xu3s3rg94nj40zfsy866mhu5vxne6tcej5878k2mneuvgjy8ssq38zq9q53nfwd5zqumpd3jjz93pqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4j5pqqc3xu3s3rg94nj40zfsy866mhu5vxne6tcej5878k2mneuvgjy84sggztuesttnr6atmya7afycpsvcg0wnzprn58n54lfhf2ragp0jq0e04j9z5dpsku6mnypnx7u3qw35x2grxd9eksgdqnqpz6g3kyz34nfrl7lm6c3rushzxey3a55ecjgs6qp2vz8q78j336kgr6euj6p39a209zw5kpkftk7h9te69vlmjg0arceagpaajague0zsszqk96htpgqn2wsznaas0zfdtf8v97ryz29jrn7rwgs5687ghgq5jusqr99dtx4jdj9nqpep5zxmynegrg6e7rm2l53ur8043h2yqzldyl5vh08h8ssaeq5jrvw9y24kztlwvc4nwagsuqqqqqqqqqqqqqqq9qqqqqqqqqqqqq8fykt06c5sqqqqqpfqyv65yfedgyqrp2s7qpxpjse8q8796qcrr5xwgfkqjue3urd6rs2rt2f68tk0vl2szyugtqggz953rvg9rtxj8lalh43z8epwydjfrmffn3y3p5qz5cywpu09rr4vlqsy2n7vmpn67ltzrj70znp70sk4m530j5vceq6jhk97h7ttzn09sh8m9gecarrt27v2tux8z6rr06sj9h60r05p4vhkhzsp0xf9ea4jgg",
                "payment_hash": "061543c009832864e03f8ba06063a19c84d812e663c1b7438286b527475d9ecf",
                "amount_msat": 10000,
                "status": "unpaid",
                "description": "Fish sale!",
                "expires_at": 1722310917,
                "local_offer_id": "dca9774ba2925b48c42eb12e599c09389d9d80d44445c4d0c944556c7228746e",
                "invreq_payer_note": "Thanks for the fish!",
                "created_index": 9
              },
              {
                "label": "f901018768e13ea2da95f437749e24d22d47b2a6ea3030ef66ae0281df49d94b-03014d72261012e28cb4711a985c1475eba04a0058f9d04321b4cf1de479711d6f-0",
                "bolt12": "lni1qqg86u6jfl660zfuk22sexem37r7xq3qqc3xu3s3rg94nj40zfsy866mhu5vxne6tcej5878k2mneuvgjy8ssqc0gfqq5pjrdanxvet9zsqs593pqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4j5pqqc3xu3s3rg94nj40zfsy866mhu5vxne6tcej5878k2mneuvgjy84yqc7sjq9vqgztqssxq2dwgnpqyhz3j68zx5cts28t6aqfgq937wsgvsmfncau3uhz8t05zvqytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82eq2rdjuqaychg3jndvsjrlu6y08aeuh4ytw6f6ak5n24p5n8zmsz2sqgrg3rg89hqfh6n7dfr0fugvq20ehecd3ezc438l6uh4r8epaakn4lsqv4qgr3ks4yxngyflq339lza456xt8uly085umq3gwql3qyfge0ec03dezeg8xulz33ntlj8yd7dcra9564zrsqqqqqqqqqqqqqqq5qqqqqqqqqqqqqayjedltzjqqqqqq9yq3n2s3894qsfwwvj3szk4yplg4fkw68nwzlwyc23457qx6v7xe38znuha72km6a2qv0gfq9syypz6g3kyz34nfrl7lm6c3rushzxey3a55ecjgs6qp2vz8q78j336k0sgz2rxjcsxs6s3lnngq9xeqn9pzy53n50p4ulcdvkx8dye7h8xgxpvjyg928m2txk2knl0zzfl7j82c6lq7xqlx83ey7z4aux9pjp4sp7",
                "payment_hash": "9739928c056a903f45536768f370bee26151ad3c03699e3662714f97ef956deb",
                "amount_msat": 2000000,
                "status": "unpaid",
                "description": "Coffee",
                "expires_at": 1722310917,
                "local_offer_id": "f901018768e13ea2da95f437749e24d22d47b2a6ea3030ef66ae0281df49d94b",
                "created_index": 10
              }
            ]
          }
        }
      ]
    },
    "lightning-listnodes.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listnodes",
      "title": "Command to get the list of nodes in the known network.",
      "description": [
        "The **listnodes** command returns nodes the node has learned about via gossip messages, or a single one if the node *id* was specified."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "The public key of the node to list."
            ]
          }
        }
      },
      "response": {
        "required": [
          "nodes"
        ],
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "nodeid"
              ],
              "properties": {
                "nodeid": {
                  "type": "pubkey",
                  "description": [
                    "The public key of the node."
                  ]
                },
                "last_timestamp": {
                  "type": "u32",
                  "description": [
                    "A node_announcement has been received for this node (UNIX timestamp)."
                  ]
                }
              },
              "allOf": [
                {
                  "if": {
                    "required": [
                      "last_timestamp"
                    ]
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "nodeid",
                      "last_timestamp",
                      "alias",
                      "color",
                      "features",
                      "addresses"
                    ],
                    "properties": {
                      "nodeid": {},
                      "last_timestamp": {},
                      "option_will_fund": {},
                      "alias": {
                        "type": "string",
                        "description": [
                          "The fun alias this node advertized."
                        ],
                        "maxLength": 32
                      },
                      "color": {
                        "type": "hex",
                        "description": [
                          "The favorite RGB color this node advertized."
                        ],
                        "minLength": 6,
                        "maxLength": 6
                      },
                      "features": {
                        "type": "hex",
                        "description": [
                          "BOLT #9 features bitmap this node advertized."
                        ]
                      },
                      "addresses": {
                        "type": "array",
                        "description": [
                          "The addresses this node advertized."
                        ],
                        "items": {
                          "type": "object",
                          "required": [
                            "type",
                            "port"
                          ],
                          "additionalProperties": true,
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "dns",
                                "ipv4",
                                "ipv6",
                                "torv2",
                                "torv3"
                              ],
                              "description": [
                                "Type of connection (until 23.08, `websocket` was also allowed)."
                              ]
                            },
                            "port": {
                              "type": "u16",
                              "description": [
                                "Port number."
                              ]
                            }
                          },
                          "if": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "dns",
                                  "ipv4",
                                  "ipv6",
                                  "torv2",
                                  "torv3"
                                ]
                              }
                            }
                          },
                          "then": {
                            "required": [
                              "type",
                              "address",
                              "port"
                            ],
                            "additionalProperties": false,
                            "properties": {
                              "type": {},
                              "port": {},
                              "address": {
                                "type": "string",
                                "description": [
                                  "Address in expected format for **type**."
                                ]
                              }
                            }
                          },
                          "else": {
                            "required": [
                              "type",
                              "port"
                            ],
                            "additionalProperties": false,
                            "properties": {
                              "type": {},
                              "port": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "else": {
                    "additionalProperties": false,
                    "properties": {
                      "nodeid": {}
                    }
                  }
                },
                {
                  "if": {
                    "required": [
                      "option_will_fund"
                    ]
                  },
                  "then": {
                    "additionalProperties": true,
                    "required": [
                      "option_will_fund"
                    ],
                    "properties": {
                      "option_will_fund": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "lease_fee_base_msat",
                          "lease_fee_basis",
                          "funding_weight",
                          "channel_fee_max_base_msat",
                          "channel_fee_max_proportional_thousandths",
                          "compact_lease"
                        ],
                        "properties": {
                          "lease_fee_base_msat": {
                            "type": "msat",
                            "description": [
                              "The fixed fee for a lease (whole number of satoshis)."
                            ]
                          },
                          "lease_fee_basis": {
                            "type": "u32",
                            "description": [
                              "The proportional fee in basis points (parts per 10,000) for a lease."
                            ]
                          },
                          "funding_weight": {
                            "type": "u32",
                            "description": [
                              "The onchain weight you'll have to pay for a lease."
                            ]
                          },
                          "channel_fee_max_base_msat": {
                            "type": "msat",
                            "description": [
                              "The maximum base routing fee this node will charge during the lease."
                            ]
                          },
                          "channel_fee_max_proportional_thousandths": {
                            "type": "u32",
                            "description": [
                              "The maximum proportional routing fee this node will charge during the lease (in thousandths, not millionths like channel_update)."
                            ]
                          },
                          "compact_lease": {
                            "type": "hex",
                            "description": [
                              "The lease as represented in the node_announcement."
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters."
      ],
      "author": [
        "Vincenzo Palazzo <<vincenzo.palazzo@protonmail.com>> wrote the initial version of this man page,",
        "but many others did the hard work of actually implementing this rpc command."
      ],
      "see_also": [
        "lightning-listchannels(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listnodes#1",
            "method": "listnodes",
            "params": {
              "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d"
            }
          },
          "response": {
            "nodes": [
              {
                "nodeid": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "alias": "HOPPINGFIRE--190-g5fd2f9c-modded",
                "color": "035d2b",
                "last_timestamp": 1722303669,
                "features": "88a0802a8a59a1",
                "addresses": []
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listnodes#2",
            "method": "listnodes",
            "params": {}
          },
          "response": {
            "nodes": [
              {
                "nodeid": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "alias": "SILENTARTIST-190-g5fd2f9c-modded",
                "color": "022d22",
                "last_timestamp": 1722303662,
                "features": "88a0802a8a59a1",
                "addresses": []
              },
              {
                "nodeid": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                "alias": "JUNIORBEAM-5-190-g5fd2f9c-modded",
                "color": "0266e4",
                "last_timestamp": 1722303662,
                "features": "88a0802a8a59a1",
                "addresses": []
              },
              {
                "nodeid": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "alias": "HOPPINGFIRE--190-g5fd2f9c-modded",
                "color": "035d2b",
                "last_timestamp": 1722303669,
                "features": "88a0802a8a59a1",
                "addresses": []
              },
              {
                "nodeid": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "alias": "JUNIORFELONY-190-g5fd2f9c-modded",
                "color": "0382ce",
                "last_timestamp": 1722303669,
                "features": "88a0802a8a59a1",
                "addresses": []
              }
            ]
          }
        }
      ]
    },
    "lightning-listoffers.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listoffers",
      "title": "Command for listing offers",
      "warning": "experimental-offers only",
      "description": [
        "The **listoffers** RPC command list all offers, or with `offer_id`, only the offer with that offer_id (if it exists)."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "offer_id": {
            "type": "hash",
            "description": [
              "Offer_id to get details for (if it exists)."
            ]
          },
          "active_only": {
            "type": "boolean",
            "description": [
              "If set and is true, only offers with `active` true are returned."
            ]
          }
        }
      },
      "response": {
        "required": [
          "offers"
        ],
        "properties": {
          "offers": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "offer_id",
                "active",
                "single_use",
                "bolt12",
                "used"
              ],
              "properties": {
                "offer_id": {
                  "type": "hash",
                  "description": [
                    "The id of this offer (merkle hash of non-signature fields)."
                  ]
                },
                "active": {
                  "type": "boolean",
                  "description": [
                    "Whether this can still be used."
                  ]
                },
                "single_use": {
                  "type": "boolean",
                  "description": [
                    "Whether this expires as soon as it's paid."
                  ]
                },
                "bolt12": {
                  "type": "string",
                  "description": [
                    "The bolt12 encoding of the offer."
                  ]
                },
                "used": {
                  "type": "boolean",
                  "description": [
                    "True if an associated invoice has been paid."
                  ]
                },
                "label": {
                  "type": "string",
                  "description": [
                    "The (optional) user-specified label."
                  ]
                }
              }
            }
          }
        }
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-offer(7)",
        "lightning-listoffers(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listoffers#1",
            "method": "listoffers",
            "params": {
              "active_only": true
            }
          },
          "response": {
            "offers": [
              {
                "offer_id": "dca9774ba2925b48c42eb12e599c09389d9d80d44445c4d0c944556c7228746e",
                "active": true,
                "single_use": false,
                "bolt12": "lno1qgsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzrcgqgn3qzs2ge5hx6pqwdskcefpzcssytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82e",
                "used": false
              },
              {
                "offer_id": "f901018768e13ea2da95f437749e24d22d47b2a6ea3030ef66ae0281df49d94b",
                "active": true,
                "single_use": false,
                "bolt12": "lno1qgsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzrcgqv85ysq2qepk7enxv4j3gqg2zcssytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82e",
                "used": false
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listoffers#2",
            "method": "listoffers",
            "params": [
              "b791f88cebf775853112c30828e116487f4d6c252d669372532b468bc7de8a24"
            ]
          },
          "response": {
            "offers": [
              {
                "offer_id": "b791f88cebf775853112c30828e116487f4d6c252d669372532b468bc7de8a24",
                "active": false,
                "single_use": false,
                "bolt12": "lno1qgsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzrcgqv0gfqq2zp8kven9wgs8gmeqg35hxctzd3j3vggz953rvg9rtxj8lalh43z8epwydjfrmffn3y3p5qz5cywpu09rr4vs",
                "used": false
              }
            ]
          }
        }
      ]
    },
    "lightning-listpays.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listpays",
      "title": "Command for querying payment status",
      "description": [
        "The **listpay** RPC command gets the status of all *pay* commands, or a single one if either *bolt11* or *payment_hash* was specified."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "bolt11": {
            "type": "string",
            "description": [
              "Bolt11 string to get the payment details."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "Payment hash to get the payment details."
            ]
          },
          "status": {
            "type": "string",
            "description": [
              "To filter the payment by status."
            ],
            "enum": [
              "pending",
              "complete",
              "failed"
            ]
          }
        }
      },
      "response": {
        "required": [
          "pays"
        ],
        "properties": {
          "pays": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "payment_hash",
                "status",
                "created_at"
              ],
              "properties": {
                "payment_hash": {
                  "type": "hash",
                  "description": [
                    "The hash of the *payment_preimage* which will prove payment."
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "pending",
                    "failed",
                    "complete"
                  ],
                  "description": [
                    "Status of the payment."
                  ]
                },
                "destination": {
                  "type": "pubkey",
                  "description": [
                    "The final destination of the payment if known."
                  ]
                },
                "created_at": {
                  "type": "u64",
                  "description": [
                    "The UNIX timestamp showing when this payment was initiated."
                  ]
                },
                "completed_at": {
                  "type": "u64",
                  "description": [
                    "The UNIX timestamp showing when this payment was completed."
                  ]
                },
                "label": {
                  "type": "string",
                  "description": [
                    "The label, if given to sendpay."
                  ]
                },
                "bolt11": {
                  "type": "string",
                  "description": [
                    "The bolt11 string (if pay supplied one)."
                  ]
                },
                "description": {
                  "type": "string",
                  "description": [
                    "The description matching the bolt11 description hash (if pay supplied one)."
                  ]
                },
                "bolt12": {
                  "type": "string",
                  "description": [
                    "The bolt12 string (if supplied for pay: **experimental-offers** only)."
                  ]
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "complete"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "amount_sent_msat",
                      "preimage"
                    ],
                    "properties": {
                      "payment_hash": {},
                      "status": {},
                      "destination": {},
                      "created_at": {},
                      "completed_at": {},
                      "label": {},
                      "bolt11": {},
                      "description": {},
                      "bolt12": {},
                      "amount_msat": {
                        "type": "msat",
                        "description": [
                          "The amount of millisatoshi we intended to send to the destination."
                        ]
                      },
                      "amount_sent_msat": {
                        "type": "msat",
                        "description": [
                          "The amount of millisatoshi we sent in order to pay (may include fees and not match amount_msat)."
                        ]
                      },
                      "preimage": {
                        "type": "secret",
                        "description": [
                          "Proof of payment."
                        ]
                      },
                      "number_of_parts": {
                        "type": "u64",
                        "description": [
                          "The number of parts for a successful payment (only if more than one)."
                        ]
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "failed"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "amount_sent_msat"
                    ],
                    "properties": {
                      "payment_hash": {},
                      "status": {},
                      "destination": {},
                      "created_at": {},
                      "label": {},
                      "bolt11": {},
                      "description": {},
                      "bolt12": {},
                      "amount_sent_msat": {},
                      "erroronion": {
                        "type": "hex",
                        "description": [
                          "The error onion returned on failure, if any."
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "post_return_value_notes": [
          "The returned array is ordered by increasing **created_at** fields."
        ]
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-pay(7)",
        "lightning-paystatus(7)",
        "lightning-listsendpays(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listpays#1",
            "method": "listpays",
            "params": {
              "bolt11": "lnbcrt500n1pn2s396sp5h5tz6fpm3dxvrlwcnwmfq85v45wfj43mdmplpce6ku2vmfdhrx5qpp50z9w5u57meydx9dpn889mmtkz6tqrfsa65hfwd88ql4hc5hyu70qdqcdsenygryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqt5m8qx0t25a0gygya7u4sxulyyp2dec87pwsxuuwtg0u66c07703g9j6vlwgmlhqk7qgn95qw7allhnuj2m9hf0xkcr2zkaxltv3t6gqjcdpll"
            }
          },
          "response": {
            "pays": []
          }
        },
        {
          "request": {
            "id": "example:listpays#2",
            "method": "listpays",
            "params": {}
          },
          "response": {
            "pays": [
              {
                "bolt11": "lnbcrt5m1pn2s39hsp50pekdm9axtcfm0ttsxzg2z0738ujk5uc3n0v5rul2y2ghkeh772qpp50a60qe8lg55t0mru27xlvcnpwetu46d0ff60tuj0dr9cged3secqdpcv3jhxcmjd9c8g6t0dcs8xetwvss8xmmdv5s8xct5wvsxcv3qw3hjqmpnxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqcjj3uz0ux4qxt4ev4patfwz44e7ns57tmvxdwzfq2pj5drm5xhk5agm8j2wha32g664a0mw6casy44vfdf76jj38n3669fsjps4jkaqpaydvjr",
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "payment_hash": "7f74f064ff4528b7ec7c578df662617657cae9af4a74f5f24f68cb8465b18670",
                "status": "complete",
                "created_at": 1722303671,
                "completed_at": 1722303672,
                "preimage": "d9893938f4464933d87f5123a8c09b4e98e106c9c34c1812340c9570d72d16a2",
                "amount_msat": 500000000,
                "amount_sent_msat": 500000000
              },
              {
                "bolt11": "lnbcrt5m1pn2s39csp59778k5kecnjhyqu7amy99kt8nhu43ap74m8q3xryvqxrjnsrnxpqpp5s3fd8u9xnhgwtqpsq9jtcspzu4dmxvcatpvl2a3dje5055fmqrdqdpcv3jhxcmjd9c8g6t0dcs8xetwvss8xmmdv5s8xct5wvsxcv3qw3hjqmp4xqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jx3rjwmh5d5rmgqqqqqpqqqqqzsqqc9qxpqysgqe4hfa6arms4pz6ajwhq07lhc57g60vrdqyfdsewu84q823m8zqdjtcsv7aun8zqxr86amyz0lclf8pfts0hqy60s9fcvvsjyxnnmpugpjcq9xk",
                "destination": "032cf15d1ad9c4a08d26eab1918f732d8ef8fdc6abb9640bf3db174372c491304e",
                "payment_hash": "8452d3f0a69dd0e580300164bc4022e55bb3331d5859f5762d9668fa513b00da",
                "status": "complete",
                "created_at": 1722303672,
                "completed_at": 1722303673,
                "preimage": "576f5426f339b3db80d1b3c3546d6832274171609f25795c64b6cc74aa158d8c",
                "amount_msat": 500000000,
                "amount_sent_msat": 500000000
              },
              {
                "bolt11": "lnbcrt1u1pn2s3xxsp5xk8hs6zuv0yqhq7hhl0sps6mxuj78pzwryejaljh48vr4htykujqpp593ndc8wrukteld5j4nqnt6tedavh8ezv48dmrkqen3440ajnre5qdqcdsenxgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgq0asve9rdtfd9fe20u5vjujzmm0phpq538z8ndhn5ts62aflhktqn6338e45xcxkyf7askjjq25ksxt4eqarjjame8wfdmau7kq7m4csqs0n32n",
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "payment_hash": "2c66dc1dc3e5979fb692acc135e9796f5973e44ca9dbb1d8199c6b57f6531e68",
                "status": "complete",
                "created_at": 1722303688,
                "completed_at": 1722303689,
                "preimage": "1ce8370d3a179cee3af25a5a6c7058e8e12033a842efd6d34abae53334bc94bf",
                "amount_msat": 100000,
                "amount_sent_msat": 100000
              },
              {
                "bolt12": "lni1qqgypua5g7rp293k00s66ayvnv26czst2d5k6urvv5s8getnw3gzqp3zderpzxstt8927ynqg044h0egcd8n5h3n9g0u0v4h8ncc3yg02gps7sjqtqssytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82e5zvqyehytxx360zptatj4pygsv9kpal8gnkeyd0tpvd6jv5rkv2uqdgcq2s27mvxt0arlnulnmce53cuz00vzaqvgvhpphxgavl89r8zrdhaxqgzpvxkkmwsmxnuwflttmnpc8vtzwlgd3cfty3xwlnlc9r2gcjesguqqv4xey4m7l4wxem27vxyxfhwznlc62kffsd5xncx9w49m4g72u2y7lcl6a3x5cpu52j6gm8q5x0q8k7myxdzrsqqqqqqqqqqqqqqq5qqqqqqqqqqqqqayjedltzjqqqqqq9yq3n2s38p5cq442pq5qpm4ht26v8statwxcrl65uy26c9hx4dvy66f9x665eqqy90tpz25qc0gfqtqggzvmj9nrga83q474e2sjygxzmq7ln5fmvjxh4skxafx2pmx9wqx5v0qsqfkcrpht0d3nnt8txkcgf5wr6gzrlacls2gyrvj5hhwuu98shurrn6ayruunju7k9yu9clvaj354tr064ruuht88q5dj73kzru20uzj",
                "destination": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                "payment_hash": "a003badd6ad30f05f56e3607fd538456b05b9aad6135a494dad5320010af5844",
                "status": "complete",
                "created_at": 1722303713,
                "completed_at": 1722303714,
                "preimage": "6f154ed7d108349cb6385eba5f160294ef83862c2c560ba6446b2a3da5c2b3b3",
                "amount_msat": 1000000,
                "amount_sent_msat": 1000000
              },
              {
                "bolt11": "lnbcrt1pn2s38zsp5lv49w44a8tvkwtkxfxwts8rnr864u59srp7sxuua3haahdhlhtrqpp5p928w8rmsg2hjeymedcn54vxhsz372qhcedgf003nmsknhx9594sdqcdserxgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqt5h8te9lkn0jpdkhkmlkzs80aw7mt5kdm6jxmvddkavt3vj0vakkmfcs0hsde8y8g8za46sch2lp4jxy56u8ve25sgpgcsya0vp92sgphzw570",
                "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "payment_hash": "0954771c7b821579649bcb713a5586bc051f2817c65a84bdf19ee169dcc5a16b",
                "status": "complete",
                "created_at": 1722303715,
                "completed_at": 1722303715,
                "preimage": "f3a3b40d63e62785f537aad60f93980914c5639872c7746299a6a1228abbc303",
                "amount_msat": 9900,
                "amount_sent_msat": 9900
              },
              {
                "bolt11": "lnbcrt40n1pn2s3xxsp5j329vez86jvxw6543zlcla2fusm7v6h74pf7ftmmyfv6zm9uedlspp5j6xpxmq8cwd305vj2dvd6dh4mkr0s6guvehvyleymedgf4vsm3ysdqaveskjmr9vssxgetnvdexjur5d9hkuxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqk6uwy8pkv42jzhdna3z4vxpwkapdzzpn2tcpjnqj738nlpkjc583l9v72vlskt8y33rr4z3jma32xx7ve0jfy7anvn6r98cr5flhcuqqhr4shx",
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "payment_hash": "968c136c07c39b17d1925358dd36f5dd86f8691c666ec27f24de5a84d590dc49",
                "status": "complete",
                "created_at": 1722303719,
                "completed_at": 1722303720,
                "preimage": "8815ee921dba644c076f9f879abb520d8539a6913856a439752eaaadff1e21ac",
                "amount_msat": 4000,
                "amount_sent_msat": 4000
              }
            ]
          }
        }
      ]
    },
    "lightning-listpeerchannels.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.02",
      "rpc": "listpeerchannels",
      "title": "Command returning data on channels of connected lightning nodes",
      "description": [
        "The **listpeerchannels** RPC command returns list of this node's channels, with the possibility to filter them by peer's node id.",
        "",
        "If no *id* is supplied, then channel data on all lightning nodes that are connected, or not connected but have open channels with this node, are returned."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "If supplied, limits the channels to just the peer with the given ID, if it exists."
            ]
          }
        }
      },
      "response": {
        "required": [
          "channels"
        ],
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "state",
                "opener",
                "features",
                "peer_connected",
                "peer_id"
              ],
              "properties": {
                "peer_id": {
                  "type": "pubkey",
                  "description": [
                    "Node Public key."
                  ]
                },
                "peer_connected": {
                  "type": "boolean",
                  "description": [
                    "A boolean flag that is set to true if the peer is online."
                  ]
                },
                "reestablished": {
                  "type": "boolean",
                  "added": "v24.02",
                  "description": [
                    "A boolean flag that is set to true if we have successfully exchanged reestablish messages with this connection."
                  ]
                },
                "state": {
                  "type": "string",
                  "enum": [
                    "OPENINGD",
                    "CHANNELD_AWAITING_LOCKIN",
                    "CHANNELD_NORMAL",
                    "CHANNELD_SHUTTING_DOWN",
                    "CLOSINGD_SIGEXCHANGE",
                    "CLOSINGD_COMPLETE",
                    "AWAITING_UNILATERAL",
                    "FUNDING_SPEND_SEEN",
                    "ONCHAIN",
                    "DUALOPEND_OPEN_INIT",
                    "DUALOPEND_AWAITING_LOCKIN",
                    "CHANNELD_AWAITING_SPLICE",
                    "DUALOPEND_OPEN_COMMITTED",
                    "DUALOPEND_OPEN_COMMIT_READY"
                  ],
                  "description": [
                    "The channel state, in particular `CHANNELD_NORMAL` means the channel can be used normally."
                  ]
                },
                "scratch_txid": {
                  "type": "txid",
                  "description": [
                    "The txid we would use if we went onchain now."
                  ]
                },
                "channel_type": {
                  "type": "object",
                  "description": [
                    "Channel_type as negotiated with peer."
                  ],
                  "added": "v23.05",
                  "additionalProperties": false,
                  "required": [
                    "bits",
                    "names"
                  ],
                  "properties": {
                    "bits": {
                      "type": "array",
                      "description": [
                        "Each bit set in this channel_type."
                      ],
                      "items": {
                        "type": "u32",
                        "description": [
                          "Bit number."
                        ]
                      }
                    },
                    "names": {
                      "type": "array",
                      "description": [
                        "Feature name for each bit set in this channel_type. Note that *anchors_zero_fee_htlc_tx* is a deprecated synonym for *anchors*."
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "static_remotekey/even",
                          "anchor_outputs/even",
                          "anchors/even",
                          "anchors_zero_fee_htlc_tx/even",
                          "scid_alias/even",
                          "zeroconf/even"
                        ],
                        "description": [
                          "Name of feature bit."
                        ]
                      }
                    }
                  }
                },
                "updates": {
                  "type": "object",
                  "added": "v24.02",
                  "description": [
                    "Latest gossip updates sent/received."
                  ],
                  "additionalProperties": false,
                  "required": [
                    "local"
                  ],
                  "properties": {
                    "local": {
                      "type": "object",
                      "description": [
                        "Our gossip for channel."
                      ],
                      "additionalProperties": false,
                      "added": "v24.02",
                      "required": [
                        "htlc_minimum_msat",
                        "htlc_maximum_msat",
                        "cltv_expiry_delta",
                        "fee_base_msat",
                        "fee_proportional_millionths"
                      ],
                      "properties": {
                        "htlc_minimum_msat": {
                          "type": "msat",
                          "added": "v24.02",
                          "description": [
                            "Minimum msat amount we allow."
                          ]
                        },
                        "htlc_maximum_msat": {
                          "type": "msat",
                          "added": "v24.02",
                          "description": [
                            "Maximum msat amount we allow."
                          ]
                        },
                        "cltv_expiry_delta": {
                          "type": "u32",
                          "added": "v24.02",
                          "description": [
                            "Blocks delay required between incoming and outgoing HTLCs."
                          ]
                        },
                        "fee_base_msat": {
                          "type": "msat",
                          "added": "v24.02",
                          "description": [
                            "Amount we charge to use the channel."
                          ]
                        },
                        "fee_proportional_millionths": {
                          "type": "u32",
                          "added": "v24.02",
                          "description": [
                            "Amount we charge to use the channel in parts-per-million."
                          ]
                        }
                      }
                    },
                    "remote": {
                      "type": "object",
                      "added": "v24.02",
                      "description": [
                        "Peer's gossip for channel."
                      ],
                      "additionalProperties": false,
                      "required": [
                        "htlc_minimum_msat",
                        "htlc_maximum_msat",
                        "cltv_expiry_delta",
                        "fee_base_msat",
                        "fee_proportional_millionths"
                      ],
                      "properties": {
                        "htlc_minimum_msat": {
                          "type": "msat",
                          "added": "v24.02",
                          "description": [
                            "Minimum msat amount they allow."
                          ]
                        },
                        "htlc_maximum_msat": {
                          "type": "msat",
                          "added": "v24.02",
                          "description": [
                            "Maximum msat amount they allow."
                          ]
                        },
                        "cltv_expiry_delta": {
                          "type": "u32",
                          "added": "v24.02",
                          "description": [
                            "Blocks delay required between incoming and outgoing HTLCs."
                          ]
                        },
                        "fee_base_msat": {
                          "type": "msat",
                          "added": "v24.02",
                          "description": [
                            "Amount they charge to use the channel."
                          ]
                        },
                        "fee_proportional_millionths": {
                          "type": "u32",
                          "added": "v24.02",
                          "description": [
                            "Amount they charge to use the channel in parts-per-million."
                          ]
                        }
                      }
                    }
                  }
                },
                "ignore_fee_limits": {
                  "type": "boolean",
                  "added": "v23.08",
                  "description": [
                    "Set if we allow this peer to set fees to anything they want."
                  ]
                },
                "lost_state": {
                  "type": "boolean",
                  "added": "v24.02",
                  "description": [
                    "Set if we are fallen behind i.e. lost some channel state."
                  ]
                },
                "feerate": {
                  "type": "object",
                  "description": [
                    "Feerates for the current tx."
                  ],
                  "additionalProperties": false,
                  "required": [
                    "perkw",
                    "perkb"
                  ],
                  "properties": {
                    "perkw": {
                      "type": "u32",
                      "description": [
                        "Feerate per 1000 weight (i.e kSipa)."
                      ]
                    },
                    "perkb": {
                      "type": "u32",
                      "description": [
                        "Feerate per 1000 virtual bytes."
                      ]
                    }
                  }
                },
                "owner": {
                  "type": "string",
                  "description": [
                    "The current subdaemon controlling this connection."
                  ]
                },
                "short_channel_id": {
                  "type": "short_channel_id",
                  "description": [
                    "The short_channel_id (once locked in)."
                  ]
                },
                "channel_id": {
                  "type": "hash",
                  "description": [
                    "The full channel_id (funding txid Xored with output number)."
                  ]
                },
                "funding_txid": {
                  "type": "txid",
                  "description": [
                    "ID of the funding transaction."
                  ]
                },
                "funding_outnum": {
                  "type": "u32",
                  "description": [
                    "The 0-based output number of the funding transaction which opens the channel."
                  ]
                },
                "initial_feerate": {
                  "type": "string",
                  "description": [
                    "For inflight opens, the first feerate used to initiate the channel open."
                  ]
                },
                "last_feerate": {
                  "type": "string",
                  "description": [
                    "For inflight opens, the most recent feerate used on the channel open."
                  ]
                },
                "next_feerate": {
                  "type": "string",
                  "description": [
                    "For inflight opens, the next feerate we'll use for the channel open."
                  ]
                },
                "next_fee_step": {
                  "type": "u32",
                  "description": [
                    "For inflight opens, the next feerate step we'll use for the channel open."
                  ]
                },
                "inflight": {
                  "type": "array",
                  "description": [
                    "Current candidate funding transactions."
                  ],
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "funding_txid",
                      "funding_outnum",
                      "feerate",
                      "total_funding_msat",
                      "splice_amount",
                      "our_funding_msat"
                    ],
                    "properties": {
                      "funding_txid": {
                        "type": "txid",
                        "description": [
                          "ID of the funding transaction."
                        ]
                      },
                      "funding_outnum": {
                        "type": "u32",
                        "description": [
                          "The 0-based output number of the funding transaction which opens the channel."
                        ]
                      },
                      "feerate": {
                        "type": "string",
                        "description": [
                          "The feerate for this funding transaction in per-1000-weight, with `kpw` appended."
                        ]
                      },
                      "total_funding_msat": {
                        "type": "msat",
                        "description": [
                          "Total amount in the channel."
                        ]
                      },
                      "splice_amount": {
                        "type": "integer",
                        "added": "v23.08",
                        "description": [
                          "The amount of sats we're splicing in or out."
                        ]
                      },
                      "our_funding_msat": {
                        "type": "msat",
                        "description": [
                          "Amount we have in the channel."
                        ]
                      },
                      "scratch_txid": {
                        "type": "txid",
                        "description": [
                          "The commitment transaction txid we would use if we went onchain now."
                        ]
                      }
                    }
                  }
                },
                "close_to": {
                  "type": "hex",
                  "description": [
                    "ScriptPubkey which we have to close to if we mutual close."
                  ]
                },
                "private": {
                  "type": "boolean",
                  "description": [
                    "If True, we will not announce this channel."
                  ]
                },
                "opener": {
                  "type": "string",
                  "enum": [
                    "local",
                    "remote"
                  ],
                  "description": [
                    "Who initiated the channel."
                  ]
                },
                "closer": {
                  "type": "string",
                  "enum": [
                    "local",
                    "remote"
                  ],
                  "description": [
                    "Who initiated the channel close (only present if closing)."
                  ]
                },
                "features": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "option_static_remotekey",
                      "option_anchor_outputs",
                      "option_anchors",
                      "option_anchors_zero_fee_htlc_tx",
                      "option_scid_alias",
                      "option_zeroconf"
                    ],
                    "description": [
                      "BOLT #9 features which apply to this channel. Note that *anchors_zero_fee_htlc_tx* is a deprecated synonym for *anchors*."
                    ]
                  }
                },
                "funding": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "local_funds_msat",
                    "remote_funds_msat"
                  ],
                  "properties": {
                    "pushed_msat": {
                      "type": "msat",
                      "description": [
                        "Amount pushed from opener to peer."
                      ]
                    },
                    "local_funds_msat": {
                      "type": "msat",
                      "description": [
                        "Amount of channel we funded."
                      ]
                    },
                    "remote_funds_msat": {
                      "type": "msat",
                      "description": [
                        "Amount of channel they funded."
                      ]
                    },
                    "fee_paid_msat": {
                      "type": "msat",
                      "description": [
                        "Amount we paid peer at open."
                      ]
                    },
                    "fee_rcvd_msat": {
                      "type": "msat",
                      "description": [
                        "Amount we were paid by peer at open."
                      ]
                    }
                  }
                },
                "to_us_msat": {
                  "type": "msat",
                  "description": [
                    "How much of channel is owed to us."
                  ]
                },
                "min_to_us_msat": {
                  "type": "msat",
                  "description": [
                    "Least amount owed to us ever. If the peer were to successfully steal from us, this is the amount we would still retain."
                  ]
                },
                "max_to_us_msat": {
                  "type": "msat",
                  "description": [
                    "Most amount owed to us ever. If we were to successfully steal from the peer, this is the amount we could potentially get."
                  ]
                },
                "total_msat": {
                  "type": "msat",
                  "description": [
                    "Total amount in the channel."
                  ]
                },
                "fee_base_msat": {
                  "type": "msat",
                  "description": [
                    "Amount we charge to use the channel."
                  ]
                },
                "fee_proportional_millionths": {
                  "type": "u32",
                  "description": [
                    "Amount we charge to use the channel in parts-per-million."
                  ]
                },
                "dust_limit_msat": {
                  "type": "msat",
                  "description": [
                    "Minimum amount for an output on the channel transactions."
                  ]
                },
                "max_total_htlc_in_msat": {
                  "type": "msat",
                  "description": [
                    "Max amount accept in a single payment."
                  ]
                },
                "their_reserve_msat": {
                  "type": "msat",
                  "description": [
                    "Minimum we insist they keep in channel. If they have less than this in the channel, they cannot send to us on that channel."
                  ],
                  "default": "1% of the total channel capacity"
                },
                "our_reserve_msat": {
                  "type": "msat",
                  "description": [
                    "Minimum they insist we keep in channel. If you have less than this in the channel, you cannot send out via this channel."
                  ]
                },
                "spendable_msat": {
                  "type": "msat",
                  "description": [
                    "An estimate of the total we could send through channel (can be wrong because adding HTLCs requires an increase in fees paid to onchain miners, and onchain fees change dynamically according to onchain activity)."
                  ]
                },
                "receivable_msat": {
                  "type": "msat",
                  "description": [
                    "An estimate of the total peer could send through channel."
                  ]
                },
                "minimum_htlc_in_msat": {
                  "type": "msat",
                  "description": [
                    "The minimum amount HTLC we accept."
                  ]
                },
                "minimum_htlc_out_msat": {
                  "type": "msat",
                  "description": [
                    "The minimum amount HTLC we will send."
                  ]
                },
                "maximum_htlc_out_msat": {
                  "type": "msat",
                  "description": [
                    "The maximum amount HTLC we will send."
                  ]
                },
                "their_to_self_delay": {
                  "type": "u32",
                  "description": [
                    "The number of blocks before they can take their funds if they unilateral close."
                  ]
                },
                "our_to_self_delay": {
                  "type": "u32",
                  "description": [
                    "The number of blocks before we can take our funds if we unilateral close."
                  ]
                },
                "max_accepted_htlcs": {
                  "type": "u32",
                  "description": [
                    "Maximum number of incoming HTLC we will accept at once."
                  ]
                },
                "alias": {
                  "type": "object",
                  "required": [],
                  "properties": {
                    "local": {
                      "type": "short_channel_id",
                      "description": [
                        "An alias assigned by this node to this channel, used for outgoing payments."
                      ]
                    },
                    "remote": {
                      "type": "short_channel_id",
                      "description": [
                        "An alias assigned by the remote node to this channel, usable in routehints and invoices."
                      ]
                    }
                  }
                },
                "state_changes": {
                  "type": "array",
                  "description": [
                    "Prior state changes."
                  ],
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "timestamp",
                      "old_state",
                      "new_state",
                      "cause",
                      "message"
                    ],
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": [
                          "UTC timestamp of form YYYY-mm-ddTHH:MM:SS.%03dZ."
                        ]
                      },
                      "old_state": {
                        "type": "string",
                        "enum": [
                          "OPENINGD",
                          "CHANNELD_AWAITING_LOCKIN",
                          "CHANNELD_NORMAL",
                          "CHANNELD_SHUTTING_DOWN",
                          "CLOSINGD_SIGEXCHANGE",
                          "CLOSINGD_COMPLETE",
                          "AWAITING_UNILATERAL",
                          "FUNDING_SPEND_SEEN",
                          "ONCHAIN",
                          "DUALOPEND_OPEN_INIT",
                          "DUALOPEND_AWAITING_LOCKIN",
                          "DUALOPEND_OPEN_COMMITTED",
                          "DUALOPEND_OPEN_COMMIT_READY",
                          "CHANNELD_AWAITING_SPLICE"
                        ],
                        "description": [
                          "Previous state."
                        ]
                      },
                      "new_state": {
                        "type": "string",
                        "enum": [
                          "OPENINGD",
                          "CHANNELD_AWAITING_LOCKIN",
                          "CHANNELD_NORMAL",
                          "CHANNELD_SHUTTING_DOWN",
                          "CLOSINGD_SIGEXCHANGE",
                          "CLOSINGD_COMPLETE",
                          "AWAITING_UNILATERAL",
                          "FUNDING_SPEND_SEEN",
                          "ONCHAIN",
                          "DUALOPEND_OPEN_INIT",
                          "DUALOPEND_AWAITING_LOCKIN",
                          "DUALOPEND_OPEN_COMMITTED",
                          "DUALOPEND_OPEN_COMMIT_READY",
                          "CHANNELD_AWAITING_SPLICE"
                        ],
                        "description": [
                          "New state."
                        ]
                      },
                      "cause": {
                        "type": "string",
                        "enum": [
                          "unknown",
                          "local",
                          "user",
                          "remote",
                          "protocol",
                          "onchain"
                        ],
                        "description": [
                          "What caused the change."
                        ]
                      },
                      "message": {
                        "type": "string",
                        "description": [
                          "Human-readable explanation."
                        ]
                      }
                    }
                  }
                },
                "status": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": [
                      "Billboard log of significant changes."
                    ]
                  }
                },
                "in_payments_offered": {
                  "type": "u64",
                  "description": [
                    "Number of incoming payment attempts."
                  ]
                },
                "in_offered_msat": {
                  "type": "msat",
                  "description": [
                    "Total amount of incoming payment attempts."
                  ]
                },
                "in_payments_fulfilled": {
                  "type": "u64",
                  "description": [
                    "Number of successful incoming payment attempts."
                  ]
                },
                "in_fulfilled_msat": {
                  "type": "msat",
                  "description": [
                    "Total amount of successful incoming payment attempts."
                  ]
                },
                "out_payments_offered": {
                  "type": "u64",
                  "description": [
                    "Number of outgoing payment attempts."
                  ]
                },
                "out_offered_msat": {
                  "type": "msat",
                  "description": [
                    "Total amount of outgoing payment attempts."
                  ]
                },
                "out_payments_fulfilled": {
                  "type": "u64",
                  "description": [
                    "Number of successful outgoing payment attempts."
                  ]
                },
                "out_fulfilled_msat": {
                  "type": "msat",
                  "description": [
                    "Total amount of successful outgoing payment attempts."
                  ]
                },
                "last_stable_connection": {
                  "type": "u64",
                  "added": "v24.02",
                  "description": [
                    "Last time we reestablished the open channel and stayed connected for 1 minute."
                  ]
                },
                "htlcs": {
                  "type": "array",
                  "description": [
                    "Current HTLCs in this channel."
                  ],
                  "items": {
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "direction",
                      "id",
                      "amount_msat",
                      "expiry",
                      "payment_hash",
                      "state"
                    ],
                    "properties": {
                      "direction": {
                        "type": "string",
                        "added": "v23.02",
                        "enum": [
                          "in",
                          "out"
                        ],
                        "description": [
                          "Whether it came from peer, or is going to peer."
                        ]
                      },
                      "id": {
                        "type": "u64",
                        "description": [
                          "Unique ID for this htlc on this channel in this direction."
                        ]
                      },
                      "amount_msat": {
                        "type": "msat",
                        "description": [
                          "Amount send/received for this HTLC."
                        ]
                      },
                      "expiry": {
                        "type": "u32",
                        "description": [
                          "Block this HTLC expires at (after which an `in` direction HTLC will be returned to the peer, an `out` returned to us). If this expiry is too close, lightningd(8) will automatically unilaterally close the channel in order to enforce the timeout onchain."
                        ]
                      },
                      "payment_hash": {
                        "type": "hash",
                        "description": [
                          "The hash of the payment_preimage which will prove payment."
                        ]
                      },
                      "local_trimmed": {
                        "type": "boolean",
                        "enum": [
                          true
                        ],
                        "description": [
                          "If this is too small to enforce onchain; it doesn't appear in the commitment transaction and will not be enforced in a unilateral close. Generally true if the HTLC (after subtracting onchain fees) is below the `dust_limit_msat` for the channel."
                        ]
                      },
                      "status": {
                        "type": "string",
                        "description": [
                          "Set if this HTLC is currently waiting on a hook (and shows what plugin)."
                        ]
                      }
                    },
                    "allOf": [
                      {
                        "if": {
                          "properties": {
                            "direction": {
                              "enum": [
                                "out"
                              ]
                            }
                          }
                        },
                        "then": {
                          "additionalProperties": false,
                          "required": [
                            "state"
                          ],
                          "properties": {
                            "direction": {},
                            "id": {},
                            "amount_msat": {},
                            "msatoshi": {},
                            "expiry": {},
                            "payment_hash": {},
                            "local_trimmed": {},
                            "status": {},
                            "alias": {},
                            "peer_id": {},
                            "peer_connected": {},
                            "reestablished": {},
                            "state": {
                              "type": "string",
                              "enum": [
                                "SENT_ADD_HTLC",
                                "SENT_ADD_COMMIT",
                                "RCVD_ADD_REVOCATION",
                                "RCVD_ADD_ACK_COMMIT",
                                "SENT_ADD_ACK_REVOCATION",
                                "RCVD_REMOVE_HTLC",
                                "RCVD_REMOVE_COMMIT",
                                "SENT_REMOVE_REVOCATION",
                                "SENT_REMOVE_ACK_COMMIT",
                                "RCVD_REMOVE_ACK_REVOCATION"
                              ],
                              "description": [
                                "Status of the HTLC."
                              ]
                            }
                          }
                        }
                      },
                      {
                        "if": {
                          "properties": {
                            "direction": {
                              "enum": [
                                "in"
                              ]
                            }
                          }
                        },
                        "then": {
                          "additionalProperties": false,
                          "required": [
                            "state"
                          ],
                          "properties": {
                            "direction": {},
                            "id": {},
                            "amount_msat": {},
                            "msatoshi": {},
                            "expiry": {},
                            "payment_hash": {},
                            "local_trimmed": {},
                            "status": {},
                            "peer_id": {},
                            "peer_connected": {},
                            "reestablished": {},
                            "state": {
                              "type": "string",
                              "enum": [
                                "RCVD_ADD_HTLC",
                                "RCVD_ADD_COMMIT",
                                "SENT_ADD_REVOCATION",
                                "SENT_ADD_ACK_COMMIT",
                                "RCVD_ADD_ACK_REVOCATION",
                                "SENT_REMOVE_HTLC",
                                "SENT_REMOVE_COMMIT",
                                "RCVD_REMOVE_REVOCATION",
                                "RCVD_REMOVE_ACK_COMMIT",
                                "SENT_REMOVE_ACK_REVOCATION"
                              ],
                              "description": [
                                "Status of the HTLC."
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "peer_connected": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "reestablished": {
                        "type": "boolean",
                        "description": [
                          "True if we have successfully exchanged reestablish messages this connection."
                        ]
                      }
                    }
                  }
                },
                {
                  "if": {
                    "required": [
                      "close_to"
                    ]
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [],
                    "properties": {
                      "state": {},
                      "peer_id": {},
                      "peer_connected": {},
                      "reestablished": {},
                      "scratch_txid": {},
                      "channel_type": {},
                      "feerate": {},
                      "ignore_fee_limits": {},
                      "lost_state": {},
                      "owner": {},
                      "short_channel_id": {},
                      "channel_id": {},
                      "updates": {},
                      "funding_txid": {},
                      "funding_outnum": {},
                      "close_to": {},
                      "private": {},
                      "alias": {},
                      "opener": {},
                      "closer": {},
                      "features": {},
                      "funding": {},
                      "to_us_msat": {},
                      "min_to_us_msat": {},
                      "max_to_us_msat": {},
                      "total_msat": {},
                      "fee_base_msat": {},
                      "fee_proportional_millionths": {},
                      "dust_limit_msat": {},
                      "max_total_htlc_in_msat": {},
                      "their_reserve_msat": {},
                      "our_reserve_msat": {},
                      "spendable_msat": {},
                      "receivable_msat": {},
                      "minimum_htlc_in_msat": {},
                      "minimum_htlc_out_msat": {},
                      "maximum_htlc_out_msat": {},
                      "spendable_msatoshi": {},
                      "receivable_msatoshi": {},
                      "their_to_self_delay": {},
                      "our_to_self_delay": {},
                      "max_accepted_htlcs": {},
                      "msatoshi_to_us": {},
                      "msatoshi_to_us_min": {},
                      "msatoshi_to_us_max": {},
                      "msatoshi_total": {},
                      "dust_limit_satoshis": {},
                      "max_htlc_value_in_flight_msat": {},
                      "our_channel_reserve_satoshis": {},
                      "their_channel_reserve_satoshis": {},
                      "spendable_satoshis": {},
                      "receivable_satoshis": {},
                      "htlc_minimum_msat": {},
                      "state_changes": {},
                      "status": {},
                      "in_payments_offered": {},
                      "in_offered_msat": {},
                      "in_msatoshi_offered": {},
                      "in_payments_fulfilled": {},
                      "in_fulfilled_msat": {},
                      "in_msatoshi_fulfilled": {},
                      "out_payments_offered": {},
                      "out_offered_msat": {},
                      "out_msatoshi_offered": {},
                      "out_payments_fulfilled": {},
                      "out_fulfilled_msat": {},
                      "out_msatoshi_fulfilled": {},
                      "last_stable_connection": {},
                      "htlcs": {},
                      "initial_feerate": {},
                      "last_feerate": {},
                      "next_feerate": {},
                      "inflight": {},
                      "last_tx_fee_msat": {},
                      "direction": {},
                      "close_to_addr": {
                        "type": "string",
                        "description": [
                          "The bitcoin address we will close to (present if close_to_addr is a standardized address)."
                        ]
                      }
                    }
                  }
                },
                {
                  "if": {
                    "required": [
                      "scratch_txid"
                    ]
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "last_tx_fee_msat"
                    ],
                    "properties": {
                      "state": {},
                      "peer_id": {},
                      "peer_connected": {},
                      "reestablished": {},
                      "alias": {},
                      "scratch_txid": {},
                      "channel_type": {},
                      "feerate": {},
                      "ignore_fee_limits": {},
                      "lost_state": {},
                      "owner": {},
                      "short_channel_id": {},
                      "channel_id": {},
                      "updates": {},
                      "funding_txid": {},
                      "funding_outnum": {},
                      "inflight": {},
                      "close_to": {},
                      "private": {},
                      "opener": {},
                      "closer": {},
                      "features": {},
                      "funding": {},
                      "to_us_msat": {},
                      "min_to_us_msat": {},
                      "max_to_us_msat": {},
                      "total_msat": {},
                      "fee_base_msat": {},
                      "fee_proportional_millionths": {},
                      "dust_limit_msat": {},
                      "max_total_htlc_in_msat": {},
                      "their_reserve_msat": {},
                      "our_reserve_msat": {},
                      "spendable_msat": {},
                      "receivable_msat": {},
                      "minimum_htlc_in_msat": {},
                      "minimum_htlc_out_msat": {},
                      "maximum_htlc_out_msat": {},
                      "spendable_msatoshi": {},
                      "receivable_msatoshi": {},
                      "their_to_self_delay": {},
                      "our_to_self_delay": {},
                      "max_accepted_htlcs": {},
                      "msatoshi_to_us": {},
                      "msatoshi_to_us_min": {},
                      "msatoshi_to_us_max": {},
                      "msatoshi_total": {},
                      "dust_limit_satoshis": {},
                      "max_htlc_value_in_flight_msat": {},
                      "our_channel_reserve_satoshis": {},
                      "their_channel_reserve_satoshis": {},
                      "spendable_satoshis": {},
                      "receivable_satoshis": {},
                      "htlc_minimum_msat": {},
                      "state_changes": {},
                      "status": {},
                      "in_payments_offered": {},
                      "in_offered_msat": {},
                      "in_msatoshi_offered": {},
                      "in_payments_fulfilled": {},
                      "in_fulfilled_msat": {},
                      "in_msatoshi_fulfilled": {},
                      "out_payments_offered": {},
                      "out_offered_msat": {},
                      "out_msatoshi_offered": {},
                      "out_payments_fulfilled": {},
                      "out_fulfilled_msat": {},
                      "out_msatoshi_fulfilled": {},
                      "last_stable_connection": {},
                      "htlcs": {},
                      "initial_feerate": {},
                      "last_feerate": {},
                      "next_feerate": {},
                      "close_to_addr": {},
                      "direction": {},
                      "last_tx_fee_msat": {
                        "type": "msat",
                        "description": [
                          "Fee attached to this the current tx."
                        ]
                      }
                    }
                  }
                },
                {
                  "if": {
                    "required": [
                      "short_channel_id"
                    ]
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "direction"
                    ],
                    "properties": {
                      "alias": {},
                      "peer_id": {},
                      "peer_connected": {},
                      "reestablished": {},
                      "state": {},
                      "scratch_txid": {},
                      "channel_type": {},
                      "feerate": {},
                      "ignore_fee_limits": {},
                      "lost_state": {},
                      "owner": {},
                      "short_channel_id": {},
                      "channel_id": {},
                      "updates": {},
                      "funding_txid": {},
                      "funding_outnum": {},
                      "inflight": {},
                      "close_to": {},
                      "private": {},
                      "opener": {},
                      "closer": {},
                      "features": {},
                      "funding": {},
                      "to_us_msat": {},
                      "min_to_us_msat": {},
                      "max_to_us_msat": {},
                      "total_msat": {},
                      "fee_base_msat": {},
                      "fee_proportional_millionths": {},
                      "dust_limit_msat": {},
                      "max_total_htlc_in_msat": {},
                      "their_reserve_msat": {},
                      "our_reserve_msat": {},
                      "spendable_msat": {},
                      "receivable_msat": {},
                      "minimum_htlc_in_msat": {},
                      "minimum_htlc_out_msat": {},
                      "maximum_htlc_out_msat": {},
                      "spendable_msatoshi": {},
                      "receivable_msatoshi": {},
                      "their_to_self_delay": {},
                      "our_to_self_delay": {},
                      "max_accepted_htlcs": {},
                      "msatoshi_to_us": {},
                      "msatoshi_to_us_min": {},
                      "msatoshi_to_us_max": {},
                      "msatoshi_total": {},
                      "dust_limit_satoshis": {},
                      "max_htlc_value_in_flight_msat": {},
                      "our_channel_reserve_satoshis": {},
                      "their_channel_reserve_satoshis": {},
                      "spendable_satoshis": {},
                      "receivable_satoshis": {},
                      "htlc_minimum_msat": {},
                      "state_changes": {},
                      "status": {},
                      "in_payments_offered": {},
                      "in_offered_msat": {},
                      "in_msatoshi_offered": {},
                      "in_payments_fulfilled": {},
                      "in_fulfilled_msat": {},
                      "in_msatoshi_fulfilled": {},
                      "out_payments_offered": {},
                      "out_offered_msat": {},
                      "out_msatoshi_offered": {},
                      "out_payments_fulfilled": {},
                      "out_fulfilled_msat": {},
                      "out_msatoshi_fulfilled": {},
                      "last_stable_connection": {},
                      "htlcs": {},
                      "initial_feerate": {},
                      "last_feerate": {},
                      "next_feerate": {},
                      "close_to_addr": {},
                      "last_tx_fee_msat": {},
                      "direction": {
                        "type": "u32",
                        "added": "v23.02",
                        "description": [
                          "0 if we're the lesser node_id, 1 if we're the greater (as used in BOLT #7 channel_update)."
                        ]
                      }
                    }
                  }
                },
                {
                  "if": {
                    "required": [
                      "inflight"
                    ]
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "initial_feerate",
                      "last_feerate",
                      "next_feerate"
                    ],
                    "properties": {
                      "state": {},
                      "peer_id": {},
                      "peer_connected": {},
                      "reestablished": {},
                      "scratch_txid": {},
                      "channel_type": {},
                      "feerate": {},
                      "ignore_fee_limits": {},
                      "lost_state": {},
                      "owner": {},
                      "alias": {},
                      "short_channel_id": {},
                      "channel_id": {},
                      "updates": {},
                      "funding_txid": {},
                      "funding_outnum": {},
                      "close_to": {},
                      "private": {},
                      "opener": {},
                      "closer": {},
                      "features": {},
                      "funding": {},
                      "to_us_msat": {},
                      "min_to_us_msat": {},
                      "max_to_us_msat": {},
                      "total_msat": {},
                      "fee_base_msat": {},
                      "fee_proportional_millionths": {},
                      "dust_limit_msat": {},
                      "max_total_htlc_in_msat": {},
                      "their_reserve_msat": {},
                      "our_reserve_msat": {},
                      "spendable_msat": {},
                      "receivable_msat": {},
                      "minimum_htlc_in_msat": {},
                      "minimum_htlc_out_msat": {},
                      "maximum_htlc_out_msat": {},
                      "spendable_msatoshi": {},
                      "receivable_msatoshi": {},
                      "their_to_self_delay": {},
                      "our_to_self_delay": {},
                      "max_accepted_htlcs": {},
                      "msatoshi_to_us": {},
                      "msatoshi_to_us_min": {},
                      "msatoshi_to_us_max": {},
                      "msatoshi_total": {},
                      "dust_limit_satoshis": {},
                      "max_htlc_value_in_flight_msat": {},
                      "our_channel_reserve_satoshis": {},
                      "their_channel_reserve_satoshis": {},
                      "spendable_satoshis": {},
                      "receivable_satoshis": {},
                      "htlc_minimum_msat": {},
                      "state_changes": {},
                      "status": {},
                      "in_payments_offered": {},
                      "in_offered_msat": {},
                      "in_msatoshi_offered": {},
                      "in_payments_fulfilled": {},
                      "in_fulfilled_msat": {},
                      "in_msatoshi_fulfilled": {},
                      "out_payments_offered": {},
                      "out_offered_msat": {},
                      "out_msatoshi_offered": {},
                      "out_payments_fulfilled": {},
                      "out_fulfilled_msat": {},
                      "out_msatoshi_fulfilled": {},
                      "last_stable_connection": {},
                      "htlcs": {},
                      "inflight": {},
                      "close_to_addr": {},
                      "direction": {},
                      "last_tx_fee_msat": {},
                      "initial_feerate": {
                        "type": "string",
                        "description": [
                          "The feerate for the initial funding transaction in per-1000-weight, with `kpw` appended."
                        ]
                      },
                      "last_feerate": {
                        "type": "string",
                        "description": [
                          "The feerate for the latest funding transaction in per-1000-weight, with `kpw` appended."
                        ]
                      },
                      "next_feerate": {
                        "type": "string",
                        "description": [
                          "The minimum feerate for the next funding transaction in per-1000-weight, with `kpw` appended."
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "post_return_value_notes": [
          "The *state* field values (and *old_state* / *new_state*) are worth describing further:",
          "",
          "  * `OPENINGD`: The channel funding protocol with the peer is ongoing and both sides are negotiating parameters.",
          "  * `DUALOPEND_OPEN_INIT`: Like `OPENINGD`, but for v2 connections which are using collaborative opens.",
          "  * `DUALOPEND_OPEN_COMMIT_READY`: Like `OPENINGD`, but for v2 connections which are using collaborative opens. You're ready to send your commitment signed to your peer.",
          "  * `DUALOPEND_OPEN_COMMITTED`: Like `OPENINGD`, but for v2 connections which are using collaborative opens. You've gotten an initial signed commitment from your peer.",
          "  * `CHANNELD_AWAITING_LOCKIN` / `DUALOPEND_AWAITING_LOCKIN`: The peer and you have agreed on channel parameters and are just waiting for the channel funding transaction to be confirmed deeply (original and collaborative open protocols, respectively). Both you and the peer must acknowledge the channel funding transaction to be confirmed deeply before entering the next state. Also, you can increase the onchain fee for channels in `DUALOPEND_AWAITING_LOCKIN` using lightning-openchannel_bump(7).",
          "  * `CHANNELD_NORMAL`: The channel can be used for normal payments.",
          "  * `CHANNELD_SHUTTING_DOWN`: A mutual close was requested (by you or peer) and both of you are waiting for HTLCs in-flight to be either failed or succeeded. The channel can no longer be used for normal payments and forwarding. Mutual close will proceed only once all HTLCs in the channel have either been fulfilled or failed.",
          "  * `CLOSINGD_SIGEXCHANGE`: You and the peer are negotiating the mutual close onchain fee.",
          "  * `CLOSINGD_COMPLETE`: You and the peer have agreed on the mutual close onchain fee and are awaiting the mutual close getting confirmed deeply.",
          "  * `AWAITING_UNILATERAL`: You initiated a unilateral close, and are now waiting for the peer-selected unilateral close timeout to complete.",
          "  * `FUNDING_SPEND_SEEN`: You saw the funding transaction getting spent (usually the peer initiated a unilateral close) and will now determine what exactly happened (i.e. if it was a theft attempt).",
          "  * `ONCHAIN`: You saw the funding transaction getting spent and now know what happened (i.e. if it was a proper unilateral close by the peer, or a theft attempt)."
        ]
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong."
      ],
      "author": [
        "Michael Hawkins <<michael.hawkins@protonmail.com>>."
      ],
      "see_also": [
        "lightning-connect(7)",
        "lightning-fundchannel_start(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>",
        "Lightning RFC site (BOLT #9): ",
        "<https://github.com/lightningnetwork/lightning-rfc/blob/master/09-features.md>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listpeerchannels#1",
            "method": "listpeerchannels",
            "params": {
              "id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59"
            }
          },
          "response": {
            "channels": [
              {
                "peer_id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "peer_connected": true,
                "reestablished": true,
                "channel_type": {
                  "bits": [
                    12,
                    22
                  ],
                  "names": [
                    "static_remotekey/even",
                    "anchors/even"
                  ]
                },
                "updates": {
                  "local": {
                    "htlc_minimum_msat": 0,
                    "htlc_maximum_msat": 990000000,
                    "cltv_expiry_delta": 6,
                    "fee_base_msat": 1,
                    "fee_proportional_millionths": 10
                  },
                  "remote": {
                    "htlc_minimum_msat": 0,
                    "htlc_maximum_msat": 990000000,
                    "cltv_expiry_delta": 6,
                    "fee_base_msat": 1,
                    "fee_proportional_millionths": 10
                  }
                },
                "last_stable_connection": 1722303707,
                "state": "CHANNELD_NORMAL",
                "scratch_txid": "80aa008578b3b6924f2362146907e46ad83351d5b9b056bd8537befc3f1d7d65",
                "last_tx_fee_msat": 4221000,
                "lost_state": false,
                "feerate": {
                  "perkw": 3755,
                  "perkb": 15020
                },
                "owner": "channeld",
                "short_channel_id": "109x1x1",
                "direction": 1,
                "channel_id": "252d1b0a1e57895e84137f28cf19ab2c35847e284c112fefdecc7afeaa5c1de7",
                "funding_txid": "737d6835ddafd515ba9e9def733bb4e4211f6053a32b1422bf1c8cc240850f96",
                "funding_outnum": 1,
                "close_to_addr": "bcrt1p8c0ku4mpxq3443rss8e6rjwamztvv8yxvmxtetal5d0n6v39rlwqvfqy6n",
                "close_to": "51203e1f6e576130235ac47081f3a1c9ddd896c61c8666ccbcafbfa35f3d32251fdc",
                "private": false,
                "opener": "local",
                "alias": {
                  "local": "2240075x4300189x56636",
                  "remote": "3321841x5311416x1695"
                },
                "features": [
                  "option_static_remotekey",
                  "option_anchors_zero_fee_htlc_tx",
                  "option_anchors"
                ],
                "funding": {
                  "local_funds_msat": 1000000000,
                  "remote_funds_msat": 0,
                  "pushed_msat": 0
                },
                "to_us_msat": 490518792,
                "min_to_us_msat": 489918792,
                "max_to_us_msat": 1000000000,
                "total_msat": 1000000000,
                "fee_base_msat": 1,
                "fee_proportional_millionths": 10,
                "dust_limit_msat": 546000,
                "max_total_htlc_in_msat": 18446744073709552000,
                "their_reserve_msat": 10000000,
                "our_reserve_msat": 10000000,
                "spendable_msat": 469223792,
                "receivable_msat": 499481208,
                "minimum_htlc_in_msat": 0,
                "minimum_htlc_out_msat": 0,
                "maximum_htlc_out_msat": 990000000,
                "their_to_self_delay": 5,
                "our_to_self_delay": 5,
                "max_accepted_htlcs": 483,
                "state_changes": [
                  {
                    "timestamp": "2024-07-30T01:40:45.942Z",
                    "old_state": "DUALOPEND_OPEN_COMMITTED",
                    "new_state": "DUALOPEND_AWAITING_LOCKIN",
                    "cause": "user",
                    "message": "Sigs exchanged, waiting for lock-in"
                  },
                  {
                    "timestamp": "2024-07-30T01:40:47.619Z",
                    "old_state": "DUALOPEND_AWAITING_LOCKIN",
                    "new_state": "CHANNELD_NORMAL",
                    "cause": "user",
                    "message": "Lockin complete"
                  }
                ],
                "status": [
                  "CHANNELD_NORMAL:Channel ready for use."
                ],
                "in_payments_offered": 1,
                "in_offered_msat": 1000000,
                "in_payments_fulfilled": 1,
                "in_fulfilled_msat": 1000000,
                "out_payments_offered": 10,
                "out_offered_msat": 510501210,
                "out_payments_fulfilled": 8,
                "out_fulfilled_msat": 510481208,
                "htlcs": []
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listpeerchannels#2",
            "method": "listpeerchannels",
            "params": {}
          },
          "response": {
            "channels": [
              {
                "peer_id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "peer_connected": true,
                "reestablished": true,
                "channel_type": {
                  "bits": [
                    12,
                    22
                  ],
                  "names": [
                    "static_remotekey/even",
                    "anchors/even"
                  ]
                },
                "updates": {
                  "local": {
                    "htlc_minimum_msat": 0,
                    "htlc_maximum_msat": 990000000,
                    "cltv_expiry_delta": 6,
                    "fee_base_msat": 1,
                    "fee_proportional_millionths": 10
                  },
                  "remote": {
                    "htlc_minimum_msat": 0,
                    "htlc_maximum_msat": 990000000,
                    "cltv_expiry_delta": 6,
                    "fee_base_msat": 1,
                    "fee_proportional_millionths": 10
                  }
                },
                "last_stable_connection": 1722303707,
                "state": "CHANNELD_NORMAL",
                "scratch_txid": "80aa008578b3b6924f2362146907e46ad83351d5b9b056bd8537befc3f1d7d65",
                "last_tx_fee_msat": 4221000,
                "lost_state": false,
                "feerate": {
                  "perkw": 3755,
                  "perkb": 15020
                },
                "owner": "channeld",
                "short_channel_id": "109x1x1",
                "direction": 1,
                "channel_id": "252d1b0a1e57895e84137f28cf19ab2c35847e284c112fefdecc7afeaa5c1de7",
                "funding_txid": "737d6835ddafd515ba9e9def733bb4e4211f6053a32b1422bf1c8cc240850f96",
                "funding_outnum": 1,
                "close_to_addr": "bcrt1p8c0ku4mpxq3443rss8e6rjwamztvv8yxvmxtetal5d0n6v39rlwqvfqy6n",
                "close_to": "51203e1f6e576130235ac47081f3a1c9ddd896c61c8666ccbcafbfa35f3d32251fdc",
                "private": false,
                "opener": "local",
                "alias": {
                  "local": "2240075x4300189x56636",
                  "remote": "3321841x5311416x1695"
                },
                "features": [
                  "option_static_remotekey",
                  "option_anchors_zero_fee_htlc_tx",
                  "option_anchors"
                ],
                "funding": {
                  "local_funds_msat": 1000000000,
                  "remote_funds_msat": 0,
                  "pushed_msat": 0
                },
                "to_us_msat": 490518792,
                "min_to_us_msat": 489918792,
                "max_to_us_msat": 1000000000,
                "total_msat": 1000000000,
                "fee_base_msat": 1,
                "fee_proportional_millionths": 10,
                "dust_limit_msat": 546000,
                "max_total_htlc_in_msat": 18446744073709552000,
                "their_reserve_msat": 10000000,
                "our_reserve_msat": 10000000,
                "spendable_msat": 469223792,
                "receivable_msat": 499481208,
                "minimum_htlc_in_msat": 0,
                "minimum_htlc_out_msat": 0,
                "maximum_htlc_out_msat": 990000000,
                "their_to_self_delay": 5,
                "our_to_self_delay": 5,
                "max_accepted_htlcs": 483,
                "state_changes": [
                  {
                    "timestamp": "2024-07-30T01:40:45.942Z",
                    "old_state": "DUALOPEND_OPEN_COMMITTED",
                    "new_state": "DUALOPEND_AWAITING_LOCKIN",
                    "cause": "user",
                    "message": "Sigs exchanged, waiting for lock-in"
                  },
                  {
                    "timestamp": "2024-07-30T01:40:47.619Z",
                    "old_state": "DUALOPEND_AWAITING_LOCKIN",
                    "new_state": "CHANNELD_NORMAL",
                    "cause": "user",
                    "message": "Lockin complete"
                  }
                ],
                "status": [
                  "CHANNELD_NORMAL:Channel ready for use."
                ],
                "in_payments_offered": 1,
                "in_offered_msat": 1000000,
                "in_payments_fulfilled": 1,
                "in_fulfilled_msat": 1000000,
                "out_payments_offered": 10,
                "out_offered_msat": 510501210,
                "out_payments_fulfilled": 8,
                "out_fulfilled_msat": 510481208,
                "htlcs": []
              }
            ]
          }
        }
      ]
    },
    "lightning-listpeers.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listpeers",
      "title": "Command returning data on connected lightning nodes",
      "description": [
        "The **listpeers** RPC command returns data on nodes that are connected or are not connected but have open channels with this node.",
        "",
        "Once a connection to another lightning node has been established, using the **connect** command, data on the node can be returned using **listpeers** and the *id* that was used with the **connect** command.",
        "",
        "If no *id* is supplied, then data on all lightning nodes that are connected, or not connected but have open channels with this node, are returned.",
        "",
        "If a channel is open with a node and the connection has been lost, then the node will still appear in the output of the command and the value of the *connected* attribute of the node will be \"false\".",
        "",
        "The channel will remain open for a set blocktime, after which if the connection has not been re-established, the channel will close and the node will no longer appear in the command output."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "If supplied, limits the result to just the peer with the given ID, if it exists."
            ]
          },
          "level": {
            "type": "string",
            "description": [
              "Supplying level will show log entries related to that peer at the given log level."
            ],
            "enum": [
              "io",
              "trace",
              "debug",
              "info",
              "unusual"
            ]
          }
        }
      },
      "response": {
        "required": [
          "peers"
        ],
        "properties": {
          "peers": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "id",
                "connected",
                "num_channels"
              ],
              "properties": {
                "id": {
                  "type": "pubkey",
                  "description": [
                    "The unique id of the peer."
                  ]
                },
                "connected": {
                  "type": "boolean",
                  "description": [
                    "Value showing the connection status."
                  ]
                },
                "num_channels": {
                  "type": "u32",
                  "description": [
                    "The number of channels the peer has with this node."
                  ],
                  "added": "v23.02"
                },
                "log": {
                  "type": "array",
                  "description": [
                    "If *level* is specified, logs for this peer."
                  ],
                  "items": {
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "SKIPPED",
                          "BROKEN",
                          "UNUSUAL",
                          "INFO",
                          "DEBUG",
                          "TRACE",
                          "IO_IN",
                          "IO_OUT"
                        ]
                      }
                    },
                    "allOf": [
                      {
                        "if": {
                          "properties": {
                            "type": {
                              "enum": [
                                "SKIPPED"
                              ]
                            }
                          }
                        },
                        "then": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "num_skipped"
                          ],
                          "properties": {
                            "type": {},
                            "num_skipped": {
                              "type": "u32",
                              "description": [
                                "Number of deleted/omitted entries."
                              ]
                            }
                          }
                        }
                      },
                      {
                        "if": {
                          "properties": {
                            "type": {
                              "enum": [
                                "BROKEN",
                                "UNUSUAL",
                                "INFO",
                                "DEBUG",
                                "TRACE"
                              ]
                            }
                          }
                        },
                        "then": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "time",
                            "source",
                            "log",
                            "node_id"
                          ],
                          "properties": {
                            "type": {},
                            "time": {
                              "type": "string",
                              "description": [
                                "UNIX timestamp with 9 decimal places."
                              ]
                            },
                            "source": {
                              "type": "string",
                              "description": [
                                "The particular logbook this was found in."
                              ]
                            },
                            "log": {
                              "type": "string",
                              "description": [
                                "The actual log message."
                              ]
                            },
                            "node_id": {
                              "type": "pubkey",
                              "description": [
                                "The peer this is associated with."
                              ]
                            }
                          }
                        }
                      },
                      {
                        "if": {
                          "properties": {
                            "type": {
                              "enum": [
                                "IO_IN",
                                "IO_OUT"
                              ]
                            }
                          }
                        },
                        "then": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "time",
                            "source",
                            "log",
                            "node_id",
                            "data"
                          ],
                          "properties": {
                            "type": {},
                            "time": {
                              "type": "string",
                              "description": [
                                "UNIX timestamp with 9 decimal places."
                              ]
                            },
                            "source": {
                              "type": "string",
                              "description": [
                                "The particular logbook this was found in."
                              ]
                            },
                            "log": {
                              "type": "string",
                              "description": [
                                "The actual log message."
                              ]
                            },
                            "node_id": {
                              "type": "pubkey",
                              "description": [
                                "The peer this is associated with."
                              ]
                            },
                            "data": {
                              "type": "hex",
                              "description": [
                                "The IO which occurred."
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "allOf": [
                {
                  "if": {
                    "additionalProperties": true,
                    "properties": {
                      "connected": {
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "netaddr",
                      "features"
                    ],
                    "properties": {
                      "id": {},
                      "channels": {},
                      "connected": {},
                      "num_channels": {},
                      "htlcs": {},
                      "log": {},
                      "netaddr": {
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 1,
                        "description": [
                          "A single entry array."
                        ],
                        "items": {
                          "type": "string",
                          "description": [
                            "Address, e.g. 1.2.3.4:1234."
                          ]
                        }
                      },
                      "remote_addr": {
                        "type": "string",
                        "description": [
                          "The public IPv4/6 address the peer sees us from, e.g. 1.2.3.4:1234."
                        ]
                      },
                      "features": {
                        "type": "hex",
                        "description": [
                          "Bitmap of BOLT #9 features from peer's INIT message."
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong."
      ],
      "author": [
        "Michael Hawkins <<michael.hawkins@protonmail.com>>."
      ],
      "see_also": [
        "lightning-connect(7)",
        "lightning-fundchannel_start(7)",
        "lightning-setchannel(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>",
        "Lightning RFC site (BOLT #9):",
        "<https://github.com/lightning/bolts/blob/master/09-features.md>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listpeers#1",
            "method": "listpeers",
            "params": {
              "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d"
            }
          },
          "response": {
            "peers": [
              {
                "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "connected": true,
                "num_channels": 2,
                "netaddr": [
                  "127.0.0.1:34785"
                ],
                "features": "08a0802a8a59a1"
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listpeers#2",
            "method": "listpeers",
            "params": {}
          },
          "response": {
            "peers": [
              {
                "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "connected": true,
                "num_channels": 2,
                "netaddr": [
                  "127.0.0.1:34785"
                ],
                "features": "08a0802a8a59a1"
              },
              {
                "id": "032cf15d1ad9c4a08d26eab1918f732d8ef8fdc6abb9640bf3db174372c491304e",
                "connected": true,
                "num_channels": 1,
                "netaddr": [
                  "127.0.0.1:38251"
                ],
                "features": "08a0802a8a59a1"
              },
              {
                "id": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                "connected": true,
                "num_channels": 1,
                "netaddr": [
                  "127.0.0.1:47032"
                ],
                "features": "08a0802a8a59a1"
              }
            ]
          }
        }
      ]
    },
    "lightning-listsendpays.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listsendpays",
      "title": "Low-level command for querying sendpay status",
      "description": [
        "The **listsendpays** RPC command gets the status of all *sendpay* commands (which is also used by the *pay* command), or with *bolt11* or *payment_hash* limits results to that specific payment. You cannot specify both. It is possible to filter the payments also by *status*.",
        "",
        "Note that there may be more than one concurrent *sendpay* command per *pay*, so this command should be used with caution."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "bolt11": {
            "type": "string",
            "description": [
              "Bolt11 invoice."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the payment_preimage."
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "complete",
              "failed"
            ],
            "description": [
              "Whether the invoice has been paid, pending, or failed."
            ]
          },
          "index": {
            "type": "string",
            "added": "v23.11",
            "enum": [
              "created",
              "updated"
            ],
            "description": [
              "If neither bolt11 or payment_hash is specified, `index` controls ordering, by `created` (default) or `updated`."
            ]
          },
          "start": {
            "type": "u64",
            "added": "v23.11",
            "description": [
              "If `index` is specified, `start` may be specified to start from that value, which is generally returned from lightning-wait(7)."
            ]
          },
          "limit": {
            "type": "u32",
            "added": "v23.11",
            "description": [
              "If `index` is specified, `limit` can be used to specify the maximum number of entries to return."
            ]
          }
        },
        "dependentUpon": {
          "index": [
            "start",
            "limit"
          ]
        }
      },
      "response": {
        "required": [
          "payments"
        ],
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "id",
                "created_index",
                "payment_hash",
                "status",
                "groupid",
                "created_at",
                "amount_sent_msat"
              ],
              "properties": {
                "created_index": {
                  "added": "v23.11",
                  "type": "u64",
                  "description": [
                    "1-based index indicating order this payment was created in."
                  ]
                },
                "id": {
                  "type": "u64",
                  "description": [
                    "Old synonym for created_index."
                  ]
                },
                "groupid": {
                  "type": "u64",
                  "description": [
                    "Grouping key to disambiguate multiple attempts to pay an invoice or the same payment_hash."
                  ]
                },
                "partid": {
                  "type": "u64",
                  "description": [
                    "Part number (for multiple parts to a single payment)."
                  ]
                },
                "payment_hash": {
                  "type": "hash",
                  "description": [
                    "The hash of the *payment_preimage* which will prove payment."
                  ]
                },
                "updated_index": {
                  "added": "v23.11",
                  "type": "u64",
                  "description": [
                    "1-based index indicating order this payment was changed (only present if it has changed since creation)."
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "pending",
                    "failed",
                    "complete"
                  ],
                  "description": [
                    "Status of the payment."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount delivered to destination (if known)."
                  ]
                },
                "destination": {
                  "type": "pubkey",
                  "description": [
                    "The final destination of the payment if known."
                  ]
                },
                "created_at": {
                  "type": "u64",
                  "description": [
                    "The UNIX timestamp showing when this payment was initiated."
                  ]
                },
                "amount_sent_msat": {
                  "type": "msat",
                  "description": [
                    "The amount sent."
                  ]
                },
                "label": {
                  "type": "string",
                  "description": [
                    "The label, if given to sendpay."
                  ]
                },
                "bolt11": {
                  "type": "string",
                  "description": [
                    "The bolt11 string (if pay supplied one)."
                  ]
                },
                "description": {
                  "type": "string",
                  "description": [
                    "The description matching the bolt11 description hash (if pay supplied one)."
                  ]
                },
                "bolt12": {
                  "type": "string",
                  "description": [
                    "The bolt12 string (if supplied for pay: **experimental-offers** only)."
                  ]
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "complete"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [
                      "payment_preimage"
                    ],
                    "properties": {
                      "id": {},
                      "created_index": {},
                      "updated_index": {},
                      "partid": {},
                      "groupid": {},
                      "payment_hash": {},
                      "status": {},
                      "msatoshi": {},
                      "amount_msat": {},
                      "destination": {},
                      "created_at": {},
                      "msatoshi_sent": {},
                      "amount_sent_msat": {},
                      "label": {},
                      "bolt11": {},
                      "description": {},
                      "bolt12": {},
                      "completed_at": {
                        "type": "u64",
                        "added": "pre-v0.10.1",
                        "description": [
                          "The UNIX timestamp showing when this payment was completed."
                        ]
                      },
                      "payment_preimage": {
                        "type": "secret",
                        "description": [
                          "The proof of payment: SHA256 of this **payment_hash**."
                        ]
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "failed"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [],
                    "properties": {
                      "id": {},
                      "created_index": {},
                      "updated_index": {},
                      "partid": {},
                      "groupid": {},
                      "payment_hash": {},
                      "status": {},
                      "msatoshi": {},
                      "amount_msat": {},
                      "destination": {},
                      "created_at": {},
                      "completed_at": {},
                      "msatoshi_sent": {},
                      "amount_sent_msat": {},
                      "label": {},
                      "bolt11": {},
                      "description": {},
                      "bolt12": {},
                      "erroronion": {
                        "type": "hex",
                        "description": [
                          "The onion message returned."
                        ]
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "pending"
                        ]
                      }
                    }
                  },
                  "then": {
                    "additionalProperties": false,
                    "required": [],
                    "properties": {
                      "id": {},
                      "created_index": {},
                      "updated_index": {},
                      "partid": {},
                      "groupid": {},
                      "payment_hash": {},
                      "status": {},
                      "msatoshi": {},
                      "amount_msat": {},
                      "destination": {},
                      "created_at": {},
                      "msatoshi_sent": {},
                      "amount_sent_msat": {},
                      "label": {},
                      "bolt11": {},
                      "description": {},
                      "bolt12": {}
                    }
                  }
                }
              ]
            }
          }
        },
        "pre_return_value_notes": [
          "Note that the returned array is ordered by increasing *id*."
        ]
      },
      "author": [
        "Christian Decker <<decker.christian@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listpays(7)",
        "lightning-sendpay(7)",
        "lightning-listinvoices(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listsendpays#1",
            "method": "listsendpays",
            "params": {
              "bolt11": "lnbcrt100n1pn2s396sp5v3en0qa3rrljw4m0wtz88sx99q20rarufhjpfysefhwhs42gvqjqpp56kvvl33d594nsxu0hzhesvazgqzlwv89fnpjcvtlanz3rl7x623qdp9f9h8vmmfvdjjqer9wd3hy6tsw35k7m3qdsenzxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgq7za6z8kx2k5nul45zwttfz2njx3836v69mxqsl4ty9228pyjrkfnkymysy8ygsrrje9qf6j4tpalt5qkqusfp2esrsqc5ak7t4yzajgpezef54"
            }
          },
          "response": {
            "payments": [
              {
                "created_index": 2,
                "id": 2,
                "payment_hash": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2",
                "groupid": 1,
                "updated_index": 2,
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "amount_msat": 10000,
                "amount_sent_msat": 10001,
                "created_at": 1722303675,
                "completed_at": 1722303677,
                "status": "complete",
                "payment_preimage": "984a10782218478cd39e1f9a16795d756c337662067023a3b690bffdb1593f76"
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listsendpays#2",
            "method": "listsendpays",
            "params": {}
          },
          "response": {
            "payments": [
              {
                "created_index": 1,
                "id": 1,
                "payment_hash": "684b5650b3deb052c93efe1fe16e7703b56272468eecdeb3daac5b81216dcb52",
                "groupid": 1,
                "updated_index": 1,
                "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "amount_msat": 500000000,
                "amount_sent_msat": 500000000,
                "created_at": 1722303670,
                "completed_at": 1722303671,
                "status": "complete",
                "payment_preimage": "bed4140e1db302720d7f9547dc9127d45b115080447cce7e23cfd00b60991831",
                "bolt11": "lnbcrt5m1pn2s39ksp53sknyy2mxxurt4y0wqgp730z0cnm0vz3zmzth8p79xsrtmg5llxspp5dp94v59nm6c99jf7lc07zmnhqw6kyujx3mkdav7643dczgtdedfqdpcv3jhxcmjd9c8g6t0dcs8xetwvss8xmmdv5s8xct5wvsxcvfqw3hjqmpjxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqdz9cftkxe6kcqfddyrvr7j57ulsfxxxkgkjyhr3k77n8v59mzs5rmuexz9lxusyhhehlemd9ujclgahln8e0n8y86stc7u8uys6mjqgqerm6q4"
              },
              {
                "created_index": 2,
                "id": 2,
                "payment_hash": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2",
                "groupid": 1,
                "updated_index": 2,
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "amount_msat": 10000,
                "amount_sent_msat": 10001,
                "created_at": 1722303675,
                "completed_at": 1722303677,
                "status": "complete",
                "payment_preimage": "984a10782218478cd39e1f9a16795d756c337662067023a3b690bffdb1593f76"
              },
              {
                "created_index": 3,
                "id": 3,
                "payment_hash": "80ff407792947a23f193f9a1968e9a437b071364ae3159f83631335c9a453c1b",
                "groupid": 0,
                "updated_index": 3,
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "amount_msat": 10000,
                "amount_sent_msat": 10001,
                "created_at": 1722303677,
                "completed_at": 1722303679,
                "status": "complete",
                "payment_preimage": "0d802c9c611bae611d51afa8ddf396df8ba4e0580a2eccfd1120da97e70482a0"
              },
              {
                "created_index": 4,
                "id": 4,
                "payment_hash": "3b80a3028343b16f8ab7261343eae40ff73ba833b0b7d4dcbfd42a3078dc322b",
                "groupid": 0,
                "updated_index": 4,
                "destination": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "amount_msat": 10000000,
                "amount_sent_msat": 10000202,
                "created_at": 1722303679,
                "completed_at": 1722303682,
                "status": "complete",
                "payment_preimage": "f76d6b7ef362f33e25eb5571e616f6e539a2c77caf0afa4227d1351546823664"
              },
              {
                "created_index": 5,
                "id": 5,
                "payment_hash": "0458c01fdd3aa0b9829002390301f92083e78dc27bb293bc3e7caee5d4ed7259",
                "groupid": 0,
                "updated_index": 5,
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "amount_msat": 10000,
                "amount_sent_msat": 10001,
                "created_at": 1722303682,
                "completed_at": 1722303684,
                "status": "failed"
              },
              {
                "created_index": 6,
                "id": 6,
                "payment_hash": "0458c01fdd3aa0b9829002390301f92083e78dc27bb293bc3e7caee5d4ed7259",
                "groupid": 0,
                "updated_index": 6,
                "partid": 1,
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "amount_msat": 10000,
                "amount_sent_msat": 10001,
                "created_at": 1722303684,
                "completed_at": 1722303686,
                "status": "complete",
                "payment_preimage": "4dad6dcf625f650a35a8199fbda18ea4f6717cdfadb40e6bed2bf5f96a4742b0"
              },
              {
                "created_index": 7,
                "id": 7,
                "payment_hash": "788aea729ede48d315a199ce5ded76169601a61dd52e9734e707eb7c52e4e79e",
                "groupid": 1,
                "updated_index": 7,
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "amount_msat": 50000,
                "amount_sent_msat": 50001,
                "created_at": 1722303686,
                "completed_at": 1722303688,
                "status": "complete",
                "payment_preimage": "0e07efd883f66b6b22ec7f2e7116e203c3fecc22eb8596a73eaf06c4befb0641",
                "bolt11": "lnbcrt500n1pn2s396sp5h5tz6fpm3dxvrlwcnwmfq85v45wfj43mdmplpce6ku2vmfdhrx5qpp50z9w5u57meydx9dpn889mmtkz6tqrfsa65hfwd88ql4hc5hyu70qdqcdsenygryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqt5m8qx0t25a0gygya7u4sxulyyp2dec87pwsxuuwtg0u66c07703g9j6vlwgmlhqk7qgn95qw7allhnuj2m9hf0xkcr2zkaxltv3t6gqjcdpll"
              },
              {
                "created_index": 8,
                "id": 8,
                "payment_hash": "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13",
                "groupid": 1,
                "updated_index": 8,
                "amount_sent_msat": 1002,
                "created_at": 1722303689,
                "completed_at": 1722303692,
                "status": "complete",
                "payment_preimage": "5e49b520e86aaec8d798bf8107892fb87053d4cb27342518e4588aa609cf35cf"
              },
              {
                "created_index": 9,
                "id": 9,
                "payment_hash": "968c136c07c39b17d1925358dd36f5dd86f8691c666ec27f24de5a84d590dc49",
                "groupid": 1,
                "updated_index": 9,
                "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "amount_msat": 10000,
                "amount_sent_msat": 10001,
                "created_at": 1722303696,
                "completed_at": 1722303698,
                "status": "failed"
              },
              {
                "created_index": 10,
                "id": 10,
                "payment_hash": "781dc1aee5839bf106f264b0a06cf0740f2c71fc51c9562e90f4ee38ca0fc459",
                "groupid": 1,
                "updated_index": 10,
                "partid": 1,
                "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "amount_msat": 400000,
                "amount_sent_msat": 400000,
                "created_at": 1722303718,
                "completed_at": 1722303719,
                "status": "complete",
                "payment_preimage": "af67b48518e78e157db404d13cb42987c31e034634203d10b224302b05fc6c90",
                "bolt11": "lnbcrt1pn2s3xxsp5xvccgadvepzypat5v8u8tstwdvn9ez4908h7ntl4s0ggx76ug4cqpp50qwurth9swdlzphjvjc2qm8sws8jcu0u28y4vt5s7nhr3js0c3vsdqcdserzgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqw4qfxj30wqn2m2qmcfz2gs6ttszdhkc0kjqk0mgg59tj2cy90wcke4tjzmzakrkvcgqgf3367j47q5g2ruuw67cxaqxm2t4m42yecsqp92jzs7"
              }
            ]
          }
        }
      ]
    },
    "lightning-listsqlschemas.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.02",
      "rpc": "listsqlschemas",
      "title": "Command to example lightning-sql schemas",
      "description": [
        "This allows you to examine the schemas at runtime; while they are fully documented for the current release in lightning-sql(7), as fields are added or deprecated, you can use this command to determine what fields are present.",
        "",
        "If *table* is given, only that table is in the resulting list, otherwise all tables are listed."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {
          "table": {
            "type": "string"
          }
        }
      },
      "response": {
        "required": [
          "schemas"
        ],
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "tablename",
                "columns"
              ],
              "properties": {
                "tablename": {
                  "type": "string",
                  "description": [
                    "The name of the table."
                  ]
                },
                "columns": {
                  "type": "array",
                  "description": [
                    "The columns, in database order."
                  ],
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "name",
                      "type"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": [
                          "The name of the column."
                        ]
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "INTEGER",
                          "BLOB",
                          "TEXT",
                          "REAL"
                        ],
                        "description": [
                          "The SQL type of the column."
                        ]
                      }
                    }
                  }
                },
                "indices": {
                  "type": "array",
                  "description": [
                    "Any index we created to speed lookups."
                  ],
                  "items": {
                    "type": "array",
                    "description": [
                      "The columns for this index."
                    ],
                    "items": {
                      "type": "string",
                      "description": [
                        "The column name."
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-sql(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listsqlschemas#1",
            "method": "listsqlschemas",
            "params": {
              "table": "offers"
            }
          },
          "response": {
            "schemas": [
              {
                "tablename": "offers",
                "columns": [
                  {
                    "name": "rowid",
                    "type": "INTEGER"
                  },
                  {
                    "name": "offer_id",
                    "type": "BLOB"
                  },
                  {
                    "name": "active",
                    "type": "INTEGER"
                  },
                  {
                    "name": "single_use",
                    "type": "INTEGER"
                  },
                  {
                    "name": "bolt12",
                    "type": "TEXT"
                  },
                  {
                    "name": "used",
                    "type": "INTEGER"
                  },
                  {
                    "name": "label",
                    "type": "TEXT"
                  }
                ],
                "indices": [
                  [
                    "offer_id"
                  ]
                ]
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:listsqlschemas#2",
            "method": "listsqlschemas",
            "params": [
              "closedchannels"
            ]
          },
          "response": {
            "schemas": [
              {
                "tablename": "closedchannels",
                "columns": [
                  {
                    "name": "rowid",
                    "type": "INTEGER"
                  },
                  {
                    "name": "peer_id",
                    "type": "BLOB"
                  },
                  {
                    "name": "channel_id",
                    "type": "BLOB"
                  },
                  {
                    "name": "short_channel_id",
                    "type": "TEXT"
                  },
                  {
                    "name": "alias_local",
                    "type": "TEXT"
                  },
                  {
                    "name": "alias_remote",
                    "type": "TEXT"
                  },
                  {
                    "name": "opener",
                    "type": "TEXT"
                  },
                  {
                    "name": "closer",
                    "type": "TEXT"
                  },
                  {
                    "name": "private",
                    "type": "INTEGER"
                  },
                  {
                    "name": "total_local_commitments",
                    "type": "INTEGER"
                  },
                  {
                    "name": "total_remote_commitments",
                    "type": "INTEGER"
                  },
                  {
                    "name": "total_htlcs_sent",
                    "type": "INTEGER"
                  },
                  {
                    "name": "funding_txid",
                    "type": "BLOB"
                  },
                  {
                    "name": "funding_outnum",
                    "type": "INTEGER"
                  },
                  {
                    "name": "leased",
                    "type": "INTEGER"
                  },
                  {
                    "name": "funding_fee_paid_msat",
                    "type": "INTEGER"
                  },
                  {
                    "name": "funding_fee_rcvd_msat",
                    "type": "INTEGER"
                  },
                  {
                    "name": "funding_pushed_msat",
                    "type": "INTEGER"
                  },
                  {
                    "name": "total_msat",
                    "type": "INTEGER"
                  },
                  {
                    "name": "final_to_us_msat",
                    "type": "INTEGER"
                  },
                  {
                    "name": "min_to_us_msat",
                    "type": "INTEGER"
                  },
                  {
                    "name": "max_to_us_msat",
                    "type": "INTEGER"
                  },
                  {
                    "name": "last_commitment_txid",
                    "type": "BLOB"
                  },
                  {
                    "name": "last_commitment_fee_msat",
                    "type": "INTEGER"
                  },
                  {
                    "name": "close_cause",
                    "type": "TEXT"
                  },
                  {
                    "name": "last_stable_connection",
                    "type": "INTEGER"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "lightning-listtransactions.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "listtransactions",
      "title": "Command to get the list of transactions that was stored in the wallet.",
      "description": [
        "The **listtransactions** command returns transactions tracked in the wallet. This includes deposits, withdrawals and transactions related to channels. A transaction may have multiple types, e.g., a transaction may both be a close and a deposit if it closes the channel and returns funds to the wallet."
      ],
      "categories": [
        "readonly"
      ],
      "request": {
        "required": [],
        "properties": {}
      },
      "response": {
        "required": [
          "transactions"
        ],
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "hash",
                "rawtx",
                "blockheight",
                "txindex",
                "locktime",
                "version",
                "inputs",
                "outputs"
              ],
              "properties": {
                "hash": {
                  "type": "txid",
                  "description": [
                    "The transaction id."
                  ]
                },
                "rawtx": {
                  "type": "hex",
                  "description": [
                    "The raw transaction."
                  ]
                },
                "blockheight": {
                  "type": "u32",
                  "description": [
                    "The block height of this tx."
                  ]
                },
                "txindex": {
                  "type": "u32",
                  "description": [
                    "The transaction number within the block."
                  ]
                },
                "locktime": {
                  "type": "u32",
                  "description": [
                    "The nLocktime for this tx."
                  ]
                },
                "version": {
                  "type": "u32",
                  "description": [
                    "The nVersion for this tx."
                  ]
                },
                "inputs": {
                  "type": "array",
                  "description": [
                    "Each input, in order."
                  ],
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "txid",
                      "index",
                      "sequence"
                    ],
                    "properties": {
                      "txid": {
                        "type": "txid",
                        "description": [
                          "The transaction id spent."
                        ]
                      },
                      "index": {
                        "type": "u32",
                        "description": [
                          "The output spent."
                        ]
                      },
                      "sequence": {
                        "type": "u32",
                        "description": [
                          "The nSequence value."
                        ]
                      }
                    }
                  }
                },
                "outputs": {
                  "type": "array",
                  "description": [
                    "Each output, in order."
                  ],
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "index",
                      "amount_msat",
                      "scriptPubKey"
                    ],
                    "properties": {
                      "index": {
                        "type": "u32",
                        "description": [
                          "The 0-based output number."
                        ]
                      },
                      "amount_msat": {
                        "type": "msat",
                        "description": [
                          "The amount of the output."
                        ]
                      },
                      "scriptPubKey": {
                        "type": "hex",
                        "description": [
                          "The scriptPubKey."
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters."
      ],
      "author": [
        "Vincenzo Palazzo <<vincenzo.palazzo@protonmail.com>> wrote the initial version of this man page,",
        "but many others did the hard work of actually implementing this rpc command."
      ],
      "see_also": [
        "lightning-newaddr(7)",
        "lightning-listfunds(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:listtransactions#1",
            "method": "listtransactions",
            "params": {}
          },
          "response": {
            "transactions": [
              {
                "hash": "1712c8af55f6853be3179bf20398689bb9204695fe3d6171c3248783218814e3",
                "rawtx": "02000000000101096b01ae63d631e321f039d49df4c5b055ce3afa655a3d5c22c2a8594f41f5cd0000000000fdffffff02002d31010000000017a914655728f36cfe36d01aa50d3236704469f84a55408771c4d4280100000017a9147cdfb08e6e44fc1152c4f423225d2b7148248a9d870247304402202ff40c938d644198c10d60fe660c1380bd601b6dc4533b64c64d3809290edf4a022028206e39cc36423524816a34806a721061814478b297c2bfb2bc3c417548c466012102129f00a7502a031999fe81aa35afed6f09617a9748e5fdde0f7a0191d364f59b65000000",
                "blockheight": 102,
                "txindex": 1,
                "locktime": 101,
                "version": 2,
                "inputs": [
                  {
                    "txid": "cdf5414f59a8c2225c3d5a65fa3ace55b0c5f49dd439f021e331d663ae016b09",
                    "index": 0,
                    "sequence": 4294967293
                  }
                ],
                "outputs": [
                  {
                    "index": 0,
                    "amount_msat": 20000000000,
                    "scriptPubKey": "a914655728f36cfe36d01aa50d3236704469f84a554087"
                  },
                  {
                    "index": 1,
                    "amount_msat": 4979999857000,
                    "scriptPubKey": "a9147cdfb08e6e44fc1152c4f423225d2b7148248a9d87"
                  }
                ]
              },
              {
                "hash": "9454852bb62e304ee8933662284e10bd22a7f3710c262da4c94bdcc8b05ae407",
                "rawtx": "02000000000101e3148821838724c371613dfe954620b99b689803f29b17e33b85f655afc812170000000017160014d6b969d36dffdad9869193f663ee480dfdc73488fdffffff0135143101000000002251206c27e1956acfa61e68292c80908880e813450f754132e8a2ac471a86bf1326b50247304402201b09adb26aa7674b2e4954bef85e5d4cb5baee1e20c91e6d26db624407588b4e022044bae97372215531507b464b7978e6f9dc25f986aed5ab62dbc011c1e80a544f012102b9c0c6844e12a531c968e55c55078ec16d9bf76be9290fd87d1cca72b4839a1766000000",
                "blockheight": 103,
                "txindex": 1,
                "locktime": 102,
                "version": 2,
                "inputs": [
                  {
                    "txid": "1712c8af55f6853be3179bf20398689bb9204695fe3d6171c3248783218814e3",
                    "index": 0,
                    "sequence": 4294967293
                  }
                ],
                "outputs": [
                  {
                    "index": 0,
                    "amount_msat": 19993653000,
                    "scriptPubKey": "51206c27e1956acfa61e68292c80908880e813450f754132e8a2ac471a86bf1326b5"
                  }
                ]
              },
              {
                "hash": "706e569239dfe88a33ae6d276ae68d6c787a2403ecf0ac97ed14eec28aa6039d",
                "rawtx": "02000000000101e3148821838724c371613dfe954620b99b689803f29b17e33b85f655afc8121701000000171600142577677b3b18e431cfe9ac900e842b4d0567d251fdffffff0200c2eb0b00000000160014661c23b790dd3491373af0b1d8bed0877d5cde22cd01e91c010000001600140527f5b39d5b246fc5ed823c59ccdc5cc50e70580247304402205d01bd83c715b11e29040b0e8a193629194f638b7369270d668df172616d872302205bbad12ce8fc7a4694195dc3871302e808547b24e7098ffd089d0e340ccf3b950121034bcbb11214c52ca895d87add0c0de5a1dfb429966aa50f59afe33669319ea99266000000",
                "blockheight": 103,
                "txindex": 2,
                "locktime": 102,
                "version": 2,
                "inputs": [
                  {
                    "txid": "1712c8af55f6853be3179bf20398689bb9204695fe3d6171c3248783218814e3",
                    "index": 1,
                    "sequence": 4294967293
                  }
                ],
                "outputs": [
                  {
                    "index": 0,
                    "amount_msat": 200000000000,
                    "scriptPubKey": "0014661c23b790dd3491373af0b1d8bed0877d5cde22"
                  },
                  {
                    "index": 1,
                    "amount_msat": 4779999693000,
                    "scriptPubKey": "00140527f5b39d5b246fc5ed823c59ccdc5cc50e7058"
                  }
                ]
              },
              {
                "hash": "7547ffc11396c62852104f7100d5ca27a2b9c0d5d43d08122147b2b03eb157a5",
                "rawtx": "02000000000101e4f55092d059070e27bc6d3a8cce1ba7137244e997c499ce47ca9828d82319fc0000000000fdffffff0280841e00000000001600149fb67bfcefee6cb7db4c7e55d9c6bfd749e31d1e8c721bed0000000016001442e74d56791e0c6447ebb87c612d324a8fd1e9f90247304402201843081a5417aec6d9e77e894ca159622d76360a16b9ee66e7d363a38ccd2a6102206b2dfb4bd0b0e8c25ed798842288c0ef3a0e328fa4f42d6fb5c479715ab2f0710121023770a6280695342030684ebaf25094a197f97acbb988e1ec8459b6228e20f8596b000000",
                "blockheight": 108,
                "txindex": 1,
                "locktime": 107,
                "version": 2,
                "inputs": [
                  {
                    "txid": "fc1923d82898ca47ce99c497e9447213a71bce8c3a6dbc270e0759d09250f5e4",
                    "index": 0,
                    "sequence": 4294967293
                  }
                ],
                "outputs": [
                  {
                    "index": 0,
                    "amount_msat": 2000000000,
                    "scriptPubKey": "00149fb67bfcefee6cb7db4c7e55d9c6bfd749e31d1e"
                  },
                  {
                    "index": 1,
                    "amount_msat": 3977998988000,
                    "scriptPubKey": "001442e74d56791e0c6447ebb87c612d324a8fd1e9f9"
                  }
                ]
              },
              {
                "hash": "737d6835ddafd515ba9e9def733bb4e4211f6053a32b1422bf1c8cc240850f96",
                "rawtx": "020000000001019d03a68ac2ee14ed97acf0ec03247a786c8de66a276dae338ae8df3992566e700000000000fdffffff02816cdc0b0000000022512035f1184f6b470c9df347da62c4b28e7ec9ee10b220bac3accd22209def0036ea40420f00000000002200205b8cd3b914cf67cdd8fa6273c930353dd36476734fbd962102c2df53b90880cd0247304402207336a772e8643be4dc672957feaa3c9d97dde0aa5d8014a35ebc4772d8dacf91022074cd9cf97077fbf2f5d380b3917565f05232cc07db22aef12f327d6603861d6f012103fa9c95085e42b1e5003cd1f418178c30c96e4ae77954ca0fc48c58826ff4eb0e6c000000",
                "blockheight": 109,
                "txindex": 1,
                "locktime": 108,
                "version": 2,
                "inputs": [
                  {
                    "txid": "706e569239dfe88a33ae6d276ae68d6c787a2403ecf0ac97ed14eec28aa6039d",
                    "index": 0,
                    "sequence": 4294967293
                  }
                ],
                "outputs": [
                  {
                    "index": 0,
                    "amount_msat": 198995073000,
                    "scriptPubKey": "512035f1184f6b470c9df347da62c4b28e7ec9ee10b220bac3accd22209def0036ea"
                  },
                  {
                    "index": 1,
                    "amount_msat": 1000000000,
                    "scriptPubKey": "00205b8cd3b914cf67cdd8fa6273c930353dd36476734fbd962102c2df53b90880cd"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "lightning-makesecret.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "makesecret",
      "title": "Command for deriving pseudorandom key from HSM",
      "description": [
        "The **makesecret** RPC command derives a secret key from the HSM_secret."
      ],
      "request": {
        "required": [],
        "properties": {
          "hex": {
            "type": "hex",
            "description": [
              "One of `hex` or `string` must be specified: `hex` can be any hex data."
            ]
          },
          "string": {
            "type": "string",
            "description": [
              "One of `hex` or `string` must be specified: `string` is a UTF-8 string interpreted literally."
            ]
          }
        }
      },
      "response": {
        "required": [
          "secret"
        ],
        "properties": {
          "secret": {
            "type": "secret",
            "description": [
              "The pseudorandom key derived from HSM_secret."
            ]
          }
        }
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- -1: Catchall nonspecific error."
      ],
      "author": [
        "Aditya <<aditya.sharma20111@gmail.com>> is mainly responsible."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:makesecret#1",
            "method": "makesecret",
            "params": [
              "73636220736563726574"
            ]
          },
          "response": {
            "secret": "82d3e65651ac89124448cb88b5f4cd009f6c321f58ada0fca6e9e3f2d1c5889e"
          }
        },
        {
          "request": {
            "id": "example:makesecret#2",
            "method": "makesecret",
            "params": {
              "string": "scb secret"
            }
          },
          "response": {
            "secret": "82d3e65651ac89124448cb88b5f4cd009f6c321f58ada0fca6e9e3f2d1c5889e"
          }
        }
      ]
    },
    "lightning-multifundchannel.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "multifundchannel",
      "title": "Command for establishing many lightning channels",
      "description": [
        "The **multifundchannel** RPC command opens multiple payment channels with nodes by committing a single funding transaction to the blockchain that is shared by all channels.",
        "",
        "If not already connected, **multifundchannel** will automatically attempt to connect; you may provide a *@host:port* hint appended to the node ID so that Core Lightning can learn how to connect to the node; see lightning-connect(7).",
        "",
        "Once the transaction is confirmed, normal channel operations may begin. Readiness is indicated by **listpeers** reporting a *state* of `CHANNELD_NORMAL` for the channel."
      ],
      "request": {
        "required": [
          "destinations"
        ],
        "properties": {
          "destinations": {
            "type": "array",
            "description": [
              "There must be at least one entry in *destinations*; it cannot be an empty array."
            ],
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "amount"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": [
                    "Node ID, with an optional *@host:port* appended to it in a manner understood by **connect**; see lightning-connect(7). Each entry in the *destinations* array must have a unique node *id*. If not already connected, **multifundchannel** will automatically attempt to connect to the node."
                  ]
                },
                "amount": {
                  "type": "sat_or_all",
                  "description": [
                    "Amount in satoshis taken from the internal wallet to fund the channel (but if we have any anchor channels, this will always leave at least `min-emergency-msat` as change). The string *all* can be used to specify all available funds (or 16,777,215 satoshi if more is available and large channels were not negotiated with the peer). Otherwise it is in satoshi precision; it can be a whole number, a whole number ending in *sat*, a whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*. The value cannot be less than the dust limit, currently 546 satoshi as of this writing, nor more than 16,777,215 satoshi (unless large channels were negotiated with the peer)."
                  ]
                },
                "announce": {
                  "type": "boolean",
                  "description": [
                    "Flag that indicates whether to announce the channel with this. If set to `False`, the channel is unpublished."
                  ],
                  "default": "`True`"
                },
                "push_msat": {
                  "type": "msat",
                  "description": [
                    "Amount of millisatoshis to outright give to the node. This is a gift to the peer, and you do not get a proof-of-payment out of this."
                  ]
                },
                "close_to": {
                  "type": "string",
                  "description": [
                    "Bitcoin address to which the channel funds should be sent to on close. Only valid if both peers have negotiated `option_upfront_shutdown_script` Returns `close_to` set to closing script iff is negotiated."
                  ]
                },
                "request_amt": {
                  "type": "sat",
                  "description": [
                    "Amount of liquidity you'd like to lease from peer. If peer supports `option_will_fund`, indicates to them to include this much liquidity into the channel. Must also pass in *compact_lease*."
                  ]
                },
                "compact_lease": {
                  "type": "string",
                  "description": [
                    "Compact representation of the peer's expected channel lease terms. If the peer's terms don't match this set, we will fail to open the channel to this destination."
                  ]
                },
                "mindepth": {
                  "type": "u32",
                  "description": [
                    "Number of confirmations before we consider the channel active."
                  ]
                },
                "reserve": {
                  "type": "sat",
                  "description": [
                    "Amount we want the peer to maintain on its side of the channel. It can be a whole number, a whole number ending in *sat*, a whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*."
                  ],
                  "default": "1% of the funding amount"
                }
              }
            }
          },
          "feerate": {
            "type": "feerate",
            "description": [
              "Feerate used for the opening transaction, and if *commitment_feerate* is not set, as initial feerate for commitment and HTLC transactions. See NOTES in lightning-feerates(7) for possible values."
            ],
            "default": "*normal*"
          },
          "minconf": {
            "type": "integer",
            "description": [
              "Minimum number of confirmations that used outputs should have."
            ],
            "default": 1
          },
          "utxos": {
            "type": "array",
            "items": {
              "type": "outpoint",
              "description": [
                "Utxos to be used to fund the channel, as an array of `txid:vout`."
              ]
            }
          },
          "minchannels": {
            "type": "integer",
            "description": [
              "Re-attempt funding as long as at least this many peers remain (must not be zero). The **multifundchannel** command will only fail if too many peers fail the funding process."
            ]
          },
          "commitment_feerate": {
            "type": "feerate",
            "description": [
              "Initial feerate for commitment and HTLC transactions. See *feerate* for valid values."
            ]
          }
        }
      },
      "response": {
        "required": [
          "tx",
          "txid",
          "channel_ids"
        ],
        "properties": {
          "tx": {
            "type": "hex",
            "description": [
              "The raw transaction which funded the channel."
            ]
          },
          "txid": {
            "type": "txid",
            "description": [
              "The txid of the transaction which funded the channel."
            ]
          },
          "channel_ids": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "channel_id",
                "channel_type",
                "outnum"
              ],
              "properties": {
                "id": {
                  "type": "pubkey",
                  "description": [
                    "The peer we opened the channel with."
                  ]
                },
                "outnum": {
                  "type": "u32",
                  "description": [
                    "The 0-based output index showing which output funded the channel."
                  ]
                },
                "channel_id": {
                  "type": "hash",
                  "description": [
                    "The channel_id of the resulting channel."
                  ]
                },
                "channel_type": {
                  "type": "object",
                  "description": [
                    "Channel_type as negotiated with peer."
                  ],
                  "added": "v24.02",
                  "additionalProperties": false,
                  "required": [
                    "bits",
                    "names"
                  ],
                  "properties": {
                    "bits": {
                      "type": "array",
                      "description": [
                        "Each bit set in this channel_type."
                      ],
                      "added": "v24.02",
                      "items": {
                        "type": "u32",
                        "description": [
                          "Bit number."
                        ]
                      }
                    },
                    "names": {
                      "type": "array",
                      "description": [
                        "Feature name for each bit set in this channel_type. Note that *anchors_zero_fee_htlc_tx* is a deprecated synonym for *anchors*."
                      ],
                      "added": "v24.02",
                      "items": {
                        "type": "string",
                        "enum": [
                          "static_remotekey/even",
                          "anchor_outputs/even",
                          "anchors_zero_fee_htlc_tx/even",
                          "anchors/even",
                          "scid_alias/even",
                          "zeroconf/even"
                        ],
                        "description": [
                          "Name of feature bit."
                        ]
                      }
                    }
                  }
                },
                "close_to": {
                  "type": "hex",
                  "description": [
                    "The raw scriptPubkey which mutual close will go to; only present if *close_to* parameter was specified and peer supports `option_upfront_shutdown_script`."
                  ]
                }
              }
            }
          },
          "failed": {
            "type": "array",
            "description": [
              "Any peers we failed to open with (if *minchannels* was specified less than the number of destinations)."
            ],
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "method",
                "error"
              ],
              "properties": {
                "id": {
                  "type": "pubkey",
                  "description": [
                    "The peer we failed to open the channel with."
                  ]
                },
                "method": {
                  "type": "string",
                  "enum": [
                    "connect",
                    "openchannel_init",
                    "fundchannel_start",
                    "fundchannel_complete"
                  ],
                  "description": [
                    "What stage we failed at."
                  ]
                },
                "error": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": [
                        "JSON error code from failing stage."
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": [
                        "Message from stage."
                      ]
                    },
                    "data": {
                      "untyped": true,
                      "description": [
                        "Additional error data."
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "pre_return_value_notes": [
          "This command opens multiple channels with a single large transaction, thus only one transaction is returned.",
          "",
          "If *minchannels* was specified and is less than the number of destinations, then it is possible that one or more of the destinations do not have a channel even if **multifundchannel** succeeded."
        ],
        "post_return_value_notes": [
          "On failure, none of the channels are created."
        ]
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- -1: Catchall nonspecific error.",
        "- 300: The maximum allowed funding amount is exceeded.",
        "- 301: There are not enough funds in the internal wallet (including fees) to create the transaction.",
        "- 302: The output amount is too small, and would be considered dust.",
        "- 303: Broadcasting of the funding transaction failed, the internal call to bitcoin-cli returned with an error.",
        "- 313: The `min-emergency-msat` reserve not be preserved (and we have or are opening anchor channels).",
        "",
        "Failure may also occur if **lightningd** and the peer cannot agree on channel parameters (funding limits, channel reserves, fees, etc.). See lightning-fundchannel_start(7) and lightning-fundchannel_complete(7).",
        "",
        "There may be rare edge cases where a communications failure later in the channel funding process will cancel the funding locally, but the peer thinks the channel is already waiting for funding lockin. In that case, the next time we connect to the peer, our node will tell the peer to forget the channel, but some nodes (in particular, Core Lightning nodes) will disconnect when our node tells them to forget the channel. If you immediately **multifundchannel** with that peer, it could trigger this connect-forget-disconnect behavior, causing the second **multifundchannel** to fail as well due to disconnection. Doing a **connect** with the peers separately, and waiting for a few seconds, should help clear this hurdle; running **multifundchannel** a third time would also clear this."
      ],
      "author": [
        "ZmnSCPxj <<ZmnSCPxj@protonmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-connect(7)",
        "lightning-listfunds()",
        "lightning-listpeers(7)",
        "lightning-fundchannel(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "description": [
            "This example opens three channels at once, with amounts 20,000 sats, 30,000 sats",
            "and the final channel using all remaining funds (actually, capped at 16,777,215 sats",
            "because large-channels is not enabled):"
          ],
          "request": {
            "id": "example:multifundchannel#1",
            "method": "multifundchannel",
            "params": {
              "destinations": [
                {
                  "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d@127.0.0.1:34785",
                  "amount": "20000sat"
                },
                {
                  "id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199@127.0.0.1:46213",
                  "amount": "0.0003btc"
                },
                {
                  "id": "032cf15d1ad9c4a08d26eab1918f732d8ef8fdc6abb9640bf3db174372c491304e@127.0.0.1:38251",
                  "amount": "all"
                }
              ],
              "feerate": "10000perkw",
              "commitment_feerate": "2000perkw"
            }
          },
          "response": {
            "tx": "02000000000107feed56fc07fe7a3094f5f7c104f4ac8f3c96f6bf7c44df90619307d6f75c06850200000000fdffffff72819eb0ce9892c1025fd83e5e1a39fd30f79f843b489a32c20f45e67f37c5f30100000000fdffffff187f8d1b7292d57a46e23ae746c530741b8493dff74a7f62ca7e200204f6ec800000000000fdfffffffeed56fc07fe7a3094f5f7c104f4ac8f3c96f6bf7c44df90619307d6f75c06850100000000fdffffff07e45ab0c8dc4bc9a42d260c71f3a722bd104e28623693e84e302eb62b8554940000000000fdffffff187f8d1b7292d57a46e23ae746c530741b8493dff74a7f62ca7e200204f6ec800700000000fdffffff187f8d1b7292d57a46e23ae746c530741b8493dff74a7f62ca7e200204f6ec800400000000fdffffff040a8b250700000000220020f7bbe8f915381b4b9b1ca14cccbfd156eea19888550d01a5014f977e98c7fc8c204e000000000000220020369444aad3ac8c5452be625479f761587c42fbf66fecf644447daabc73c498223075000000000000220020d90c23ede7b77f89f4cae93da9326ba176d158a0b65faeaede5684c3c0f7c839a86100000000000022512018ece00b736f9ed77ed3a87426643c242223e3d6116a4cd6d90946f73de2ce71024730440220296f0d677ae2151a2fceb00c717483488f46aff309e28f36934ec3bcf914443f02204a7a20186d9b936e029c6b55df302386ad306f6738176945cf5d8607c18d16c7012102272a9a25f1ffed52fab04a2cc88aeab135b53723856a8f1481c26417f88a922e02473044022063c77ad73bd1993abc48b04b2f7b66ab7aa34f56f55c69b1c3e1868a4580554c0220466333d7e6e9163ec6ad6ef755be6e61a79a6a50ac8ad32d071b2819f2a113a60121029da47016812598be384212ce15793496c0ec2176a87e81c6432dae964f87c9870247304402205dfb4fcf67b12cf0fc3a1f3527bc37964c1604fb7ac11df2fd80b2bde605689d02203bbd1bcf5f92a6cd31c9459c9252d84fcd102fdfc8e367360e71ef047c704015012103d034f788f410c2ec2d89d161df3c3715f965248aa53eace463d10eca443eb1f20247304402203b12894f094c85c94bf7a898ddfe8d82359486aedb56b0891e5db83fee628dff0220478b954fd0514de5ff0d3273ed93d54f87e7d90e63f2d4b478a9a7669af2e1110121028a599168d3c97debc71bc66e6270ecf054f300d888309ba05471a482175dd9300140508f9706e9d6353d0a19a9128353fc8090948de09ee79afc35ae10c17ab0f894ec04eabf9187082bd31d3b63e9e52d99cbaef4c1f79dd6121024a7d3b4d994ec014054bdc1bab81661fd3ad8c0a65402abf2c2228da8f2150b6ce0cb8fddafd4c25a0318cc16cdbf72c5142dd6bbccb606cc7c2c39f91a218309dc5dadb7a74fe56b024730440220203ba0cc960cb70555e2096ecba5a5992b6b35ff621f736625360f836d208ce202207fa53d5ac33847fc166e03d888ef27c709dc65bfb79ece85d9d93bdda62c0ca501210267f4468ffafe6f919ae871f57f09690467f494e83e0358dc64d10472f9072f4c9b000000",
            "txid": "9c3d4a6491eaa04c378101a7a7836f07409d04db8295b14930f89f7562744e18",
            "channel_ids": [
              {
                "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "channel_id": "a9c39915cfa357205e3597ec62d92c541a2be7f44b9c6292e126aeddb11bf97e",
                "channel_type": {
                  "bits": [
                    12,
                    22
                  ],
                  "names": [
                    "static_remotekey/even",
                    "anchors/even"
                  ]
                },
                "outnum": 1
              },
              {
                "id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "channel_id": "a4a379248e49d207cc984646e632e1a31105a85708b9d6d961a5018fdd489f5a",
                "channel_type": {
                  "bits": [
                    12,
                    22
                  ],
                  "names": [
                    "static_remotekey/even",
                    "anchors/even"
                  ]
                },
                "outnum": 2
              },
              {
                "id": "032cf15d1ad9c4a08d26eab1918f732d8ef8fdc6abb9640bf3db174372c491304e",
                "channel_id": "e13472d6512413eb1bf03b9a0bb391d0e4152fd337fa6d1014e3de5e131918d9",
                "channel_type": {
                  "bits": [
                    12,
                    22
                  ],
                  "names": [
                    "static_remotekey/even",
                    "anchors/even"
                  ]
                },
                "outnum": 0
              }
            ],
            "failed": []
          }
        },
        {
          "request": {
            "id": "example:multifundchannel#2",
            "method": "multifundchannel",
            "params": {
              "destinations": [
                {
                  "id": "03a389b3a2f7aa6f9f4ccc19f2bd7a2eba83596699e86b715caaaa147fc37f3144@127.0.0.1:34785",
                  "amount": 50000
                },
                {
                  "id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199@127.0.0.1:46213",
                  "amount": 50000
                },
                {
                  "id": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518@127.0.0.1:39877",
                  "amount": 50000
                }
              ],
              "minchannels": 1
            }
          },
          "response": {
            "tx": "0200000000010289da71f14f2e28c351f3f2cea6c9008fbf316cd353f6a084a17851afd37e5be70000000000fdffffffdcb684b96d9a2a37ef441c5eca75d15ef35ca8e16a6df21dca5fb6558400ca840000000000fdffffff022610250700000000225120def24e878a66b695c4d5b414b42b7ce94471dac985bb0afb0367e8bbb92c5a5250c30000000000002200209bd3269fda069b7ee0584622d458bb437635b3a179265dee3843ef18f42f35c601404a5e8638f6961d1c42609a5497346af9ba4cffb7f44cc8869c7e158627a8bb35884652fe1927d0b1917e9c22328339c33adedf93a7c86d90edba49eef4d949f301400373733215aeb64ca95e21b16be5772d3ad2ba7fa92faf842eeffab2c5741a66076cd1fb8af1c6c65456eeaf05f9ac80ce5502ae3ff88c40b632d8785bcd63799c000000",
            "txid": "313dc9366eeab30a094fb85297673187cfb93aec0ec8610215f75d129d7c06e9",
            "channel_ids": [
              {
                "id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                "channel_id": "09eb55872cd9039ecd08281af756e23b15aad4129fd6a9bcd71b472114ebf43a",
                "channel_type": {
                  "bits": [
                    12,
                    22
                  ],
                  "names": [
                    "static_remotekey/even",
                    "anchors/even"
                  ]
                },
                "outnum": 1
              }
            ],
            "failed": [
              {
                "id": "03a389b3a2f7aa6f9f4ccc19f2bd7a2eba83596699e86b715caaaa147fc37f3144",
                "method": "connect",
                "error": {
                  "code": 401,
                  "message": "All addresses failed: 127.0.0.1:34785: Cryptographic handshake: peer closed connection (wrong key?). "
                }
              },
              {
                "id": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                "method": "connect",
                "error": {
                  "code": 402,
                  "message": "disconnected during connection"
                }
              }
            ]
          }
        }
      ]
    },
    "lightning-multiwithdraw.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "multiwithdraw",
      "title": "Command for withdrawing to multiple addresses",
      "description": [
        "The **multiwithdraw** RPC command sends funds from Core Lightning's internal wallet to the addresses specified in *outputs*."
      ],
      "request": {
        "required": [
          "outputs"
        ],
        "properties": {
          "outputs": {
            "type": "array",
            "items": {
              "type": "outputdesc"
            },
            "description": [
              "An array containing objects of the form `{address: amount}`. The `amount` may be the string *all*, indicating that all onchain funds be sent to the specified address. Otherwise, it is in satoshi precision; it can be a whole number, a whole number ending in *sat*, a whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*."
            ]
          },
          "feerate": {
            "type": "feerate",
            "description": [
              "Feerate used for the withdrawals. See NOTES in lightning-feerates(7) for possible values."
            ],
            "default": "*normal*"
          },
          "minconf": {
            "type": "u32",
            "description": [
              "Minimum number of confirmations that used outputs should have."
            ],
            "default": 1
          },
          "utxos": {
            "type": "array",
            "items": {
              "type": "outpoint",
              "description": [
                "Utxos to be used to be withdrawn from, as an array of `txid:vout`. These must be drawn from the node's available UTXO set."
              ]
            }
          }
        }
      },
      "response": {
        "required": [
          "tx",
          "txid"
        ],
        "properties": {
          "tx": {
            "type": "hex",
            "description": [
              "The raw transaction which was sent."
            ]
          },
          "txid": {
            "type": "txid",
            "description": [
              "The txid of the **tx**."
            ]
          }
        }
      },
      "errors": [
        "On failure, an error is reported and the withdrawal transaction is not created.",
        "",
        "- -1: Catchall nonspecific error.",
        "- 301: There are not enough funds in the internal wallet (including fees) to create the transaction.",
        "- 302: The dust limit is not met."
      ],
      "author": [
        "ZmnSCPxj <<ZmnSCPxj@protonmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listfunds(7)",
        "lightning-fundchannel(7)",
        "lightning-newaddr(7)",
        "lightning-txprepare(7)",
        "lightning-withdraw(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:multiwithdraw#1",
            "method": "multiwithdraw",
            "params": {
              "outputs": [
                {
                  "bcrt1q84payf4ucfcpnt0994arm3f20tqmu29cna738w": "2222000msat"
                },
                {
                  "bcrt1q64wyjwvrmdj3uyz8w32mr4qgcv08a833zepjm3": "3333000msat"
                }
              ]
            }
          },
          "response": {
            "tx": "02000000000101057342aca7062873a4edd5a673980757885e5da8f68de3af254fe7c26d46e0700000000000fdffffff03df420700000000002251202b5dd0613b6e534f572dbcf4311b66e6cc8bb07e285928ddb6fa5791e4737874ae080000000000001600143d43d226bcc27019ade52d7a3dc52a7ac1be28b8050d000000000000160014d55c493983db651e10477455b1d408c31e7e9e310140beb27b31860b45464367b0f08334a0c90f3409ad176b9e21a35079495d6ce3dee0bbed786225ae56f59294466c9a14daf983375486dccaad7df3a7bc56b03faa87000000",
            "txid": "85065cf7d607936190df447cbff6963c8facf404c1f7f594307afe07fc56edfe"
          }
        },
        {
          "request": {
            "id": "example:multiwithdraw#2",
            "method": "multiwithdraw",
            "params": {
              "outputs": [
                {
                  "bcrt1p97zrhgxgm6wscsdx8gjafj4jyqetunat7fynrk4cyg2rz6lzrr9q6dlrp2": 1000
                },
                {
                  "bcrt1qm7k64cvd2ljw758ptwrrm8ny30u67ea3cfkxpn": 1000
                },
                {
                  "bcrt1qswadp7rqx7m0zx2tffhzmqfansdrpfesr2la7k": 1000
                },
                {
                  "bcrt1q68wfpfam8tu3a457jv7u8r64tdvqltgfs0kj84": 1000
                },
                {
                  "bcrt1qq7g9ccvfcxhg4lcj2e4s8u6l75tdzl5y7krmtl": 1000
                },
                {
                  "bcrt1pp9uw53lnrtt9v8vkemhpf6z3jfex2dkyu8je6z0jzlem2a3tqccqvseg2y": 1000
                },
                {
                  "bcrt1q5sacyx5hjrugpcgn5w2mw9aq7d2tnkwxmmjp06": 1000
                }
              ]
            }
          },
          "response": {
            "tx": "02000000000101b621d886a10f33d5ad58c163a35cddf03bd435e3ed100f14af3fcdac1a7dff510100000000fdffffff08e803000000000000160014dfadaae18d57e4ef50e15b863d9e648bf9af67b1e8030000000000002251200978ea47f31ad6561d96ceee14e85192726536c4e1e59d09f217f3b5762b0630b53e1e000000000022512000dea9b3b059044ed411fe24d7bff4d1b3bbdd09a16034a096a4b175f7f5ac0fe80300000000000016001407905c6189c1ae8aff12566b03f35ff516d17e84e803000000000000160014a43b821a9790f880e113a395b717a0f354b9d9c6e80300000000000016001483bad0f86037b6f1194b4a6e2d813d9c1a30a730e803000000000000160014d1dc90a7bb3af91ed69e933dc38f555b580fad09e8030000000000002251202f843ba0c8de9d0c41a63a25d4cab22032be4fabf24931dab82214316be218ca0247304402203c885a48d44614905673678d31e1c6a42af612ca6cd20d65a2e81670cd11bf8a0220738dc66ca4c1c1d466d6195ddaaf7b0c98a60769b782c282ad1f9db30bb9784201210330a75acaed258be6bc02da9fab058abbe0e770caceb7c6496eaaea7014c3d39b87000000",
            "txid": "80ecf60402207eca627f4af7df93841b7430c546e73ae2467ad592721b8d7f18"
          }
        }
      ]
    },
    "lightning-newaddr.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "newaddr",
      "title": "Command for generating a new address to be used by Core Lightning",
      "description": [
        "The **newaddr** RPC command generates a new address which can subsequently be used to fund channels managed by the Core Lightning node.",
        "",
        "The funding transaction needs to be confirmed before funds can be used.",
        "",
        "To send an on-chain payment from the Core Lightning node wallet, use `withdraw`."
      ],
      "request": {
        "required": [],
        "properties": {
          "addresstype": {
            "type": "string",
            "description": [
              "It specifies the type of address wanted; currently *bech32* (e.g. `tb1qu9j4lg5f9rgjyfhvfd905vw46eg39czmktxqgg` on bitcoin testnet or `bc1qwqdg6squsna38e46795at95yu9atm8azzmyvckulcc7kytlcckxswvvzej` on bitcoin mainnet), or *p2tr* taproot addresses. The special value *all* generates all known address types for the same underlying key."
            ],
            "default": "*bech32* address",
            "enum": [
              "bech32",
              "p2tr",
              "all"
            ]
          }
        }
      },
      "response": {
        "required": [],
        "properties": {
          "p2tr": {
            "added": "v23.08",
            "type": "string",
            "description": [
              "The taproot address."
            ]
          },
          "bech32": {
            "type": "string",
            "description": [
              "The bech32 (native segwit) address."
            ]
          }
        }
      },
      "errors": [
        "If an unrecognized address type is requested an error message will be returned."
      ],
      "author": [
        "Felix <<fixone@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listfunds(7)",
        "lightning-fundchannel(7)",
        "lightning-withdraw(7)",
        "lightning-listtransactions(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:newaddr#1",
            "method": "newaddr",
            "params": {}
          },
          "response": {
            "bech32": "bcrt1qcqqvkswps3e6ck3jmqf86f9tcaeke5z04d3tv4"
          }
        },
        {
          "request": {
            "id": "example:newaddr#2",
            "method": "newaddr",
            "params": {
              "addresstype": "p2tr"
            }
          },
          "response": {
            "p2tr": "bcrt1phtprcvhz842sxe8qw0yryvc0g6n6dw2puweklcpnfye273kjpfhs0d6d2e"
          }
        }
      ]
    },
    "lightning-notifications.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "notifications",
      "title": "Command to set up notifications.",
      "description": [
        "The **notifications** the RPC command enabled notifications for this JSON-RPC connection. By default (and for backwards-compatibility) notifications are disabled.",
        "",
        "Various commands, especially complex and slow ones, offer notifications which indicate their progress."
      ],
      "request": {
        "required": [
          "enable"
        ],
        "properties": {
          "enable": {
            "type": "boolean",
            "description": [
              "Whether to enable or disable notifications."
            ]
          }
        }
      },
      "response": {
        "properties": {},
        "post_return_value_notes": [
          "On success, if *enable* was *true*, notifications will be forwarded from then on."
        ]
      },
      "notifications": [
        "Notifications are JSON-RPC objects without an *id* field. *lightningd* sends notifications (once enabled with this *notifications* command) with a *params* *id* field indicating which command the notification refers to.",
        "",
        "Implementations should ignore notifications without an *id* parameter, or unknown *method*.",
        "",
        "Common *method*s include:",
        "  *message*: param *message*: a descriptional string indicating something which occurred relating to the command. Param *level* indicates the level, as per lightning-getlog(7): *info* and *debug* are typical.",
        "  *progress*: param *num* and *total*, where *num* starts at 0 and is always less than *total*. Optional param *stage* with fields *num* and *total*, indicating what stage we are progressing through."
      ],
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters."
      ],
      "author": [
        "Rusty Russell <<rusty@blockstream.com>> wrote the initial version of this man page."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "example_notifications": [
        {
          "method": "message",
          "params": {
            "id": 1,
            "message": "This is a test message",
            "level": "DEBUG"
          }
        },
        {
          "method": "progress",
          "params": {
            "id": 2,
            "num": 0,
            "total": 30,
            "stage": {
              "num": 0,
              "total": 2
            }
          }
        }
      ],
      "examples": [
        {
          "request": {
            "id": "example:notifications#1",
            "method": "notifications",
            "params": {
              "enable": true
            }
          },
          "response": {}
        },
        {
          "request": {
            "id": "example:notifications#2",
            "method": "notifications",
            "params": {
              "enable": false
            }
          },
          "response": {}
        }
      ]
    },
    "lightning-offer.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "offer",
      "title": "Command for accepting payments",
      "warning": "experimental-offers only",
      "description": [
        "The **offer** RPC command creates an offer (or returns an existing one), which is a precursor to creating one or more invoices. It automatically enables the processing of an incoming invoice_request, and issuing of invoices.",
        "",
        "Note that for making an offer to *pay* someone else, see lightning- invoicerequest(7)."
      ],
      "request": {
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "oneOf": [
              {
                "type": "msat_or_any"
              },
              {
                "type": "currency"
              }
            ],
            "description": [
              "Can be the string `any`, which creates an offer that can be paid with any amount (e.g. a donation). Otherwise it can be a positive value in millisatoshi precision; it can be a whole number, or a whole number ending in *msat* or *sat*, or a number with three decimal places ending in *sat*, or a number with 1 to 11 decimal places ending in *btc*. It can also have an ISO 4217 postfix (e.g. USD), in which case currency conversion will need to be done for the invoice itself. A plugin is needed which provides the `currencyconvert` API for this currency, otherwise the offer creation will fail."
            ]
          },
          "description": {
            "type": "string",
            "description": [
              "A short description of purpose of the offer, e.g. *coffee*. This value is encoded into the resulting offer and is viewable by anyone you expose this offer to. It must be UTF-8, and cannot use *\\u* JSON escape codes."
            ]
          },
          "issuer": {
            "type": "string",
            "description": [
              "Who is issuing this offer (i.e. you) if appropriate."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "An internal-use name for the offer, which can be any UTF-8 string. This is *NOT* encoded in the offer not sent to the issuer."
            ]
          },
          "quantity_max": {
            "type": "u64",
            "description": [
              "Invoice can specify more than one of the items up (and including) this maximum: 0 is a special value meaning `no maximuim`. The *amount* for the invoice will need to be multiplied accordingly. This is encoded in the offer."
            ]
          },
          "absolute_expiry": {
            "type": "u64",
            "description": [
              "Time the offer is valid until,in seconds since the first day of 1970 UTC. If not set, the offer remains valid (though it can be deactivated by the issuer of course). This is encoded in the offer."
            ]
          },
          "recurrence": {
            "type": "string",
            "description": [
              "An invoice is expected at regular intervals. The argument is a positive number followed by one of `seconds`, `minutes`, `hours`, `days`, `weeks`, `months` or `years` (variants without the trailing `s` are also permitted). This is encoded in the offer. The semantics of recurrence is fairly predictable, but fully documented in BOLT 12. e.g. `4weeks`."
            ]
          },
          "recurrence_base": {
            "type": "integer",
            "description": [
              "Time in seconds since the first day of 1970 UTC. This indicates when the first period begins; without this, the recurrence periods start from the first invoice."
            ]
          },
          "recurrence_paywindow": {
            "type": "string",
            "description": [
              "Argument of form `-time+time[%]`. The first time is the number of seconds before the start of a period in which an invoice and payment is valid, the second time is the number of seconds after the start of the period. For example *-604800+86400* means you can fetch an pay the invoice 4 weeks before the given period starts, and up to 1 day afterwards. The optional *%* indicates that the amount of the invoice will be scaled by the time remaining in the period. This is encoded in the offer."
            ],
            "default": "that payment is allowed during the current and previous periods"
          },
          "recurrence_limit": {
            "type": "u32",
            "description": [
              "To indicate the maximum period which exists. eg. `12` means there are 13 periods, from 0 to 12 inclusive. This is encoded in the offer."
            ]
          },
          "single_use": {
            "type": "boolean",
            "description": [
              "Indicates that the offer is only valid once; we may issue multiple invoices, but as soon as one is paid all other invoices will be expired (i.e. only one person can pay this offer)."
            ],
            "default": "False"
          },
          "recurrence_start_any_period": {
            "added": "v24.02",
            "type": "boolean",
            "description": [
              "This means that the invoice may start by paying during any period; otherwise it must start by paying at the first period.  Setting this to false only makes sense if *recurrence_base* was provided. This is encoded in the offer."
            ],
            "default": "True"
          }
        }
      },
      "response": {
        "required": [
          "offer_id",
          "active",
          "single_use",
          "bolt12",
          "used",
          "created"
        ],
        "properties": {
          "offer_id": {
            "type": "hash",
            "description": [
              "The id of this offer (merkle hash of non-signature fields)."
            ]
          },
          "active": {
            "type": "boolean",
            "enum": [
              true
            ],
            "description": [
              "Whether this can still be used."
            ]
          },
          "single_use": {
            "type": "boolean",
            "description": [
              "Whether this expires as soon as it's paid (reflects the *single_use* parameter)."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The bolt12 encoding of the offer."
            ]
          },
          "used": {
            "type": "boolean",
            "description": [
              "True if an associated invoice has been paid."
            ]
          },
          "created": {
            "type": "boolean",
            "description": [
              "False if the offer already existed."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "The (optional) user-specified label."
            ]
          }
        }
      },
      "errors": [
        "On failure, an error is returned and no offer is created. If the lightning process fails before responding, the caller should use lightning-listoffers(7) to query whether this offer was created or not.",
        "",
        "If the offer already existed, and is still active, that is returned; if it's not active then this call fails.",
        "",
        "- -1: Catchall nonspecific error.",
        "- 1000: Offer with this offer_id already exists (but is not active)."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listoffers(7)",
        "lightning-disableoffer(7)",
        "lightning-invoicerequest(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:offer#1",
            "method": "offer",
            "params": {
              "amount": "10000msat",
              "description": "Fish sale!"
            }
          },
          "response": {
            "offer_id": "dca9774ba2925b48c42eb12e599c09389d9d80d44445c4d0c944556c7228746e",
            "active": true,
            "single_use": false,
            "bolt12": "lno1qgsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzrcgqgn3qzs2ge5hx6pqwdskcefpzcssytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82e",
            "used": false,
            "created": true
          }
        },
        {
          "request": {
            "id": "example:offer#2",
            "method": "offer",
            "params": {
              "amount": "1000sat",
              "description": "Coffee",
              "quantity_max": 10
            }
          },
          "response": {
            "offer_id": "f901018768e13ea2da95f437749e24d22d47b2a6ea3030ef66ae0281df49d94b",
            "active": true,
            "single_use": false,
            "bolt12": "lno1qgsqvgnwgcg35z6ee2h3yczraddm72xrfua9uve2rlrm9deu7xyfzrcgqv85ysq2qepk7enxv4j3gqg2zcssytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82e",
            "used": false,
            "created": true
          }
        }
      ]
    },
    "lightning-openchannel_abort.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "openchannel_abort",
      "title": "Command to abort a channel to a peer",
      "description": [
        "`openchannel_init` is a low level RPC command which initiates a channel open with a specified peer. It uses the openchannel protocol which allows for interactive transaction construction."
      ],
      "request": {
        "required": [
          "channel_id"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "Channel id of the channel to be aborted."
            ]
          }
        }
      },
      "response": {
        "required": [
          "channel_id",
          "channel_canceled",
          "reason"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel id of the aborted channel."
            ]
          },
          "channel_canceled": {
            "type": "boolean",
            "description": [
              "Whether this is completely canceled (there may be remaining in-flight transactions)."
            ]
          },
          "reason": {
            "type": "string",
            "description": [
              "Usually \"Abort requested\", but if it happened to fail at the same time it could be different."
            ]
          }
        }
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- -1: Catchall nonspecific error.",
        "- 305: Peer is not connected.",
        "- 311: Unknown channel id.",
        "- 312: Channel in an invalid state"
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-openchannel_init(7)",
        "lightning-openchannel_update(7)",
        "lightning-openchannel_signed(7)",
        "lightning-openchannel_bump(7)",
        "lightning-fundchannel_start(7)",
        "lightning-fundchannel_complete(7)",
        "lightning-fundchannel(7)",
        "lightning-fundpsbt(7)",
        "lightning-utxopsbt(7)",
        "lightning-multifundchannel(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:openchannel_abort#1",
            "method": "openchannel_abort",
            "params": {
              "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5"
            }
          },
          "response": {
            "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
            "channel_canceled": false,
            "reason": "Abort requested"
          }
        }
      ]
    },
    "lightning-openchannel_bump.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "openchannel_bump",
      "title": "Command to initiate a channel RBF",
      "description": [
        "`openchannel_bump` is a RPC command which initiates a channel RBF (Replace-By-Fee) for the specified channel. It uses the openchannel protocol which allows for interactive transaction construction.",
        "",
        "Warning: bumping a leased channel will lose the lease."
      ],
      "request": {
        "required": [
          "channel_id",
          "amount",
          "initialpsbt"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "Id of the channel to RBF."
            ]
          },
          "amount": {
            "type": "sat",
            "description": [
              "Satoshi value that we will contribute to the channel. This value will be _added_ to the provided PSBT in the output which is encumbered by the 2-of-2 script for this channel."
            ]
          },
          "initialpsbt": {
            "type": "string",
            "description": [
              "The funded, incomplete PSBT that specifies the UTXOs and change output for our channel contribution. It can be updated, see `openchannel_update`; *initialpsbt* must have at least one input. Must have the Non-Witness UTXO (PSBT_IN_NON_WITNESS_UTXO) set for every input. An error (code 309) will be returned if this requirement is not met."
            ]
          },
          "funding_feerate": {
            "type": "feerate",
            "description": [
              "Feerate for the funding transaction."
            ],
            "default": "1/64th greater than the last feerate used for this channel"
          }
        }
      },
      "response": {
        "required": [
          "channel_id",
          "channel_type",
          "psbt",
          "commitments_secured",
          "funding_serial"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel id of the channel."
            ]
          },
          "channel_type": {
            "type": "object",
            "description": [
              "Channel_type as negotiated with peer."
            ],
            "added": "v24.02",
            "additionalProperties": false,
            "required": [
              "bits",
              "names"
            ],
            "properties": {
              "bits": {
                "type": "array",
                "description": [
                  "Each bit set in this channel_type."
                ],
                "added": "v24.02",
                "items": {
                  "type": "u32",
                  "description": [
                    "Bit number."
                  ]
                }
              },
              "names": {
                "type": "array",
                "description": [
                  "Feature name for each bit set in this channel_type. Note that *anchors_zero_fee_htlc_tx* is a deprecated synonym for *anchors*."
                ],
                "added": "v24.02",
                "items": {
                  "type": "string",
                  "enum": [
                    "static_remotekey/even",
                    "anchor_outputs/even",
                    "anchors_zero_fee_htlc_tx/even",
                    "anchors/even",
                    "scid_alias/even",
                    "zeroconf/even"
                  ],
                  "description": [
                    "Name of feature bit."
                  ]
                }
              }
            }
          },
          "psbt": {
            "type": "string",
            "description": [
              "The (incomplete) PSBT of the RBF transaction."
            ]
          },
          "commitments_secured": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": [
              "Whether the *psbt* is complete."
            ]
          },
          "funding_serial": {
            "type": "u64",
            "description": [
              "The serial_id of the funding output in the *psbt*."
            ]
          },
          "requires_confirmed_inputs": {
            "type": "boolean",
            "description": [
              "Does peer require confirmed inputs in psbt?"
            ]
          }
        },
        "post_return_value_notes": [
          "If the peer does not support `option_dual_fund`, this command will return an error.",
          "",
          "If the channel is not in a state that is eligible for RBF, this command will return an error."
        ]
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- -1: Catchall nonspecific error.",
        "- 300: The amount exceeded the maximum configured funding amount.",
        "- 301: The provided PSBT cannot afford the funding amount.",
        "- 305: Peer is not connected.",
        "- 309: PSBT missing required fields",
        "- 311: Unknown channel id.",
        "- 312: Channel in an invalid state"
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-openchannel_init(7)",
        "lightning-openchannel_update(7)",
        "lightning-openchannel_signed(7)",
        "lightning-openchannel_abort(7)",
        "lightning-fundchannel_start(7)",
        "lightning-fundchannel_complete(7)",
        "lightning-fundchannel(7)",
        "lightning-fundpsbt(7)",
        "lightning-utxopsbt(7)",
        "lightning-multifundchannel(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:openchannel_bump#1",
            "method": "openchannel_bump",
            "params": [
              "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
              1000000,
              "cHNidP8BAF4CAAAAAbMFPNMIQ2TqCB0v5X8scJh4eVEhwcG3I1h2iff11Pu/AQAAAAD9////AUFZ3AsAAAAAIlEgO+E35aPNS3YQRaiMByjTJDUYNvBO1Z39o3m42EZGUreYAAAAAAEAcQIAAAABl0vCMXO3vKmwYNrBKr0bsVjo7Wmj501PavWRmxX1dywAAAAAAP3///8Ceh/00gAAAAAWABSauB3UBW2CVXly9l1sU6aMmVAq+ADC6wsAAAAAFgAUA8/shxXh9ASjbsAR5COPhjKfkJyXAAAAAQEfAMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnAAA",
              "15000perkw"
            ]
          },
          "response": {
            "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
            "psbt": "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcAQ4gswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEITP+kZdFBsOIAAQMIQEIPAAAAAAABBCIAIMm8XAY8rvv3pseBRAe1YntPgai1bsvpMsaC+cusDRnfDPwJbGlnaHRuaW5nAQg8VGAuu93kPAABAwhBWdwLAAAAAAEEIlEgO+E35aPNS3YQRaiMByjTJDUYNvBO1Z39o3m42EZGUrcM/AlsaWdodG5pbmcBCJhXLSQQ2IEcAA==",
            "channel_type": {
              "bits": [
                12,
                22
              ],
              "names": [
                "static_remotekey/even",
                "anchors/even"
              ]
            },
            "commitments_secured": false,
            "funding_serial": 4347205294156014600,
            "requires_confirmed_inputs": false
          }
        },
        {
          "request": {
            "id": "example:openchannel_bump#2",
            "method": "openchannel_bump",
            "params": {
              "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
              "amount": 1000000,
              "initialpsbt": "cHNidP8BAF4CAAAAAbMFPNMIQ2TqCB0v5X8scJh4eVEhwcG3I1h2iff11Pu/AQAAAAD9////AUFZ3AsAAAAAIlEgO+E35aPNS3YQRaiMByjTJDUYNvBO1Z39o3m42EZGUreYAAAAAAEAcQIAAAABl0vCMXO3vKmwYNrBKr0bsVjo7Wmj501PavWRmxX1dywAAAAAAP3///8Ceh/00gAAAAAWABSauB3UBW2CVXly9l1sU6aMmVAq+ADC6wsAAAAAFgAUA8/shxXh9ASjbsAR5COPhjKfkJyXAAAAAQEfAMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnAAA",
              "funding_feerate": "15000perkw"
            }
          },
          "response": {
            "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
            "psbt": "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcAQ4gswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEIQCsNB0i02NIAAQMIQVncCwAAAAABBCJRIDvhN+WjzUt2EEWojAco0yQ1GDbwTtWd/aN5uNhGRlK3DPwJbGlnaHRuaW5nAQgwkgFDAVpmeAABAwhAQg8AAAAAAAEEIgAgybxcBjyu+/emx4FEB7Vie0+BqLVuy+kyxoL5y6wNGd8M/AlsaWdodG5pbmcBCI9GsPn+O/M0AA==",
            "channel_type": {
              "bits": [
                12,
                22
              ],
              "names": [
                "static_remotekey/even",
                "anchors/even"
              ]
            },
            "commitments_secured": false,
            "funding_serial": 10324133783552127000,
            "requires_confirmed_inputs": false
          }
        },
        {
          "request": {
            "id": "example:openchannel_bump#3",
            "method": "openchannel_bump",
            "params": [
              "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
              2000000,
              "cHNidP8BAF4CAAAAAbMFPNMIQ2TqCB0v5X8scJh4eVEhwcG3I1h2iff11Pu/AQAAAAD9////AWINzQsAAAAAIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2iYAAAAAAEAcQIAAAABl0vCMXO3vKmwYNrBKr0bsVjo7Wmj501PavWRmxX1dywAAAAAAP3///8Ceh/00gAAAAAWABSauB3UBW2CVXly9l1sU6aMmVAq+ADC6wsAAAAAFgAUA8/shxXh9ASjbsAR5COPhjKfkJyXAAAAAQEfAMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnAAA",
              "18750perkw"
            ]
          },
          "response": {
            "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
            "psbt": "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcAQ4gswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEIwRR1uu1r8GoAAQMIgIQeAAAAAAABBCIAIMm8XAY8rvv3pseBRAe1YntPgai1bsvpMsaC+cusDRnfDPwJbGlnaHRuaW5nAQjdRD+FoUsRIAABAwhiDc0LAAAAAAEEIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2gM/AlsaWdodG5pbmcBCPN/JmOnjFW4AA==",
            "channel_type": {
              "bits": [
                12,
                22
              ],
              "names": [
                "static_remotekey/even",
                "anchors/even"
              ]
            },
            "commitments_secured": false,
            "funding_serial": 15943938423967650000,
            "requires_confirmed_inputs": false
          }
        }
      ]
    },
    "lightning-openchannel_init.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "openchannel_init",
      "title": "Command to initiate a channel to a peer",
      "description": [
        "`openchannel_init` is a low level RPC command which initiates a channel open with a specified peer. It uses the openchannel protocol which allows for interactive transaction construction."
      ],
      "request": {
        "required": [
          "id",
          "amount",
          "initialpsbt"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "Node id of the remote peer."
            ]
          },
          "amount": {
            "type": "sat",
            "description": [
              "Satoshi value that we will contribute to the channel. This value will be _added_ to the provided PSBT in the output which is encumbered by the 2-of-2 script for this channel."
            ]
          },
          "initialpsbt": {
            "type": "string",
            "description": [
              "Funded, incomplete PSBT that specifies the UTXOs and change output for our channel contribution. It can be updated, see `openchannel_update`; *initialpsbt* must have at least one input. Must have the Non-Witness UTXO (PSBT_IN_NON_WITNESS_UTXO) set for every input. An error (code 309) will be returned if this requirement is not met."
            ]
          },
          "commitment_feerate": {
            "type": "feerate",
            "description": [
              "Feerate for commitment transactions for non-anchor channels: see **fundchannel**. For anchor channels, it is ignored."
            ]
          },
          "funding_feerate": {
            "type": "feerate",
            "description": [
              "Feerate for the funding transaction."
            ],
            "default": "'opening' feerate"
          },
          "announce": {
            "type": "boolean",
            "description": [
              "Whether or not to announce this channel."
            ]
          },
          "close_to": {
            "type": "string",
            "description": [
              "Bitcoin address to which the channel funds should be sent on close. Only valid if both peers have negotiated `option_upfront_shutdown_script`."
            ]
          },
          "request_amt": {
            "type": "sat",
            "description": [
              "An amount of liquidity you'd like to lease from the peer. If peer supports `option_will_fund`, indicates to them to include this much liquidity into the channel. Must also pass in *compact_lease*."
            ]
          },
          "compact_lease": {
            "type": "hex",
            "description": [
              "A compact representation of the peer's expected channel lease terms. If the peer's terms don't match this set, we will fail to open the channel."
            ]
          },
          "channel_type": {
            "type": "array",
            "description": [
              "Each bit set in this channel_type."
            ],
            "items": {
              "type": "u32",
              "description": [
                "Bit number."
              ]
            }
          }
        }
      },
      "response": {
        "required": [
          "channel_id",
          "psbt",
          "channel_type",
          "commitments_secured",
          "funding_serial"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel id of the channel."
            ]
          },
          "psbt": {
            "type": "string",
            "description": [
              "The (incomplete) PSBT of the funding transaction."
            ]
          },
          "channel_type": {
            "type": "object",
            "description": [
              "Channel_type as negotiated with peer."
            ],
            "added": "v24.02",
            "additionalProperties": false,
            "required": [
              "bits",
              "names"
            ],
            "properties": {
              "bits": {
                "type": "array",
                "description": [
                  "Each bit set in this channel_type."
                ],
                "added": "v24.02",
                "items": {
                  "type": "u32",
                  "description": [
                    "Bit number."
                  ]
                }
              },
              "names": {
                "type": "array",
                "description": [
                  "Feature name for each bit set in this channel_type. Note that *anchors_zero_fee_htlc_tx* is a deprecated synonym for *anchors*."
                ],
                "added": "v24.02",
                "items": {
                  "type": "string",
                  "enum": [
                    "static_remotekey/even",
                    "anchor_outputs/even",
                    "anchors_zero_fee_htlc_tx/even",
                    "anchors/even",
                    "scid_alias/even",
                    "zeroconf/even"
                  ],
                  "description": [
                    "Name of feature bit."
                  ]
                }
              }
            }
          },
          "commitments_secured": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": [
              "Whether the *psbt* is complete."
            ]
          },
          "funding_serial": {
            "type": "u64",
            "description": [
              "The serial_id of the funding output in the *psbt*."
            ]
          },
          "requires_confirmed_inputs": {
            "type": "boolean",
            "description": [
              "Does peer require confirmed inputs in psbt?"
            ]
          }
        },
        "post_return_value_notes": [
          "If the peer does not support `option_dual_fund`, this command will return an error.",
          "",
          "If you sent a *request_amt* and the peer supports `option_will_fund` and is interested in leasing you liquidity in this channel, returns their updated channel fee max (*channel_fee_proportional_basis*, *channel_fee_base_msat*), updated rate card for the lease fee (*lease_fee_proportional_basis*, *lease_fee_base_sat*) and their on-chain weight *weight_charge*, which will be added to the lease fee at a rate of *funding_feerate* * *weight_charge* / 1000."
        ]
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- -1: Catchall nonspecific error.",
        "- 300: The amount exceeded the maximum configured funding amount.",
        "- 301: The provided PSBT cannot afford the funding amount.",
        "- 304: Still syncing with bitcoin network",
        "- 305: Peer is not connected.",
        "- 306: Unknown peer id.",
        "- 309: PSBT missing required fields",
        "- 310: v2 channel open protocol not supported by peer",
        "- 312: Channel in an invalid state"
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-openchannel_update(7)",
        "lightning-openchannel_signed(7)",
        "lightning-openchannel_abort(7)",
        "lightning-openchannel_bump(7)",
        "lightning-fundchannel_start(7)",
        "lightning-fundchannel_complete(7)",
        "lightning-fundchannel(7)",
        "lightning-fundpsbt(7)",
        "lightning-utxopsbt(7)",
        "lightning-multifundchannel(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:openchannel_init#1",
            "method": "openchannel_init",
            "params": {
              "id": "03a00f49374e4bb876e766e9305e5fefa86e53dbc89a4f27d794b02f59ca316426",
              "amount": 1000000,
              "initialpsbt": "cHNidP8BAF4CAAAAAZiQf/mEs4NcFFfD4K8xauOgSpbz/xeetoXVWAPCI0h6AQAAAAD9////AahhAAAAAAAAIlEg+3d9jpNmK0getyg5W+Mp31CPIRDKcJg/mZs/uaVrQ+GZAAAAAAEAiQIAAAABswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BAAAAAP3///8CgIQeAAAAAAAiACDJvFwGPK7796bHgUQHtWJ7T4GotW7L6TLGgvnLrA0Z32INzQsAAAAAIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2iYAAAAAQErYg3NCwAAAAAiUSDJGD7ekSHzxv0UmIIsR6dgJzInZpyQlQiEO6xbvYE/aAAA"
            }
          },
          "response": {
            "channel_id": "a5be438539f73c018a98a4b9dd557d62430881c56552025b5579d180cc3887ed",
            "psbt": "cHNidP8BAgQCAAAAAQMEmQAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCJAgAAAAGzBTzTCENk6ggdL+V/LHCYeHlRIcHBtyNYdon39dT7vwEAAAAA/f///wKAhB4AAAAAACIAIMm8XAY8rvv3pseBRAe1YntPgai1bsvpMsaC+cusDRnfYg3NCwAAAAAiUSDJGD7ekSHzxv0UmIIsR6dgJzInZpyQlQiEO6xbvYE/aJgAAAABAStiDc0LAAAAACJRIMkYPt6RIfPG/RSYgixHp2AnMidmnJCVCIQ7rFu9gT9oAQ4gmJB/+YSzg1wUV8PgrzFq46BKlvP/F562hdVYA8IjSHoBDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEI/+im2BTLcnwAAQMIqGEAAAAAAAABBCJRIPt3fY6TZitIHrcoOVvjKd9QjyEQynCYP5mbP7mla0PhDPwJbGlnaHRuaW5nAQhfx1o3nKFaVgABAwhAQg8AAAAAAAEEIgAgBkixRgS2irzkjzD4bs/Wm7V/PQFNNgUvPR5aBVpSJHoM/AlsaWdodG5pbmcBCHHI3g73GwAQAA==",
            "channel_type": {
              "bits": [
                12,
                22
              ],
              "names": [
                "static_remotekey/even",
                "anchors/even"
              ]
            },
            "commitments_secured": false,
            "funding_serial": 8199047277484638000,
            "requires_confirmed_inputs": false
          }
        },
        {
          "request": {
            "id": "example:openchannel_init#2",
            "method": "openchannel_init",
            "params": [
              "03a00f49374e4bb876e766e9305e5fefa86e53dbc89a4f27d794b02f59ca316426",
              500000,
              "cHNidP8BAF4CAAAAAZiQf/mEs4NcFFfD4K8xauOgSpbz/xeetoXVWAPCI0h6AQAAAAD9////AfZRxQsAAAAAIlEg21kTTo7K2doCG6F2JqgaDjc1kRCrH7AL08oPVVJhuE+ZAAAAAAEAiQIAAAABswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BAAAAAP3///8CgIQeAAAAAAAiACDJvFwGPK7796bHgUQHtWJ7T4GotW7L6TLGgvnLrA0Z32INzQsAAAAAIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2iYAAAAAQErYg3NCwAAAAAiUSDJGD7ekSHzxv0UmIIsR6dgJzInZpyQlQiEO6xbvYE/aAAA"
            ]
          },
          "response": {
            "channel_id": "b3b2e46371876858784cd1b87ecf406e32d8f98b7a44b7f436d1dca317ce0f1b",
            "psbt": "cHNidP8BAgQCAAAAAQMEmQAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCJAgAAAAGzBTzTCENk6ggdL+V/LHCYeHlRIcHBtyNYdon39dT7vwEAAAAA/f///wKAhB4AAAAAACIAIMm8XAY8rvv3pseBRAe1YntPgai1bsvpMsaC+cusDRnfYg3NCwAAAAAiUSDJGD7ekSHzxv0UmIIsR6dgJzInZpyQlQiEO6xbvYE/aJgAAAABAStiDc0LAAAAACJRIMkYPt6RIfPG/RSYgixHp2AnMidmnJCVCIQ7rFu9gT9oAQ4gmJB/+YSzg1wUV8PgrzFq46BKlvP/F562hdVYA8IjSHoBDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEILfzCFE4M1pQAAQMIIKEHAAAAAAABBCIAIMG0H4vceOuMkzqvG9svQmglTygLSd9kn0qrQFRmpEvIDPwJbGlnaHRuaW5nAQhU+Hu3eGH5tgABAwj2UcULAAAAAAEEIlEg21kTTo7K2doCG6F2JqgaDjc1kRCrH7AL08oPVVJhuE8M/AlsaWdodG5pbmcBCG0sGEoFgVYuAA==",
            "channel_type": {
              "bits": [
                12,
                22
              ],
              "names": [
                "static_remotekey/even",
                "anchors/even"
              ]
            },
            "commitments_secured": false,
            "funding_serial": 6122779721339107000,
            "requires_confirmed_inputs": false
          }
        }
      ]
    },
    "lightning-openchannel_signed.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "openchannel_signed",
      "title": "Command to conclude a channel open",
      "description": [
        "`openchannel_signed` is a low level RPC command which concludes a channel open with the specified peer. It uses the v2 openchannel protocol, which allows for interactive transaction construction.",
        "",
        "This command should be called after `openchannel_update` returns *commitments_secured* `true`.",
        "",
        "This command will broadcast the finalized funding transaction, if we receive valid signatures from the peer."
      ],
      "request": {
        "required": [
          "channel_id",
          "signed_psbt"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "Id of the channel."
            ]
          },
          "signed_psbt": {
            "type": "string",
            "description": [
              "The PSBT returned from `openchannel_update` (where *commitments_secured* was true) with partial signatures or finalized witness stacks included for every input that we contributed to the PSBT."
            ]
          }
        }
      },
      "response": {
        "required": [
          "channel_id",
          "tx",
          "txid"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel id of the channel."
            ]
          },
          "tx": {
            "type": "hex",
            "description": [
              "The funding transaction."
            ]
          },
          "txid": {
            "type": "txid",
            "description": [
              "The txid of the **tx**."
            ]
          }
        }
      },
      "errors": [
        "On error, the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- -1: Catchall nonspecific error.",
        "- 303: Funding transaction broadcast failed.",
        "- 305: Peer is not connected.",
        "- 309: PSBT missing required fields.",
        "- 311: Unknown channel id.",
        "- 312: Channel in an invalid state"
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-openchannel_init(7)",
        "lightning-openchannel_update(7)",
        "lightning-openchannel_abort(7)",
        "lightning-openchannel_bump(7)",
        "lightning-fundchannel_start(7)",
        "lightning-fundchannel_complete(7)",
        "lightning-fundchannel(7)",
        "lightning-fundpsbt(7)",
        "lightning-utxopsbt(7)",
        "lightning-multifundchannel(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:openchannel_signed#1",
            "method": "openchannel_signed",
            "params": {
              "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
              "signed_psbt": "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcIgICRz15z0oQ57qDTAJqrEPqGLCn+3Xs2lGEv6+oxGYV9rdHMEQCIHlCL2oKhnYn6hhaUG8+V+8D6GHFlI61OM507VB6aBwoAiACA2d5TnCdlJ1j2rF/EIHkxl3W0hBp3QqweO7hEul9aQEiBgJHPXnPShDnuoNMAmqsQ+oYsKf7dezaUYS/r6jEZhX2twgDz+yHAAAAAAEOILMFPNMIQ2TqCB0v5X8scJh4eVEhwcG3I1h2iff11Pu/AQ8EAQAAAAEQBP3///8M/AlsaWdodG5pbmcBCEArDQdItNjSAAEDCEFZ3AsAAAAAAQQiUSA74Tflo81LdhBFqIwHKNMkNRg28E7Vnf2jebjYRkZStyEHE0cioCqqq2UZ2npxQi9Q6DXNZheODM6F4GjHHS3XScEJAG/ctUwEAAAADPwJbGlnaHRuaW5nAQgwkgFDAVpmeAABAwhAQg8AAAAAAAEEIgAgybxcBjyu+/emx4FEB7Vie0+BqLVuy+kyxoL5y6wNGd8M/AlsaWdodG5pbmcBCI9GsPn+O/M0AA=="
            }
          },
          "response": {
            "tx": "02000000000101b3053cd3084364ea081d2fe57f2c709878795121c1c1b723587689f7f5d4fbbf0100000000fdffffff024159dc0b000000002251203be137e5a3cd4b761045a88c0728d324351836f04ed59dfda379b8d8464652b740420f0000000000220020c9bc5c063caefbf7a6c7814407b5627b4f81a8b56ecbe932c682f9cbac0d19df02473044022079422f6a0a867627ea185a506f3e57ef03e861c5948eb538ce74ed507a681c280220020367794e709d949d63dab17f1081e4c65dd6d21069dd0ab078eee112e97d69012102473d79cf4a10e7ba834c026aac43ea18b0a7fb75ecda5184bfafa8c46615f6b798000000",
            "txid": "ed994900569f2fddca6d86675f2e2247000197ee69aa53348e63e16fbaf39409",
            "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5"
          }
        },
        {
          "request": {
            "id": "example:openchannel_signed#2",
            "method": "openchannel_signed",
            "params": [
              "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
              "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcIgICRz15z0oQ57qDTAJqrEPqGLCn+3Xs2lGEv6+oxGYV9rdHMEQCIA8+zCzZ59t2OEFHWefZeTypY89RRQ8dMQCjtGWw6gskAiArELH1MvjW6j1G1CKnLZdV+/oabLDU48ingGSPFDOYxwEiBgJHPXnPShDnuoNMAmqsQ+oYsKf7dezaUYS/r6jEZhX2twgDz+yHAAAAAAEOILMFPNMIQ2TqCB0v5X8scJh4eVEhwcG3I1h2iff11Pu/AQ8EAQAAAAEQBP3///8M/AlsaWdodG5pbmcBCMEUdbrta/BqAAEDCICEHgAAAAAAAQQiACDJvFwGPK7796bHgUQHtWJ7T4GotW7L6TLGgvnLrA0Z3wz8CWxpZ2h0bmluZwEI3UQ/haFLESAAAQMIYg3NCwAAAAABBCJRIMkYPt6RIfPG/RSYgixHp2AnMidmnJCVCIQ7rFu9gT9oIQeffk+gJsmVIxDZ8UKPKgJB9CLvaUr9xqOEogpzJx1hbAkAEioNzwUAAAAM/AlsaWdodG5pbmcBCPN/JmOnjFW4AA=="
            ]
          },
          "response": {
            "tx": "02000000000101b3053cd3084364ea081d2fe57f2c709878795121c1c1b723587689f7f5d4fbbf0100000000fdffffff0280841e0000000000220020c9bc5c063caefbf7a6c7814407b5627b4f81a8b56ecbe932c682f9cbac0d19df620dcd0b00000000225120c9183ede9121f3c6fd1498822c47a760273227669c909508843bac5bbd813f680247304402200f3ecc2cd9e7db7638414759e7d9793ca963cf51450f1d3100a3b465b0ea0b2402202b10b1f532f8d6ea3d46d422a72d9755fbfa1a6cb0d4e3c8a780648f143398c7012102473d79cf4a10e7ba834c026aac43ea18b0a7fb75ecda5184bfafa8c46615f6b798000000",
            "txid": "7a4823c20358d585b69e17fff3964aa0e36a31afe0c357145c83b384f97f9098",
            "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5"
          }
        }
      ]
    },
    "lightning-openchannel_update.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "openchannel_update",
      "title": "Command to update a collab channel open",
      "description": [
        "`openchannel_update` is a low level RPC command which continues an open channel, as specified by *channel_id*. An updated *psbt* is passed in; any changes from the PSBT last returned (either from `openchannel_init` or a previous call to `openchannel_update`) will be communicated to the peer.",
        "",
        "Must be called after `openchannel_init` and before `openchannel_signed`.",
        "",
        "Must be called until *commitments_secured* is returned as true, at which point `openchannel_signed` should be called with a signed version of the PSBT returned by the last call to `openchannel_update`."
      ],
      "request": {
        "required": [
          "channel_id",
          "psbt"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "Id of the channel."
            ]
          },
          "psbt": {
            "type": "string",
            "description": [
              "Updated PSBT to be sent to the peer. May be identical to the PSBT last returned by either `openchannel_init` or `openchannel_update`."
            ]
          }
        }
      },
      "response": {
        "required": [
          "channel_id",
          "psbt",
          "commitments_secured",
          "channel_type",
          "funding_outnum"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel id of the channel."
            ]
          },
          "channel_type": {
            "type": "object",
            "description": [
              "Channel_type as negotiated with peer."
            ],
            "added": "v24.02",
            "additionalProperties": false,
            "required": [
              "bits",
              "names"
            ],
            "properties": {
              "bits": {
                "type": "array",
                "description": [
                  "Each bit set in this channel_type."
                ],
                "added": "v24.02",
                "items": {
                  "type": "u32",
                  "description": [
                    "Bit number."
                  ]
                }
              },
              "names": {
                "type": "array",
                "description": [
                  "Feature name for each bit set in this channel_type. Note that *anchors_zero_fee_htlc_tx* is a deprecated synonym for *anchors*."
                ],
                "added": "v24.02",
                "items": {
                  "type": "string",
                  "enum": [
                    "static_remotekey/even",
                    "anchor_outputs/even",
                    "anchors_zero_fee_htlc_tx/even",
                    "anchors/even",
                    "scid_alias/even",
                    "zeroconf/even"
                  ],
                  "description": [
                    "Name of feature bit."
                  ]
                }
              }
            }
          },
          "psbt": {
            "type": "string",
            "description": [
              "The PSBT of the funding transaction."
            ]
          },
          "commitments_secured": {
            "type": "boolean",
            "description": [
              "Whether the *psbt* is complete (if true, sign *psbt* and call `openchannel_signed` to complete the channel open)."
            ]
          },
          "funding_outnum": {
            "type": "u32",
            "description": [
              "The index of the funding output in the psbt."
            ]
          },
          "close_to": {
            "type": "hex",
            "description": [
              "Scriptpubkey which we have to close to if we mutual close."
            ]
          },
          "requires_confirmed_inputs": {
            "type": "boolean",
            "description": [
              "Does peer require confirmed inputs in psbt?"
            ]
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "commitments_secured": {
                  "type": "boolean",
                  "enum": [
                    true
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": true,
              "required": [
                "channel_id",
                "funding_outnum"
              ],
              "properties": {
                "commitments_secured": {},
                "channel_id": {
                  "type": "hash",
                  "description": [
                    "The derived channel id."
                  ]
                },
                "close_to": {
                  "type": "hex",
                  "description": [
                    "If a `close_to` address was provided to `openchannel_init` and the peer supports `option_upfront_shutdownscript`."
                  ]
                },
                "funding_outnum": {
                  "type": "u32",
                  "description": [
                    "The index of the funding output for this channel in the funding transaction."
                  ]
                }
              }
            },
            "else": {
              "additionalProperties": false,
              "properties": {
                "commitments_secured": {}
              }
            }
          }
        ]
      },
      "errors": [
        "On error, the returned object will contain `code` and `message` properties,",
        "with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- -1: Catchall nonspecific error.",
        "- 305: Peer is not connected.",
        "- 309: PSBT missing required fields",
        "- 311: Unknown channel id.",
        "- 312: Channel in an invalid state"
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-openchannel_init(7)",
        "lightning-openchannel_signed(7)",
        "lightning-openchannel_bump(7)",
        "lightning-openchannel_abort(7)",
        "lightning-fundchannel_start(7)",
        "lightning-fundchannel_complete(7)",
        "lightning-fundchannel(7)",
        "lightning-fundpsbt(7)",
        "lightning-utxopsbt(7)",
        "lightning-multifundchannel(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:openchannel_update#1",
            "method": "openchannel_update",
            "params": {
              "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
              "psbt": "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcAQ4gswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEIQCsNB0i02NIAAQMIQVncCwAAAAABBCJRIDvhN+WjzUt2EEWojAco0yQ1GDbwTtWd/aN5uNhGRlK3DPwJbGlnaHRuaW5nAQgwkgFDAVpmeAABAwhAQg8AAAAAAAEEIgAgybxcBjyu+/emx4FEB7Vie0+BqLVuy+kyxoL5y6wNGd8M/AlsaWdodG5pbmcBCI9GsPn+O/M0AA=="
            }
          },
          "response": {
            "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
            "psbt": "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcAQ4gswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEIQCsNB0i02NIAAQMIQVncCwAAAAABBCJRIDvhN+WjzUt2EEWojAco0yQ1GDbwTtWd/aN5uNhGRlK3DPwJbGlnaHRuaW5nAQgwkgFDAVpmeAABAwhAQg8AAAAAAAEEIgAgybxcBjyu+/emx4FEB7Vie0+BqLVuy+kyxoL5y6wNGd8M/AlsaWdodG5pbmcBCI9GsPn+O/M0AA==",
            "channel_type": {
              "bits": [
                12,
                22
              ],
              "names": [
                "static_remotekey/even",
                "anchors/even"
              ]
            },
            "commitments_secured": true,
            "funding_outnum": 1,
            "close_to": "51202321a432c9022a560c7dae78bdb72c605c373961edd29c42aa98c183782d052a"
          }
        },
        {
          "request": {
            "id": "example:openchannel_update#2",
            "method": "openchannel_update",
            "params": [
              "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
              "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcAQ4gswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEIwRR1uu1r8GoAAQMIgIQeAAAAAAABBCIAIMm8XAY8rvv3pseBRAe1YntPgai1bsvpMsaC+cusDRnfDPwJbGlnaHRuaW5nAQjdRD+FoUsRIAABAwhiDc0LAAAAAAEEIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2gM/AlsaWdodG5pbmcBCPN/JmOnjFW4AA=="
            ]
          },
          "response": {
            "channel_id": "b020c1c6818daf024954c9ee578caad058cbcae7dd75b2c4d38b8f6f81901ff5",
            "psbt": "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcAQ4gswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEIwRR1uu1r8GoAAQMIgIQeAAAAAAABBCIAIMm8XAY8rvv3pseBRAe1YntPgai1bsvpMsaC+cusDRnfDPwJbGlnaHRuaW5nAQjdRD+FoUsRIAABAwhiDc0LAAAAAAEEIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2gM/AlsaWdodG5pbmcBCPN/JmOnjFW4AA==",
            "channel_type": {
              "bits": [
                12,
                22
              ],
              "names": [
                "static_remotekey/even",
                "anchors/even"
              ]
            },
            "commitments_secured": true,
            "funding_outnum": 0,
            "close_to": "51202321a432c9022a560c7dae78bdb72c605c373961edd29c42aa98c183782d052a"
          }
        }
      ]
    },
    "lightning-parsefeerate.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "parsefeerate",
      "title": "Command for parsing a feerate string to a feerate",
      "description": [
        "The **parsefeerate** command returns the current feerate for any valid *feerate_str*. This is useful for finding the current feerate that a **fundpsbt** or **utxopsbt** command might use."
      ],
      "request": {
        "required": [
          "feerate_str"
        ],
        "properties": {
          "feerate_str": {
            "type": "string",
            "description": [
              "The feerate string to parse."
            ]
          }
        }
      },
      "response": {
        "required": [],
        "properties": {
          "perkw": {
            "type": "u32",
            "description": [
              "Value of *feerate_str* in kilosipa."
            ],
            "additionalProperties": false
          }
        }
      },
      "errors": [
        "The **parsefeerate** command will error if the *feerate_str* format is not recognized.",
        "",
        "- -32602: If the given parameters are wrong."
      ],
      "trivia": [
        "In CLN we like to call the weight unit \"sipa\" in honor of Pieter Wuille, who uses the name \"sipa\" on IRC and elsewhere. Internally we call the *perkw* style as \"feerate per kilosipa\"."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:parsefeerate#1",
            "method": "parsefeerate",
            "params": [
              "unilateral_close"
            ]
          },
          "response": {
            "perkw": 11000
          }
        },
        {
          "request": {
            "id": "example:parsefeerate#2",
            "method": "parsefeerate",
            "params": [
              "9999perkw"
            ]
          },
          "response": {
            "perkw": 9999
          }
        },
        {
          "request": {
            "id": "example:parsefeerate#3",
            "method": "parsefeerate",
            "params": [
              10000
            ]
          },
          "response": {
            "perkw": 2500
          }
        },
        {
          "request": {
            "id": "example:parsefeerate#4",
            "method": "parsefeerate",
            "params": [
              "urgent"
            ]
          },
          "response": {
            "perkw": 11000
          }
        }
      ]
    },
    "lightning-pay.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "pay",
      "title": "Command for sending a payment to a BOLT11 invoice",
      "description": [
        "The **pay** RPC command attempts to find a route to the given destination, and send the funds it asks for. .",
        "",
        "The response will occur when the payment fails or succeeds. Once a payment has succeeded, calls to **pay** with the same *bolt11* will succeed immediately.",
        "",
        "When using *lightning-cli*, you may skip optional parameters by using *null*. Alternatively, use **-k** option to provide parameters by name."
      ],
      "request": {
        "required": [
          "bolt11"
        ],
        "properties": {
          "bolt11": {
            "type": "string",
            "description": [
              "Bolt11 invoice, if **experimental-offers** is enabled, it can actually be a bolt12 invoice, such as one received from lightningd-fetchinvoice(7). If it does not contain an amount, *amount_msat* is required, otherwise if it is specified it must be *null*."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "*amount_msat* is in millisatoshi precision; it can be a whole number, or a whole number with suffix *msat* or *sat*, or a three decimal point number with suffix *sat*, or an 1 to 11 decimal point number suffixed by *btc*."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "It is used to attach a label to payments, and is returned in lightning- listpays(7) and lightning-listsendpays(7)."
            ]
          },
          "riskfactor": {
            "type": "number",
            "description": [
              "The *riskfactor* is described in detail in lightning-getroute(7)."
            ],
            "default": "10"
          },
          "maxfeepercent": {
            "type": "number",
            "description": [
              "Percentage of the amount that is to be paid."
            ],
            "default": "0.5"
          },
          "retry_for": {
            "type": "u16",
            "description": [
              "Until *retry_for* seconds passes, the command will keep finding routes and retrying the payment."
            ],
            "default": "60 seconds"
          },
          "maxdelay": {
            "type": "u16",
            "description": [
              "A payment may be delayed for up to `maxdelay` blocks by another node; clients should be prepared for this worst case."
            ]
          },
          "exemptfee": {
            "type": "msat",
            "description": [
              "This option can be used for tiny payments which would be dominated by the fee leveraged by forwarding nodes. Setting `exemptfee` allows the  `maxfeepercent` check to be skipped on fees that are smaller than `exemptfee`."
            ],
            "default": "5000 millisatoshi"
          },
          "localinvreqid": {
            "type": "hex",
            "description": [
              "`localinvreqid` is used by offers to link a payment attempt to a local `invoice_request` offer created by lightningd-invoicerequest(7). This  ensures that we only make a single payment for an offer, and that the offer is marked `used` once paid."
            ]
          },
          "exclude": {
            "type": "array",
            "description": [
              "*exclude* is a JSON array of short-channel-id/direction (e.g. [ '564334x877x1/0', '564195x1292x0/1' ]) or pubkey which should be excluded from consideration for routing."
            ],
            "default": "not to exclude any channels or nodes",
            "items": {
              "oneOf": [
                {
                  "type": "short_channel_id_dir"
                },
                {
                  "type": "pubkey"
                }
              ]
            }
          },
          "maxfee": {
            "type": "msat",
            "description": [
              "*maxfee* overrides both *maxfeepercent* and *exemptfee* defaults (and if you specify *maxfee* you cannot specify either of those), and creates an absolute limit on what fee we will pay. This allows you to implement your own heuristics rather than the primitive ones used here."
            ]
          },
          "description": {
            "type": "string",
            "description": [
              "It is only required for bolt11 invoices which do not contain a description themselves, but contain a description hash: in this case *description* is required. *description* is then checked against the hash inside the invoice before it will be paid."
            ]
          },
          "partial_msat": {
            "type": "msat",
            "added": "v23.05",
            "description": [
              "Explicitly state that you are only paying some part of the invoice.  Presumably someone else is paying the rest (otherwise the payment will time out at the recipient).  Note that this is currently not supported for self-payment (please file an issue if you need this)"
            ]
          }
        }
      },
      "response": {
        "required": [
          "payment_preimage",
          "payment_hash",
          "created_at",
          "parts",
          "amount_msat",
          "amount_sent_msat",
          "status"
        ],
        "properties": {
          "payment_preimage": {
            "type": "secret",
            "description": [
              "The proof of payment: SHA256 of this **payment_hash**."
            ]
          },
          "destination": {
            "type": "pubkey",
            "description": [
              "The final destination of the payment."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "created_at": {
            "type": "number",
            "description": [
              "The UNIX timestamp showing when this payment was initiated."
            ]
          },
          "parts": {
            "type": "u32",
            "description": [
              "How many attempts this took."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "Amount the recipient received."
            ]
          },
          "amount_sent_msat": {
            "type": "msat",
            "description": [
              "Total amount we sent (including fees)."
            ]
          },
          "warning_partial_completion": {
            "type": "string",
            "description": [
              "Not all parts of a multi-part payment have completed."
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "complete",
              "pending",
              "failed"
            ],
            "description": [
              "Status of payment."
            ]
          }
        },
        "post_return_value_notes": [
          "You can monitor the progress and retries of a payment using the lightning-paystatus(7) command."
        ]
      },
      "randomization": [
        "To protect user privacy, the payment algorithm performs some randomization.",
        "",
        "1: Route Randomization",
        "",
        "Route randomization means the payment algorithm does not always use the lowest-fee or shortest route. This prevents some highly-connected node from learning all of the user payments by reducing their fees below the network average.",
        "",
        "2: Shadow Route",
        "",
        "Shadow route means the payment algorithm will virtually extend the route by adding delays and fees along it, making it appear to intermediate nodes that the route is longer than it actually is. This prevents intermediate nodes from reliably guessing their distance from the payee.",
        "",
        "Route randomization will never exceed *maxfeepercent* of the payment. Route randomization and shadow routing will not take routes that would exceed *maxdelay*."
      ],
      "errors": [
        "The following error codes may occur:",
        "",
        "- -1: Catchall nonspecific error.",
        "- 201: Already paid with this *hash* using different amount or destination.",
        "- 203: Permanent failure at destination. The *data* field of the error will be routing failure object (except for self-payment, which currently returns the error directly from lightning-sendpay(7)).",
        "- 205: Unable to find a route.",
        "- 206: Route too expensive. Either the fee or the needed total locktime for the route exceeds your *maxfeepercent* or *maxdelay* settings, respectively. The *data* field of the error will indicate the actual *fee* as well as the *feepercent* percentage that the fee has of the destination payment amount. It will also indicate the actual *delay* along the route.",
        "- 207: Invoice expired. Payment took too long before expiration, or already expired at the time you initiated payment. The *data* field of the error indicates *now* (the current time) and *expiry* (the invoice expiration) as UNIX epoch time in seconds.",
        "- 210: Payment timed out without a payment in progress.",
        "",
        "Error codes 202 and 204 will only get reported at **sendpay**; in **pay** we will keep retrying if we would have gotten those errors.",
        "",
        "A routing failure object has the fields below:",
        "",
        "*erring_index*: The index of the node along the route that reported the error. 0 for the local node, 1 for the first hop, and so on.",
        "*erring_node*: The hex string of the pubkey id of the node that reported the error.",
        "*erring_channel*: The short channel ID of the channel that has the error, or *0:0:0* if the destination node raised the error.",
        "*failcode*: The failure code, as per BOLT #4.",
        "*channel_update*: The hex string of the *channel_update* message received from the remote node. Only present if error is from the remote node and the *failcode* has the UPDATE bit set, as per BOLT #4.",
        "",
        "The *data* field of errors will include statistics *getroute_tries* and *sendpay_tries*. It will also contain a *failures* field with detailed data about routing errors."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listpays(7)",
        "lightning-decodepay(7)",
        "lightning-listinvoices(7)",
        "lightning-delinvoice(7)",
        "lightning-getroute(7)",
        "lightning-invoice(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:pay#1",
            "method": "pay",
            "params": [
              "lnbcrt500n1pn2s396sp5h5tz6fpm3dxvrlwcnwmfq85v45wfj43mdmplpce6ku2vmfdhrx5qpp50z9w5u57meydx9dpn889mmtkz6tqrfsa65hfwd88ql4hc5hyu70qdqcdsenygryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqt5m8qx0t25a0gygya7u4sxulyyp2dec87pwsxuuwtg0u66c07703g9j6vlwgmlhqk7qgn95qw7allhnuj2m9hf0xkcr2zkaxltv3t6gqjcdpll"
            ]
          },
          "response": {
            "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
            "payment_hash": "788aea729ede48d315a199ce5ded76169601a61dd52e9734e707eb7c52e4e79e",
            "created_at": 1722303686.2193663,
            "parts": 1,
            "amount_msat": 50000,
            "amount_sent_msat": 50001,
            "payment_preimage": "0e07efd883f66b6b22ec7f2e7116e203c3fecc22eb8596a73eaf06c4befb0641",
            "status": "complete"
          }
        },
        {
          "request": {
            "id": "example:pay#2",
            "method": "pay",
            "params": {
              "bolt11": "lnbcrt1u1pn2s3xxsp5xk8hs6zuv0yqhq7hhl0sps6mxuj78pzwryejaljh48vr4htykujqpp593ndc8wrukteld5j4nqnt6tedavh8ezv48dmrkqen3440ajnre5qdqcdsenxgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgq0asve9rdtfd9fe20u5vjujzmm0phpq538z8ndhn5ts62aflhktqn6338e45xcxkyf7askjjq25ksxt4eqarjjame8wfdmau7kq7m4csqs0n32n"
            }
          },
          "response": {
            "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
            "payment_hash": "2c66dc1dc3e5979fb692acc135e9796f5973e44ca9dbb1d8199c6b57f6531e68",
            "created_at": 1722303688.41859,
            "parts": 1,
            "amount_msat": 100000,
            "amount_sent_msat": 100000,
            "payment_preimage": "1ce8370d3a179cee3af25a5a6c7058e8e12033a842efd6d34abae53334bc94bf",
            "status": "complete"
          }
        }
      ]
    },
    "lightning-ping.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "ping",
      "title": "Command to check if a node is up.",
      "description": [
        "The **ping** command checks if the node with *id* is ready to talk. It currently only works for peers we have a channel with."
      ],
      "request": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "The pubkey of the node to ping."
            ]
          },
          "len": {
            "type": "u16",
            "description": [
              "The length of the ping."
            ],
            "default": "128"
          },
          "pongbytes": {
            "type": "u16",
            "description": [
              "The length of the reply. A value of 65532 to 65535 means `don't reply`."
            ],
            "default": "128"
          }
        }
      },
      "response": {
        "required": [
          "totlen"
        ],
        "properties": {
          "totlen": {
            "type": "u16",
            "description": [
              "The answer length of the reply message (including header: 0 means no reply expected)."
            ]
          }
        }
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters or we're already waiting for a ping response from peer."
      ],
      "author": [
        "Vincenzo Palazzo <<vincenzo.palazzo@protonmail.com>> wrote the initial version of this man page,",
        "but many others did the hard work of actually implementing this rpc command."
      ],
      "see_also": [
        "lightning-connect(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:ping#1",
            "method": "ping",
            "params": {
              "id": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
              "len": 128,
              "pongbytes": 128
            }
          },
          "response": {
            "totlen": 132
          }
        },
        {
          "request": {
            "id": "example:ping#2",
            "method": "ping",
            "params": {
              "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
              "len": 1000,
              "pongbytes": 65535
            }
          },
          "response": {
            "totlen": 0
          }
        }
      ]
    },
    "lightning-plugin.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": true,
      "rpc": "plugin",
      "title": "Manage plugins with RPC",
      "description": [
        "The **plugin** RPC command can be used to control dynamic plugins, i.e. plugins that declared themself 'dynamic' (in getmanifest)."
      ],
      "request": {
        "required": [
          "subcommand"
        ],
        "oneOfMany": [
          [
            "plugin",
            "directory"
          ]
        ],
        "properties": {
          "subcommand": {
            "type": "string",
            "enum": [
              "start",
              "stop",
              "rescan",
              "startdir",
              "list"
            ],
            "description": [
              "Determines what action is taken:",
              "  - *subcommand* **start** takes a *path* to an executable as argument and starts it as plugin. *path* may be an absolute path or a path relative to the plugins directory (default *~/.lightning/plugins*). If the plugin is already running and the executable (checksum) has changed, the plugin is killed and restarted except if its an important (or builtin) plugin. If the plugin doesn't complete the 'getmanifest' and 'init' handshakes within 60 seconds, the command will timeout and kill the plugin. Additional *options* may be passed to the plugin, but requires all parameters to be passed as keyword=value pairs using the `-k|--keyword` option which is recommended. For example the following command starts the plugin helloworld.py (present in the plugin directory) with the option greeting set to 'A crazy':",
              "  ```shell.",
              "  lightning-cli -k plugin subcommand=start plugin=helloworld.py greeting='A crazy'.",
              "  ```.",
              "  - *subcommand* **stop** takes a plugin executable *path* or *name* as argument and stops the plugin. If the plugin subscribed to 'shutdown', it may take up to 30 seconds before this command returns. If the plugin is important and dynamic, this will shutdown `lightningd`.",
              "  - *subcommand* **startdir** starts all executables it can find in *directory* (excl. subdirectories) as plugins. Checksum and timeout behavior as in **start** applies.",
              "  - *subcommand* **rescan** starts all plugins in the default plugins directory (default *~/.lightning/plugins*) that are not already running. Checksum and timeout behavior as in **start** applies.",
              "  - *subcommand* **list** lists all running plugins (incl. non-dynamic)."
            ]
          },
          "plugin": {
            "type": "string",
            "description": [
              "*path* or *name* of a plugin executable to start or stop."
            ]
          },
          "directory": {
            "type": "string",
            "description": [
              "*path* of a directory containing plugins."
            ]
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string",
              "description": [
                "*keyword=value* options passed to plugin, can be repeated."
              ]
            }
          }
        }
      },
      "response": {
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "type": "string",
            "enum": [
              "start",
              "stop",
              "rescan",
              "startdir",
              "list"
            ],
            "description": [
              "The subcommand this is responding to."
            ]
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "command": {
                  "type": "string",
                  "enum": [
                    "start",
                    "startdir",
                    "rescan",
                    "list"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [
                "command",
                "plugins"
              ],
              "properties": {
                "command": {},
                "plugins": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "name",
                      "active",
                      "dynamic"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": [
                          "Full pathname of the plugin."
                        ]
                      },
                      "active": {
                        "type": "boolean",
                        "description": [
                          "Status; plugin completed init and is operational, plugins are configured asynchronously."
                        ]
                      },
                      "dynamic": {
                        "type": "boolean",
                        "description": [
                          "Plugin can be stopped or started without restarting lightningd."
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "command": {
                  "type": "string",
                  "enum": [
                    "stop"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [
                "command",
                "result"
              ],
              "properties": {
                "command": {},
                "result": {
                  "type": "string",
                  "description": [
                    "A message saying it successfully stopped."
                  ]
                }
              }
            }
          }
        ]
      },
      "errors": [
        "On error, the reason why the action could not be taken upon the plugin is returned."
      ],
      "author": [
        "Antoine Poinsot <<darosior@protonmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-cli(1)",
        "lightning-listconfigs(7)",
        "[writing plugins][writing plugins]"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>",
        "",
        "[writing plugins]: https://docs.corelightning.org/docs/plugin-development"
      ],
      "examples": [
        {
          "request": {
            "id": "example:plugin#1",
            "method": "plugin",
            "params": {
              "subcommand": "start",
              "plugin": "/root/lightning/tests/plugins/allow_even_msgs.py"
            }
          },
          "response": {
            "command": "start",
            "plugins": [
              {
                "name": "/root/lightning/plugins/autoclean",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/chanbackup",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/bcli",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/commando",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/funder",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/topology",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/keysend",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/offers",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/pay",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/recover",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/txprepare",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/cln-renepay",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/spenderp",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/sql",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/bookkeeper",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/tests/plugins/allow_even_msgs.py",
                "active": true,
                "dynamic": true
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:plugin#2",
            "method": "plugin",
            "params": {
              "subcommand": "stop",
              "plugin": "/root/lightning/tests/plugins/allow_even_msgs.py"
            }
          },
          "response": {
            "command": "stop",
            "result": "Successfully stopped allow_even_msgs.py."
          }
        },
        {
          "request": {
            "id": "example:plugin#3",
            "method": "plugin",
            "params": [
              "list"
            ]
          },
          "response": {
            "command": "list",
            "plugins": [
              {
                "name": "/root/lightning/plugins/autoclean",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/chanbackup",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/bcli",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/commando",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/funder",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/topology",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/keysend",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/offers",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/pay",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/recover",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/txprepare",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/cln-renepay",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/spenderp",
                "active": true,
                "dynamic": false
              },
              {
                "name": "/root/lightning/plugins/sql",
                "active": true,
                "dynamic": true
              },
              {
                "name": "/root/lightning/plugins/bookkeeper",
                "active": true,
                "dynamic": false
              }
            ]
          }
        }
      ]
    },
    "lightning-preapproveinvoice.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.02",
      "rpc": "preapproveinvoice",
      "title": "Ask the HSM to preapprove an invoice (low-level)",
      "description": [
        "The **preapproveinvoice** RPC command submits the *bolt11* invoice to the HSM to check that it is approved for payment.",
        "",
        "Generally the **preapproveinvoice** request does not need to be made explicitly, it is automatically generated as part of a **pay** request.",
        "",
        "By default, the HSM will approve all **preapproveinvoice** requests.",
        "",
        "If a remote signer is being used it might decline an **preapproveinvoice** request because it would exceed velocity controls, is not covered by allowlist controls, was declined manually, or other reasons.",
        "",
        "If a remote signer declines a **preapproveinvoice** request a subsequent attempt to pay the invoice anyway will fail; the signer will refuse to sign the commitment."
      ],
      "request": {
        "required": [
          "bolt11"
        ],
        "properties": {
          "bolt11": {
            "type": "string",
            "description": [
              "Bolt11 invoice to submit to the HSM to check."
            ],
            "added": "v23.02"
          }
        }
      },
      "response": {
        "properties": {}
      },
      "author": [
        "Ken Sedgwick <<ken@bonsai.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-pay(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:preapproveinvoice#1",
            "method": "preapproveinvoice",
            "params": {
              "bolt11": "lnbcrt1230n1pn2s38psp5jf2zk7py4wmutyq4pdr6783egft24nkyhfrxegrzzqnef2matw2qpp5rf5zgqyexdt7q5ean83cvcjuc3jafn8etm3c0za6xldwcyllvffqdqlv3jhxcmjd9c8g6t0dcsxjmnktakrydqcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgq8nn5qkcp9xl5u7dlqamdys6e6yc0ngyqe676cqajnwax6657verj7at5gvdqu6nk3l0wcagq4muyhqqms4t0t9sfvyazpga5eywj6uqpyc409e"
            }
          },
          "response": {}
        },
        {
          "request": {
            "id": "example:preapproveinvoice#2",
            "method": "preapproveinvoice",
            "params": [
              "lnbcrt1240n1pn2s38psp5ufjqj6kuxlvl65xue9p06ulyvwf9sm0utxlch59d0ynl05778vwspp5qlacxkrdmc2p50yl8lsl75pwmlhve2ret2yd2f34z7jfs7yffwvqdqlv3jhxcmjd9c8g6t0dcsxjmnktakrydgcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqkml60qaytvnd08p57w7enuna95s7cqej8cfuvsgjzpeq9u83s0hqh60667nrp40qkqxkdu36z8wqtmac5z3208rwyn0q2pv56sgz5dcp9mn5hc"
            ]
          },
          "response": {}
        }
      ]
    },
    "lightning-preapprovekeysend.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.02",
      "rpc": "preapprovekeysend",
      "title": "Ask the HSM to preapprove a keysend payment (low-level)",
      "description": [
        "The **preapprovekeysend** RPC command submits the *destination*, *payment_hash*, and *amount_msat* parameters to the HSM to check that they are approved as a keysend payment.",
        "",
        "Generally the **preapprovekeysend** request does not need to be made explicitly, it is automatically generated as part of a **keysend** request.",
        "",
        "By default, the HSM will approve all **preapprovekeysend** requests.",
        "",
        "If a remote signer is being used it might decline an **preapprovekeysend** request because it would exceed velocity controls, is not covered by allowlist controls, was declined manually, or other reasons.",
        "",
        "If a remote signer declines a **preapprovekeysend** request a subsequent attempt to pay the keysend anyway will fail; the signer will refuse to sign the commitment."
      ],
      "request": {
        "required": [
          "destination",
          "payment_hash",
          "amount_msat"
        ],
        "properties": {
          "destination": {
            "type": "pubkey",
            "description": [
              "It is a 33 byte, hex-encoded, node ID of the node that the payment should go to."
            ],
            "added": "v23.02"
          },
          "payment_hash": {
            "type": "hex",
            "added": "v23.02",
            "description": [
              "It is the unique identifier of a payment."
            ],
            "maxLength": 64,
            "minLength": 64
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "The amount to send in millisatoshi precision; it can be a whole number, or a whole number with suffix `msat` or `sat`, or a three decimal point number with suffix `sat`, or an 1 to 11 decimal point number suffixed by `btc`."
            ],
            "added": "v23.02"
          }
        }
      },
      "response": {
        "properties": {}
      },
      "author": [
        "Ken Sedgwick <<ken@bonsai.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-keysend(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:preapprovekeysend#1",
            "method": "preapprovekeysend",
            "params": {
              "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
              "payment_hash": "0000000000000000000000000000000000000000000000000000000000000000",
              "amount_msat": 1000
            }
          },
          "response": {}
        },
        {
          "request": {
            "id": "example:preapprovekeysend#2",
            "method": "preapprovekeysend",
            "params": [
              "032cf15d1ad9c4a08d26eab1918f732d8ef8fdc6abb9640bf3db174372c491304e",
              "0101010101010101010101010101010101010101010101010101010101010101",
              2000
            ]
          },
          "response": {}
        }
      ]
    },
    "lightning-reckless.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "reckless",
      "title": "Issue a command to the reckless plugin manager utility",
      "description": [
        "The **reckless** RPC starts a reckless process with the *command* and *target* provided.  Node configuration, network, and lightning direrctory are automatically passed to the reckless utility."
      ],
      "request": {
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "type": "string",
            "enum": [
              "install",
              "uninstall",
              "search",
              "enable",
              "disable",
              "source",
              "--version"
            ],
            "description": [
              "Determines which command to pass to reckless",
              "  - *command* **install** takes a *plugin_name* to search for and install a named plugin.",
              "  - *command* **uninstall** takes a *plugin_name* and attempts to uninstall a plugin of the same name.",
              "  - *command* **search** takes a *plugin_name* to search for a named plugin.",
              "..."
            ]
          },
          "target/subcommand": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array"
              }
            ],
            "description": [
              "Target of a reckless command or a subcommand."
            ]
          },
          "target": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array"
              }
            ],
            "description": [
              "*name* of a plugin to install/uninstall/search/enable/disable or source to add/remove."
            ]
          }
        }
      },
      "response": {
        "required": [
          "log",
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": [
              "Output of the requested reckless command."
            ]
          },
          "log": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": [
              "Verbose log entries of the requested reckless command."
            ]
          }
        }
      },
      "author": [
        "Alex Myers <<alex@endothermic.dev>> is mainly responsible."
      ],
      "see_also": [
        "reckless(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:reckless#1",
            "method": "reckless",
            "params": {
              "command": "search",
              "target/subcommand": "backup"
            }
          },
          "response": {
            "result": [
              "https://github.com/lightningd/plugins"
            ],
            "log": [
              "DEBUG: Warning: Reckless requires write access",
              "DEBUG: fetching from gh API: https://api.github.com/repos/lightningd/plugins/contents/",
              "DEBUG: fetching from gh API: https://api.github.com/repos/lightningd/plugins/git/trees/294f93d7060799439c994daa84f534c4d1458325",
              "INFO: found backup in source: https://github.com/lightningd/plugins",
              "DEBUG: entry: None",
              "DEBUG: sub-directory: backup"
            ]
          }
        },
        {
          "request": {
            "id": "example:reckless#2",
            "method": "reckless",
            "params": {
              "command": "install",
              "target/subcommand": [
                "summars",
                "currecyrate"
              ]
            }
          },
          "response": {
            "result": [
              "/tmp/l1/reckless/summars",
              "/tmp/l1/reckless/currencyrate"
            ],
            "log": [
              "DEBUG: Searching for summars",
              "DEBUG: fetching from gh API: https://api.github.com/repos/lightningd/plugins/contents/",
              "DEBUG: fetching from gh API: https://api.github.com/repos/lightningd/plugins/git/trees/294f93d7060799439c994daa84f534c4d1458325",
              "INFO: found summars in source: https://github.com/lightningd/plugins",
              "DEBUG: entry: None",
              "DEBUG: sub-directory: summars",
              "DEBUG: Retrieving summars from https://github.com/lightningd/plugins",
              "DEBUG: Install requested from InstInfo(summars, https://github.com/lightningd/plugins, None, None, None, summars).",
              "INFO: cloning Source.GITHUB_REPO InstInfo(summars, https://github.com/lightningd/plugins, None, None, None, summars)",
              "DEBUG: cloned_src: InstInfo(summars, /tmp/reckless-726255950dyifh_fh/clone, None, Cargo.toml, Cargo.toml, summars/summars)",
              "DEBUG: using latest commit of default branch",
              "DEBUG: checked out HEAD: 5e449468bd57db7d0f33178fe0dc867e0da94133",
              "DEBUG: using installer rust",
              "DEBUG: creating /tmp/l1/reckless/summars",
              "DEBUG: creating /tmp/l1/reckless/summars/source",
              "DEBUG: copying /tmp/reckless-726255950dyifh_fh/clone/summars/summars tree to /tmp/l1/reckless/summars/source/summars",
              "DEBUG: linking source /tmp/l1/reckless/summars/source/summars/Cargo.toml to /tmp/l1/reckless/summars/Cargo.toml",
              "DEBUG: InstInfo(summars, /tmp/l1/reckless/summars, None, Cargo.toml, Cargo.toml, source/summars)",
              "DEBUG: cargo installing from /tmp/l1/reckless/summars/source/summars",
              "DEBUG: rust project compiled successfully",
              "INFO: plugin installed: /tmp/l1/reckless/summars",
              "DEBUG: activating summars",
              "INFO: summars enabled",
              "DEBUG: Searching for currencyrate",
              "DEBUG: fetching from gh API: https://api.github.com/repos/lightningd/plugins/contents/",
              "DEBUG: fetching from gh API: https://api.github.com/repos/lightningd/plugins/git/trees/294f93d7060799439c994daa84f534c4d1458325",
              "INFO: found currencyrate in source: https://github.com/lightningd/plugins",
              "DEBUG: entry: None",
              "DEBUG: sub-directory: currencyrate",
              "DEBUG: Retrieving currencyrate from https://github.com/lightningd/plugins",
              "DEBUG: Install requested from InstInfo(currencyrate, https://github.com/lightningd/plugins, None, None, None, currencyrate).",
              "INFO: cloning Source.GITHUB_REPO InstInfo(currencyrate, https://github.com/lightningd/plugins, None, None, None, currencyrate)",
              "DEBUG: cloned_src: InstInfo(currencyrate, /tmp/reckless-192564272t478naxn/clone, None, currencyrate.py, requirements.txt, currencyrate/currencyrate)",
              "DEBUG: using latest commit of default branch",
              "DEBUG: checked out HEAD: 5e449468bd57db7d0f33178fe0dc867e0da94133",
              "DEBUG: using installer python3venv",
              "DEBUG: creating /tmp/l1/reckless/currencyrate",
              "DEBUG: creating /tmp/l1/reckless/currencyrate/source",
              "DEBUG: copying /tmp/reckless-192564272t478naxn/clone/currencyrate/currencyrate tree to /tmp/l1/reckless/currencyrate/source/currencyrate",
              "DEBUG: linking source /tmp/l1/reckless/currencyrate/source/currencyrate/currencyrate.py to /tmp/l1/reckless/currencyrate/currencyrate.py",
              "DEBUG: InstInfo(currencyrate, /tmp/l1/reckless/currencyrate, None, currencyrate.py, requirements.txt, source/currencyrate)",
              "DEBUG: configuring a python virtual environment (pip) in /tmp/l1/reckless/currencyrate/.venv",
              "DEBUG: virtual environment created in /tmp/l1/reckless/currencyrate/.venv.",
              "INFO: dependencies installed successfully",
              "DEBUG: virtual environment for cloned plugin: .venv",
              "INFO: plugin installed: /tmp/l1/reckless/currencyrate",
              "DEBUG: activating currencyrate",
              "INFO: currencyrate enabled"
            ]
          }
        }
      ]
    },
    "lightning-recover.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "recover",
      "title": "Reinitialize Your Node for Recovery",
      "description": [
        "The **recover** RPC command wipes your node and restarts it with the `--recover` option. This is only permitted if the node is unused: no channels, no bitcoin addresses issued (you can use `check` to see if recovery is possible).",
        "",
        "*hsmsecret* is either a codex32 secret starting with \"cl1\" as returned by `hsmtool getcodexsecret`, or a raw 64 character hex string.",
        "",
        "NOTE: this command only currently works with the `sqlite3` database backend."
      ],
      "request": {
        "required": [
          "hsmsecret"
        ],
        "properties": {
          "hsmsecret": {
            "type": "string",
            "description": [
              "Either a codex32 secret starting with `cl1` as returned by `hsmtool getcodexsecret`, or a raw 64 character hex string."
            ]
          }
        }
      },
      "response": {
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "added": "v24.05",
            "enum": [
              "Recovery restart in progress"
            ]
          }
        }
      },
      "author": [
        "Rusty Russell <<rusty@blockstream.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-hsmtool(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:recover#1",
            "method": "recover",
            "params": {
              "hsmsecret": "6c696768746e696e672d36000000000000000000000000000000000000000000"
            }
          },
          "response": {
            "result": "Recovery restart in progress"
          }
        },
        {
          "request": {
            "id": "example:recover#2",
            "method": "recover",
            "params": {
              "hsmsecret": "cl10leetsd35kw6r5de5kueedxyesqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqluplcg0lxenqd"
            }
          },
          "response": {
            "result": "Recovery restart in progress"
          }
        }
      ]
    },
    "lightning-recoverchannel.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "recoverchannel",
      "title": "Command for recovering channels bundeled in an array in the form of *Static Backup*",
      "description": [
        "The **recoverchannel** RPC command tries to force the peer (with whom you already had a channel) to close the channel and sweeps on-chain fund. This method is not spontaneous and depends on the peer, so use it in case of severe data loss.",
        "",
        "The *scb* parameter is an array containing minimum required info to reconnect and sweep funds. You can get the scb for already stored channels by using the RPC command 'staticbackup'."
      ],
      "request": {
        "required": [
          "scb"
        ],
        "properties": {
          "scb": {
            "type": "array",
            "description": [
              "SCB of the channels in an array."
            ],
            "items": {
              "type": "hex"
            }
          }
        }
      },
      "response": {
        "required": [
          "stubs"
        ],
        "properties": {
          "stubs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": [
                "Channel IDs of channels successfully inserted."
              ]
            }
          }
        }
      },
      "author": [
        "Aditya <<aditya.sharma20111@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-getsharedsecret(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:recoverchannel#1",
            "method": "recoverchannel",
            "params": [
              [
                "0000000000000006f4e1de801de57374d5737da622611e3a1ad9f16d5df9c30fceecc11ce732eeeb022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d5900017f0000019b987577c455da982b1753df79c56f9d8d2b75d1401e60a5af322ab27b13b20d75970000000100000000000f42400003401000",
                "000000000000000121bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d00017f000001e610e23fcc9e6306ce636b203217b22409bf9bab2211f9f432de781dedb6377dab5a0000000100000000000f42400003401000",
                "00000000000000027512083907c74ed3a045e9bf772b3d72948eb93daf84a1cee57108800451aaf2035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d00017f000001e610ee1db407eb3e47be3e93e1abc05b13806ee7aef8550c517a4974c72bf91866410000000100000000000f42400003401000",
                "0000000000000003222d999f537e32e9458c5db17a63e012dcced61340de06fda5bc30566270b0aa0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c0351800017f0000019bc5b15661ec5c17599de0858401b72d6be66c34b48a3bb6e679542809f395e6bb2000000000000000000bebb3cb0003401000",
                "0000000000000004a4a379248e49d207cc984646e632e1a31105a85708b9d6d961a5018fdd489f5a0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c0351800017f000001c1ac184e7462759ff83049b19582db049d40076f83a7a70181374ca0ea91644a3d9c0000000200000000000075300003401000",
                "000000000000000509eb55872cd9039ecd08281af756e23b15aad4129fd6a9bcd71b472114ebf43a0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c0351800017f000001c1ace9067c9d125df7150261c80eec3ab9cf8731679752b84f090ab3ea6e36c93d3100000001000000000000c3500003401000"
              ]
            ]
          },
          "response": {
            "stubs": [
              "f4e1de801de57374d5737da622611e3a1ad9f16d5df9c30fceecc11ce732eeeb",
              "21bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357",
              "7512083907c74ed3a045e9bf772b3d72948eb93daf84a1cee57108800451aaf2",
              "222d999f537e32e9458c5db17a63e012dcced61340de06fda5bc30566270b0aa",
              "a4a379248e49d207cc984646e632e1a31105a85708b9d6d961a5018fdd489f5a",
              "09eb55872cd9039ecd08281af756e23b15aad4129fd6a9bcd71b472114ebf43a"
            ]
          }
        }
      ]
    },
    "lightning-renepay.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "renepay",
      "title": "Command for sending a payment to a BOLT11 invoice",
      "added": "v23.08",
      "description": [
        "**renepay** is a new payment plugin based on Pickhardt-Richter optimization method for Multi-Path-Payments. This implementation has not been thoroughly tested and it should be used with caution.",
        "",
        "The response will occur when the payment fails or succeeds. Once a payment has succeeded, calls to **renepay** with the same *invstring* will not lead to a new payment attempt, but instead it will succeed immediately.",
        "",
        "When using *lightning-cli*, you may skip optional parameters by using *null*. Alternatively, use **-k** option to provide parameters by name."
      ],
      "request": {
        "required": [
          "invstring"
        ],
        "properties": {
          "invstring": {
            "type": "string",
            "description": [
              "Bolt11 invoice which the RPC command attempts to pay. Currently, **renepay** supports bolt11 invoices only."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "If the *invstring* does not contain an amount, *amount_msat* is required, otherwise if it is specified it must be *null*. in millisatoshi precision; it can be a whole number, or a whole number with suffix *msat* or *sat*, or a three decimal point number with suffix *sat*, or an 1 to 11 decimal point number suffixed by *btc*."
            ]
          },
          "maxfee": {
            "type": "msat",
            "description": [
              "*maxfee* is a hard bound, in the sense that the command will never attempt a payment when the fees exceed that value."
            ]
          },
          "maxdelay": {
            "type": "u32",
            "description": [
              "Overrides the value of `max-locktime-blocks` for this payment. It serves to limit the locktime of funds in the payment HTLC measured in blocks."
            ]
          },
          "retry_for": {
            "type": "u32",
            "description": [
              "Measured in seconds specifies how much time it is allowed for the command to keep retrying the payment."
            ],
            "default": "60 seconds"
          },
          "description": {
            "type": "string",
            "description": [
              "Only required for bolt11 invoices which do not contain a description themselves, but contain a description hash: in this case *description* is required. *description* is then checked against the hash inside the invoice before it will be paid."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "Used to attach a label to payments, and is returned in lightning-listpays(7) and lightning-listsendpays(7)."
            ]
          },
          "exclude": {
            "added": "v24.08",
            "type": "array",
            "description": [
              "*exclude* is a JSON array of short-channel-id/direction (e.g. [ '564334x877x1/0', '564195x1292x0/1' ]) or pubkey which should be excluded from consideration for routing."
            ],
            "default": "not to exclude any channels or nodes",
            "items": {
              "oneOf": [
                {
                  "type": "short_channel_id_dir"
                },
                {
                  "type": "pubkey"
                }
              ]
            }
          },
          "dev_use_shadow": {
            "hidden": true,
            "type": "boolean"
          }
        }
      },
      "response": {
        "required": [
          "payment_preimage",
          "payment_hash",
          "created_at",
          "parts",
          "amount_msat",
          "amount_sent_msat",
          "status"
        ],
        "properties": {
          "payment_preimage": {
            "type": "secret",
            "description": [
              "The proof of payment: SHA256 of this **payment_hash**."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "created_at": {
            "type": "number",
            "description": [
              "The UNIX timestamp showing when this payment was initiated."
            ]
          },
          "parts": {
            "type": "u32",
            "description": [
              "How many attempts this took."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "Amount the recipient received."
            ]
          },
          "amount_sent_msat": {
            "type": "msat",
            "description": [
              "Total amount we sent (including fees)."
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "complete",
              "pending",
              "failed"
            ],
            "description": [
              "Status of payment."
            ]
          },
          "destination": {
            "type": "pubkey",
            "description": [
              "The final destination of the payment."
            ]
          }
        },
        "post_return_value_notes": [
          "You can monitor the progress and retries of a payment using the lightning-renepaystatus(7) command."
        ]
      },
      "optimality": [
        "**renepay** is based on the work by Pickhardt-Richter's *Optimally Reliable & Cheap Payment Flows on the Lightning Network*. Which means the payment command will prefer routes that have a higher probability of success while keeping fees low.",
        "",
        "The algorithm records some partial knowledge of the state of the Network deduced from the responses obtained after evey payment attempt. This knowledge is kept through different payment requests, but decays with time to account for the dynamics of the Network (after 1 hour all previous knowledge will be erased). Knowledge from previous payment attempts increases the reliability for subsequent ones.",
        "",
        "Higher probabilities of success and lower fees cannot generally by optimized at once. Hence **renepay** combines the two in different amounts seeking solutions that satisfy *maxfee* bound and a target for 90% probability of success. *maxfee* is a hard bound, in the sense that the command will never attempt a payment when the fees exceed that value. While the probability target is not compulsory (but desirable), i.e. if the best route does not satisfy the 90% probability target it will be tried anyways.",
        "",
        "When *maxfee* and the 90% probability bounds are satified, the algorithm will optimize the fees to its lowest value."
      ],
      "randomization": [
        "To protect user privacy, the payment algorithm performs *shadow route* randomization. Which means the payment algorithm will virtually extend the route by adding delays and fees along it, making it appear to intermediate nodes that the route is longer than it actually is. This prevents intermediate nodes from reliably guessing their distance from the payee.",
        "",
        "Route randomization will never exceed *maxfee* of the payment. Route randomization and shadow routing will not take routes that would exceed *maxdelay*."
      ],
      "errors": [
        "The following error codes may occur:",
        "",
        "- -1: Catchall nonspecific error.",
        "- 200: Other payment attempts are in progress.",
        "- 203: Permanent failure at destination.",
        "- 205: Unable to find a route.",
        "- 206: Payment routes are too expensive.",
        "- 207: Invoice expired. Payment took too long before expiration, or already expired at the time you initiated payment.",
        "- 210: Payment timed out without a payment in progress.",
        "- 212: Invoice is invalid."
      ],
      "author": [
        "Eduardo Quintana-Miranda <<eduardo.quintana@pm.me>> is mainly responsible."
      ],
      "see_also": [
        "lightning-renepaystatus(7)",
        "lightning-listpays(7)",
        "lightning-invoice(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>",
        "",
        "Pickhardt R. and Richter S., *Optimally Reliable & Cheap Payment Flows on the Lightning Network* <https://arxiv.org/abs/2107.05322>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:renepay#1",
            "method": "renepay",
            "params": {
              "invstring": "lnbcrt1pn2s3xxsp5xvccgadvepzypat5v8u8tstwdvn9ez4908h7ntl4s0ggx76ug4cqpp50qwurth9swdlzphjvjc2qm8sws8jcu0u28y4vt5s7nhr3js0c3vsdqcdserzgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqw4qfxj30wqn2m2qmcfz2gs6ttszdhkc0kjqk0mgg59tj2cy90wcke4tjzmzakrkvcgqgf3367j47q5g2ruuw67cxaqxm2t4m42yecsqp92jzs7",
              "amount_msat": 400000
            }
          },
          "response": {
            "bolt11": "lnbcrt1pn2s3xxsp5xvccgadvepzypat5v8u8tstwdvn9ez4908h7ntl4s0ggx76ug4cqpp50qwurth9swdlzphjvjc2qm8sws8jcu0u28y4vt5s7nhr3js0c3vsdqcdserzgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqw4qfxj30wqn2m2qmcfz2gs6ttszdhkc0kjqk0mgg59tj2cy90wcke4tjzmzakrkvcgqgf3367j47q5g2ruuw67cxaqxm2t4m42yecsqp92jzs7",
            "amount_msat": 400000,
            "payment_hash": "781dc1aee5839bf106f264b0a06cf0740f2c71fc51c9562e90f4ee38ca0fc459",
            "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
            "created_at": 1722303718.0730329,
            "groupid": 1,
            "parts": 2,
            "status": "complete",
            "payment_preimage": "af67b48518e78e157db404d13cb42987c31e034634203d10b224302b05fc6c90",
            "amount_sent_msat": 400000
          }
        },
        {
          "request": {
            "id": "example:renepay#2",
            "method": "renepay",
            "params": {
              "invstring": "lnbcrt40n1pn2s3xxsp5j329vez86jvxw6543zlcla2fusm7v6h74pf7ftmmyfv6zm9uedlspp5j6xpxmq8cwd305vj2dvd6dh4mkr0s6guvehvyleymedgf4vsm3ysdqaveskjmr9vssxgetnvdexjur5d9hkuxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqk6uwy8pkv42jzhdna3z4vxpwkapdzzpn2tcpjnqj738nlpkjc583l9v72vlskt8y33rr4z3jma32xx7ve0jfy7anvn6r98cr5flhcuqqhr4shx"
            }
          },
          "response": {
            "bolt11": "lnbcrt40n1pn2s3xxsp5j329vez86jvxw6543zlcla2fusm7v6h74pf7ftmmyfv6zm9uedlspp5j6xpxmq8cwd305vj2dvd6dh4mkr0s6guvehvyleymedgf4vsm3ysdqaveskjmr9vssxgetnvdexjur5d9hkuxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqk6uwy8pkv42jzhdna3z4vxpwkapdzzpn2tcpjnqj738nlpkjc583l9v72vlskt8y33rr4z3jma32xx7ve0jfy7anvn6r98cr5flhcuqqhr4shx",
            "amount_msat": 4000,
            "payment_hash": "968c136c07c39b17d1925358dd36f5dd86f8691c666ec27f24de5a84d590dc49",
            "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
            "created_at": 1722303719.1643083,
            "groupid": 1,
            "parts": 2,
            "status": "complete",
            "payment_preimage": "8815ee921dba644c076f9f879abb520d8539a6913856a439752eaaadff1e21ac",
            "amount_sent_msat": 4000
          }
        }
      ]
    },
    "lightning-renepaystatus.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "renepaystatus",
      "title": "Command for quering the status of previous renepay attempts",
      "added": "v23.08",
      "description": [
        "The **renepaystatus** RPC command queries the payment plugin **renepay** for the status of previous payment attempts.",
        "",
        "This command always succeeds."
      ],
      "request": {
        "required": [],
        "properties": {
          "invstring": {
            "type": "string",
            "description": [
              "If specified, the command will return a list of payment attempts whose invoice matches *invstring*, otherwise all payments with be listed."
            ]
          }
        }
      },
      "response": {
        "required": [
          "paystatus"
        ],
        "properties": {
          "paystatus": {
            "type": "array",
            "description": [
              "A list of payments attempted by renepay."
            ],
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "bolt11",
                "payment_hash",
                "created_at",
                "groupid",
                "amount_msat",
                "status"
              ],
              "properties": {
                "bolt11": {
                  "type": "string",
                  "description": [
                    "Invoice string BOLT11."
                  ]
                },
                "payment_preimage": {
                  "type": "secret",
                  "description": [
                    "The proof of payment: SHA256 of this **payment_hash** (for completed payments only)."
                  ]
                },
                "payment_hash": {
                  "type": "hash",
                  "description": [
                    "The hash of the *payment_preimage* which will prove payment."
                  ]
                },
                "created_at": {
                  "type": "number",
                  "description": [
                    "The UNIX timestamp showing when this payment was initiated."
                  ]
                },
                "groupid": {
                  "type": "u32",
                  "description": [
                    "The id for this payment attempt."
                  ]
                },
                "parts": {
                  "type": "u32",
                  "description": [
                    "How many attempts this took."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "Amount the recipient received."
                  ]
                },
                "amount_sent_msat": {
                  "type": "msat",
                  "description": [
                    "Total amount we sent including fees (for completed payments only)."
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "complete",
                    "pending",
                    "failed"
                  ],
                  "description": [
                    "Status of payment."
                  ]
                },
                "destination": {
                  "type": "pubkey",
                  "description": [
                    "The final destination of the payment."
                  ]
                },
                "notes": {
                  "type": "array",
                  "description": [
                    "A list of messages for debugging purposes."
                  ],
                  "items": {
                    "type": "string",
                    "description": [
                      "A message generated by renepay."
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "author": [
        "Eduardo Quintana-Miranda <<eduardo.quintana@pm.me>> is mainly responsible."
      ],
      "see_also": [
        "lightning-renepay(7)",
        "lightning-listpays(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:renepaystatus#1",
            "method": "renepaystatus",
            "params": {
              "invstring": "lnbcrt1pn2s3xxsp5xvccgadvepzypat5v8u8tstwdvn9ez4908h7ntl4s0ggx76ug4cqpp50qwurth9swdlzphjvjc2qm8sws8jcu0u28y4vt5s7nhr3js0c3vsdqcdserzgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqw4qfxj30wqn2m2qmcfz2gs6ttszdhkc0kjqk0mgg59tj2cy90wcke4tjzmzakrkvcgqgf3367j47q5g2ruuw67cxaqxm2t4m42yecsqp92jzs7"
            }
          },
          "response": {
            "paystatus": [
              {
                "bolt11": "lnbcrt1pn2s3xxsp5xvccgadvepzypat5v8u8tstwdvn9ez4908h7ntl4s0ggx76ug4cqpp50qwurth9swdlzphjvjc2qm8sws8jcu0u28y4vt5s7nhr3js0c3vsdqcdserzgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqw4qfxj30wqn2m2qmcfz2gs6ttszdhkc0kjqk0mgg59tj2cy90wcke4tjzmzakrkvcgqgf3367j47q5g2ruuw67cxaqxm2t4m42yecsqp92jzs7",
                "amount_msat": 400000,
                "payment_hash": "781dc1aee5839bf106f264b0a06cf0740f2c71fc51c9562e90f4ee38ca0fc459",
                "destination": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "created_at": 1722303718.0730329,
                "groupid": 1,
                "parts": 2,
                "status": "complete",
                "payment_preimage": "af67b48518e78e157db404d13cb42987c31e034634203d10b224302b05fc6c90",
                "amount_sent_msat": 400000
              }
            ]
          }
        }
      ]
    },
    "lightning-reserveinputs.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "reserveinputs",
      "title": "Construct a transaction and reserve the UTXOs it spends",
      "description": [
        "The **reserveinputs** RPC command places (or increases) reservations on any inputs specified in *psbt* which are known to lightningd. It will fail with an error if any of the inputs are known to be spent, and ignore inputs which are unknown.",
        "",
        "Normally the command will fail (with no reservations made) if an input is already reserved."
      ],
      "request": {
        "required": [
          "psbt"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "The PSBT to reserve inputs from."
            ]
          },
          "exclusive": {
            "type": "boolean",
            "description": [
              "If set to *False*, existing reservations are simply extended, rather than causing failure."
            ]
          },
          "reserve": {
            "type": "u32",
            "description": [
              "The number of blocks to reserve. By default, reservations are for the next 72 blocks (approximately 6 hours)."
            ]
          }
        }
      },
      "response": {
        "required": [
          "reservations"
        ],
        "properties": {
          "reservations": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "txid",
                "vout",
                "was_reserved",
                "reserved",
                "reserved_to_block"
              ],
              "properties": {
                "txid": {
                  "type": "txid",
                  "description": [
                    "The input transaction id."
                  ]
                },
                "vout": {
                  "type": "u32",
                  "description": [
                    "The input index output number which was reserved."
                  ]
                },
                "was_reserved": {
                  "type": "boolean",
                  "description": [
                    "Whether the input was already reserved."
                  ]
                },
                "reserved": {
                  "type": "boolean",
                  "enum": [
                    true
                  ],
                  "description": [
                    "Whether the input is now reserved."
                  ]
                },
                "reserved_to_block": {
                  "type": "u32",
                  "description": [
                    "What blockheight the reservation will expire."
                  ]
                }
              }
            }
          }
        }
      },
      "errors": [
        "On failure, an error is reported and no UTXOs are reserved.",
        "",
        "- -32602: Invalid parameter, such as specifying a spent/reserved input in *psbt*."
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-unreserveinputs(7)",
        "lightning-signpsbt(7)",
        "lightning-sendpsbt(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:reserveinputs#1",
            "method": "reserveinputs",
            "params": {
              "psbt": "cHNidP8BADMCAAAAAfcJ+tPRXly5UFuX2jOOOBUcBBjfDGAC8vLWfrkJf/O2AQAAAAD9////AAAAAAAAAA=="
            }
          },
          "response": {
            "reservations": [
              {
                "txid": "b6f37f09b97ed6f2f202600cdf18041c15388e33da975b50b95c5ed1d3fa09f7",
                "vout": 1,
                "was_reserved": false,
                "reserved": true,
                "reserved_to_block": 226
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:reserveinputs#2",
            "method": "reserveinputs",
            "params": {
              "psbt": "cHNidP8BADMCAAAAAQmU87pv4WOONFOqae6XAQBHIi5fZ4Ztyt0vn1YASZntAAAAAAD9////AAAAAAAAAA=="
            }
          },
          "response": {
            "reservations": [
              {
                "txid": "ed994900569f2fddca6d86675f2e2247000197ee69aa53348e63e16fbaf39409",
                "vout": 0,
                "was_reserved": false,
                "reserved": true,
                "reserved_to_block": 226
              }
            ]
          }
        }
      ]
    },
    "lightning-sendcustommsg.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v0.10.1",
      "rpc": "sendcustommsg",
      "title": "Low-level interface to send protocol messages to peers",
      "description": [
        "The `sendcustommsg` RPC method allows the user to inject a custom message into the communication with the peer with the given `node_id`. This is intended as a low-level interface to implement custom protocol extensions on top, not for direct use by end-users.",
        "",
        "On the receiving end a plugin may implement the `custommsg` plugin hook and get notified about incoming messages, and allow additional unknown even types in their getmanifest response."
      ],
      "request": {
        "required": [
          "node_id",
          "msg"
        ],
        "properties": {
          "node_id": {
            "type": "pubkey",
            "description": [
              "The node specified by `node_id` must be a peer, i.e., it must have a direct connection with the node receiving the RPC call, and the connection must be established. For a method to send arbitrary messages over multiple hops, including hops that do not understand the custom message, see the `createonion` and `sendonion` RPC methods. Messages can only be injected if the connection is handled by `openingd` or `channeld`. Messages cannot be injected when the peer is handled by `onchaind` or `closingd` since these do not have a connection, or are synchronous daemons that do not handle spontaneous messages."
            ]
          },
          "msg": {
            "type": "hex",
            "description": [
              "Must be a hex encoded well-formed message, including the 2-byte type prefix, but excluding the length prefix which will be added by the RPC method. The message types may not be one of the internally handled types, since that may cause issues with the internal state tracking of Core Lightning. We do (as of *v23.11*) allow sending of even types, but note that peers (as per the spec) will disconnect on receiving unknown even types."
            ]
          }
        }
      },
      "response": {
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": [
              "Information about where message was queued."
            ]
          }
        },
        "pre_return_value_notes": [
          "The method will validate the arguments and queue the message for delivery through the daemon that is currently handling the connection. Queuing provides best effort guarantees and the message may not be delivered if the connection is terminated while the message is queued. The RPC method will return as soon as the message is queued.",
          "",
          "If any of the above limitations is not respected the method returns an explicit error message stating the issue."
        ]
      },
      "author": [
        "Christian Decker <<decker.christian@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-createonion(7)",
        "lightning-sendonion(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:sendcustommsg#1",
            "method": "sendcustommsg",
            "params": {
              "node_id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
              "msg": "77770012"
            }
          },
          "response": {
            "status": "Message sent to connectd for delivery"
          }
        }
      ]
    },
    "lightning-sendinvoice.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "sendinvoice",
      "title": "Command for send an invoice for an offer",
      "warning": "experimental-offers only",
      "description": [
        "The **sendinvoice** RPC command creates and sends an invoice to the issuer of an *invoice_request* for it to pay: lightning-invoicerequest(7).",
        "",
        "If **fetchinvoice-noconnect** is not specified in the configuation, it will connect to the destination in the (currently common!) case where it cannot find a route which supports `option_onion_messages`."
      ],
      "request": {
        "required": [
          "invreq",
          "label"
        ],
        "properties": {
          "invreq": {
            "type": "string",
            "description": [
              "The bolt12 invoice_request string beginning with `lnr1`."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "The unique label to use for this invoice."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "Required if the *offer* does not specify an amount at all, or specifies it in a different currency. Otherwise you may set it (e.g. to provide a tip)."
            ],
            "default": "the amount contained in the offer (multiplied by *quantity* if any)"
          },
          "timeout": {
            "type": "u32",
            "description": [
              "Seconds to wait for the offering node to pay the invoice or return an error. This will also be the timeout on the invoice that is sent."
            ],
            "default": "90 seconds"
          },
          "quantity": {
            "type": "u64",
            "description": [
              "Quantity is is required if the offer specifies quantity_max, otherwise it is not allowed."
            ]
          }
        }
      },
      "response": {
        "required": [
          "label",
          "description",
          "payment_hash",
          "status",
          "created_index",
          "expires_at"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": [
              "Unique label supplied at invoice creation."
            ]
          },
          "description": {
            "type": "string",
            "description": [
              "Description used in the invoice."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "unpaid",
              "paid",
              "expired"
            ],
            "description": [
              "Whether it's paid, unpaid or unpayable."
            ]
          },
          "expires_at": {
            "type": "u64",
            "description": [
              "UNIX timestamp of when it will become / became unpayable."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "The amount required to pay this invoice."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The BOLT12 string."
            ]
          },
          "created_index": {
            "type": "u64",
            "added": "v23.08",
            "description": [
              "1-based index indicating order this invoice was created in."
            ]
          },
          "updated_index": {
            "type": "u64",
            "added": "v23.08",
            "description": [
              "1-based index indicating order this invoice was changed (only present if it has changed since creation)."
            ]
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "paid"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [
                "pay_index",
                "amount_received_msat",
                "paid_at",
                "payment_preimage"
              ],
              "properties": {
                "label": {},
                "description": {},
                "payment_hash": {},
                "status": {},
                "msatoshi": {},
                "amount_msat": {},
                "bolt12": {},
                "expires_at": {},
                "created_index": {},
                "updated_index": {},
                "pay_index": {
                  "type": "u64",
                  "description": [
                    "Unique incrementing index for this payment."
                  ]
                },
                "amount_received_msat": {
                  "type": "msat",
                  "description": [
                    "The amount actually received (could be slightly greater than *amount_msat*, since clients may overpay)."
                  ]
                },
                "paid_at": {
                  "type": "u64",
                  "description": [
                    "UNIX timestamp of when it was paid."
                  ]
                },
                "payment_preimage": {
                  "type": "secret",
                  "description": [
                    "Proof of payment."
                  ]
                }
              }
            }
          }
        ]
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- -1: Catchall nonspecific error.",
        "- 1002: Offer has expired.",
        "- 1003: Cannot find a route to the node making the offer.",
        "- 1004: The node making the offer returned an error message.",
        "- 1005: We timed out waiting for the invoice to be paid"
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-fetchinvoice(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:sendinvoice#1",
            "method": "sendinvoice",
            "params": {
              "invreq": "lnr1qqgypua5g7rp293k00s66ayvnv26czst2d5k6urvv5s8getnw3gzqp3zderpzxstt8927ynqg044h0egcd8n5h3n9g0u0v4h8ncc3yg02gps7sjqtqssytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82e7pq947t0ks7a4yejz8w79x4zj25s3pu6zrnw2e0v2ugdescpcqsq307z4p2dlxe92fv7xd43qut0pjkg4y094hupqyhsj8dlhvmmfng6sv",
              "label": "test sendinvoice"
            }
          },
          "response": {
            "label": "test sendinvoice",
            "bolt12": "lni1qqgypua5g7rp293k00s66ayvnv26czst2d5k6urvv5s8getnw3gzqp3zderpzxstt8927ynqg044h0egcd8n5h3n9g0u0v4h8ncc3yg02gps7sjqtqssytfzxcs2xkdy0lml0tzy0jzugmyj8kjn8zfzrgq9fsgurc72x82e5zvqyehytxx360zptatj4pygsv9kpal8gnkeyd0tpvd6jv5rkv2uqdgcq2s27mvxt0arlnulnmce53cuz00vzaqvgvhpphxgavl89r8zrdhaxqgzpvxkkmwsmxnuwflttmnpc8vtzwlgd3cfty3xwlnlc9r2gcjesguqqv4xey4m7l4wxem27vxyxfhwznlc62kffsd5xncx9w49m4g72u2y7lcl6a3x5cpu52j6gm8q5x0q8k7myxdzrsqqqqqqqqqqqqqqq5qqqqqqqqqqqqqayjedltzjqqqqqq9yq3n2s38p5cq442pq5qpm4ht26v8statwxcrl65uy26c9hx4dvy66f9x665eqqy90tpz25qc0gfqtqggzvmj9nrga83q474e2sjygxzmq7ln5fmvjxh4skxafx2pmx9wqx5v0qsqfkcrpht0d3nnt8txkcgf5wr6gzrlacls2gyrvj5hhwuu98shurrn6ayruunju7k9yu9clvaj354tr064ruuht88q5dj73kzru20uzj",
            "payment_hash": "a003badd6ad30f05f56e3607fd538456b05b9aad6135a494dad5320010af5844",
            "amount_msat": 1000000,
            "status": "paid",
            "pay_index": 1,
            "amount_received_msat": 1000000,
            "paid_at": 1722303714,
            "payment_preimage": "6f154ed7d108349cb6385eba5f160294ef83862c2c560ba6446b2a3da5c2b3b3",
            "description": "Simple test",
            "expires_at": 1722303803,
            "created_index": 3,
            "updated_index": 1
          }
        }
      ]
    },
    "lightning-sendonion.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "sendonion",
      "title": "Send a payment with a custom onion packet",
      "description": [
        "The **sendonion** RPC command can be used to initiate a payment attempt with a custom onion packet. The onion packet is used to deliver instructions for hops along the route on how to behave. Normally these instructions are indications on where to forward a payment and what parameters to use, or contain details of the payment for the final hop. However, it is possible to add arbitrary information for hops in the custom onion, allowing for custom extensions that are not directly supported by Core Lightning.",
        "",
        "If the first element of *route* does not have \"channel\" set, a suitable channel (if any) will be chosen, otherwise that specific short-channel-id is used. The following is an example of a 3 hop onion:",
        "",
        "```json",
        "[",
        "  \"298606954e9de3e9d938d18a74fed794c440e8eda82e52dc08600953c8acf9c4\",",
        "  \"2dc094de72adb03b90894192edf9f67919cb2691b37b1f7d4a2f4f31c108b087\",",
        "  \"a7b82b240dbd77a4ac8ea07709b1395d8c510c73c17b4b392bb1f0605d989c85\"",
        "]",
        "```"
      ],
      "request": {
        "required": [
          "onion",
          "first_hop",
          "payment_hash"
        ],
        "properties": {
          "onion": {
            "type": "hex",
            "description": [
              "Hex-encoded 1366 bytes long blob that was returned by either of the tools that can generate onions. It contains the payloads destined for each hop and some metadata. Please refer to [BOLT 04][bolt04] for further details. If is specific to the route that is being used and the *payment_hash* used to construct, and therefore cannot be reused for other payments or to attempt a separate route. The custom onion can generally be created using the `devtools/onion` CLI tool, or the **createonion** RPC command."
            ]
          },
          "first_hop": {
            "type": "object",
            "description": [
              "Instructs Core Lightning which peer to send the onion to. It is a JSON dictionary that corresponds to the first element of the route array returned by *getroute*."
            ],
            "required": [
              "id",
              "amount_msat",
              "delay"
            ],
            "properties": {
              "id": {
                "type": "pubkey",
                "description": [
                  "Node id for the peer. Use any available channel available to this peer."
                ]
              },
              "amount_msat": {
                "type": "msat",
                "description": [
                  "The amount to add an HTLC for millisatoshis."
                ]
              },
              "delay": {
                "type": "u16",
                "description": [
                  "The number of blocks delay of blocks on top of the current blockheight."
                ]
              }
            }
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "Specifies the 32 byte hex-encoded hash to use as a challenge to the HTLC that we are sending. It is specific to the onion and has to match the one the onion was created with."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "Can be used to provide a human readable reference to retrieve the payment at a later time."
            ]
          },
          "shared_secrets": {
            "type": "array",
            "description": [
              "A JSON list of 32 byte hex-encoded secrets that were used when creating the onion. Core Lightning can send a payment with a custom onion without the knowledge of these secrets, however it will not be able to parse an eventual error message since that is encrypted with the shared secrets used in the onion. If *shared_secrets* is provided Core Lightning will decrypt the error, act accordingly, e.g., add a `channel_update` included in the error to its network view, and set the details in *listsendpays* correctly. If it is not provided Core Lightning will store the encrypted onion, and expose it in *listsendpays* allowing the caller to decrypt it externally. If it is not provided the Core Lightning node does not know how long the route is, which channels or nodes are involved, and what an eventual error could have been. It can therefore be used for oblivious payments."
            ],
            "items": {
              "type": "secret"
            }
          },
          "partid": {
            "type": "u16",
            "description": [
              "If provided and non-zero, allows for multiple parallel partial payments with the same *payment_hash*."
            ]
          },
          "bolt11": {
            "type": "string",
            "description": [
              "If provided, it will be returned in *waitsendpay* and *listsendpays* results."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "Used to annotate the payment, and is returned by *waitsendpay* and *listsendpays*."
            ]
          },
          "destination": {
            "type": "pubkey",
            "description": [
              "If provided, it will be returned in **listpays** result."
            ]
          },
          "localinvreqid": {
            "type": "hash",
            "description": [
              "`localinvreqid` is used by offers to link a payment attempt to a local `invoice_request` offer created by lightningd-invoicerequest(7)."
            ]
          },
          "groupid": {
            "type": "u64",
            "description": [
              "Grouping key to disambiguate multiple attempts to pay an invoice or the same payment_hash."
            ]
          },
          "description": {
            "added": "v0.11.0",
            "type": "string",
            "description": [
              "If provided, it will be returned in *waitsendpay* and *listsendpays* results."
            ]
          }
        }
      },
      "response": {
        "required": [
          "created_index",
          "id",
          "payment_hash",
          "status",
          "created_at",
          "amount_sent_msat"
        ],
        "properties": {
          "created_index": {
            "added": "v23.11",
            "type": "u64",
            "description": [
              "1-based index indicating order this payment was created in."
            ]
          },
          "id": {
            "type": "u64",
            "description": [
              "Old synonym for created_index."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "complete"
            ],
            "description": [
              "Status of the payment (could be complete if already sent previously)."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "The amount delivered to destination (if known)."
            ]
          },
          "destination": {
            "type": "pubkey",
            "description": [
              "The final destination of the payment if known."
            ]
          },
          "created_at": {
            "type": "u64",
            "description": [
              "The UNIX timestamp showing when this payment was initiated."
            ]
          },
          "amount_sent_msat": {
            "type": "msat",
            "description": [
              "The amount sent."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "The label, if given to sendpay."
            ]
          },
          "bolt11": {
            "type": "string",
            "description": [
              "The bolt11 string (if supplied)."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The bolt12 string (if supplied: **experimental-offers** only)."
            ]
          },
          "partid": {
            "type": "u64",
            "description": [
              "The partid (if supplied) to sendonion/sendpay."
            ]
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "complete"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [
                "payment_preimage"
              ],
              "properties": {
                "created_index": {},
                "id": {},
                "payment_hash": {},
                "status": {},
                "msatoshi": {},
                "amount_msat": {},
                "destination": {},
                "created_at": {},
                "groupid": {},
                "msatoshi_sent": {},
                "amount_sent_msat": {},
                "label": {},
                "bolt11": {},
                "bolt12": {},
                "partid": {},
                "updated_index": {
                  "added": "v23.11",
                  "type": "u64",
                  "description": [
                    "1-based index indicating order this payment was changed."
                  ]
                },
                "payment_preimage": {
                  "type": "secret",
                  "description": [
                    "The proof of payment: SHA256 of this **payment_hash**."
                  ]
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "pending"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [],
              "properties": {
                "created_index": {},
                "id": {},
                "payment_hash": {},
                "status": {},
                "msatoshi": {},
                "amount_msat": {},
                "destination": {},
                "created_at": {},
                "groupid": {},
                "msatoshi_sent": {},
                "amount_sent_msat": {},
                "label": {},
                "bolt11": {},
                "bolt12": {},
                "partid": {},
                "message": {
                  "type": "string",
                  "description": [
                    "Monitor status with listpays or waitsendpay."
                  ]
                }
              }
            }
          }
        ]
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- 202: an parseable onion",
        "",
        "the error details are decrypted and presented here, if *shared_secrets* was provided and an error was returned by one of the intermediate nodes"
      ],
      "author": [
        "Christian Decker <<decker.christian@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-createonion(7)",
        "lightning-sendpay(7)",
        "lightning-listsendpays(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>",
        "",
        "[bolt04]: https://github.com/lightning/bolts/blob/master/04-onion-routing.md"
      ],
      "examples": [
        {
          "request": {
            "id": "example:sendonion#1",
            "method": "sendonion",
            "params": {
              "onion": "0003ccc1f8876af4810e23bd4cccd8f2f38ee5dc117f527c783fefa4e632f857c98d588d2e3150d16b78f9458777502e4829b490e8a2d560841eb0c2368311bf9bb4e8ded0356badafd915839409ad60866c24dd7580b468c14097575565ca95425b9f44211d9ad0305ddba2391a70892ac8c9fd7c3b67d0fe22faf5a0b6905ee2e22278fe224e89ea72c3fcc598b35afaa255123e61ae7a697703e3bb8aec4d36ea487df6ec27942aadff0527d178c897e75f1ee284995196b5ead963ee9d0df798c8265c00c5c73daac917d298cc17e5d813189321d914c45ef30170c4d617dae12bb3a760d1665705e61bb6c52789e15623cefc68d96b86a6f17159c4a86bb196c9f5e40a0744d08d6da0cfd587717b6d0d074d42ac0893fa6ae1497c84824f1d27670d4e201af5e9e5a3493b603cfc209bb0ee41b573ca647c5b9882272c972cd18f19fd895e8995097d86882a473f4d26118a7ed656c5ea04c2a183b05cc0191d07fab5e78edab4ab8ec58e05e03f32d150449c0c8e3505e46ae58e77c87616144873f72f4571b00ccf8e71bcdf33a7d32345aecb660970fa73c4844ab157aa322f140f5d47b66a0590273728ddb5b8a7f3577cff5a268935b93fe598d6df4413c67c45efa9461abaf3294070a484418aa28c03ac20d08856eb0c74dfca851e8ed110bdcacb2a2fb90954b04e99986fde0678846a709120b5d1eeab9cde8d9f27d77448f4591e00bf30d7580703e6c189c658746cf7a7cc1430ce41f84244612b438c3d895333848e5f55e99b2a9d28860863c11aaa8e3ef01ead7ba1545156c356424c33aeeaa2f1e2c290d1d8dd52cd7b8116159025aba26db6fb81ad7f9cc4554c6f9f13d16defe38918b32d62a0516521934a0009a8d37c9a84689bfd8fc1f0beceb92701dca11175e0099d7541698956ba5d93efff996f538ee47717ae6c5cda98111bc28c822e99cf8957b707de270f447b6e52d30bcf9b8a9befd8663bc54612b543d0e167da67e2f295207b70857d0a7cae8932d905db2f48c873dec20aeafa07e15fa98a088e529424c8b404f03ba0ee78a6639fde5cd37dee42877ff6489ce1de5a8992cae25dd20a6521955c19129fdcc0ea157913373bf47a8018a1dd825a2f8e26194d5008161360ae9b25fc701b2accbe88eb47eee6a50b7ee6d6e169e3905e03ca72e00eb6a51b7ed3d27501715428368662b822e2262749d3e7d3243c4fd3d825b3e72bebdeebf6e035f1ad6634523ab5dc0335611c19c9936d006f2e4cd8818eb4f8b4857c8f35d18a4891e35ff91e3b54b384398574d673fcc8da50b22b8f485a41223c97e3b8ee5b8e5ff9c00a2cbfe7360509d3fee9248b5eaa81bb83da3be45dfa8cbbbf5c52ba8749c9d6261d4239feea1e7ce85ad40ad0c66bbeb1c6898626ae4e710a66f9c39a5ee94581353b46e070cfcff9a14e3f9a6108d55bb92852eb3a50e89b1e45d31b760f2a4e263a6a876ad638b123ffee7a2b0b48e16175e3eb92bfaad4dbe0af8b2bc1c15fec5a9d92d3970c2ffab2ab8fa2c9de0bd276680a4284707cd8543a97bca2394e9514236129f1c50a932f7e9bfb98c2aaa6ffc9a4a30641061246de6edf0f711a8d25d59af42ee4445b22ce2f832f3ece52c18ca62d90c590729e04c47accaec95b556ee2541c84843c54a116f5cc45bc251a8023b695f0bf79c43a97bece8a761d387a466821984fb5ec438af20d14cebb7f0026988c81b5a1b895ef94df61aa509e53083b4306c42132b5ce302fd5a2fbb1cee30a7078ccaa3bdccf781b8c9d6ae016a5f8e5cb13f7ac1f3fd0d74a182c9abea67d346f0dfcfc211aaa7ff47196465398fce3e6e0f3b73a944a7f57a90cc6a8f1bfcd385f8312e23af6f508f4f8a976d750660ac3d63630555a3a2e7fe158a982aaf0278d9f8819e5cb",
              "first_hop": {
                "id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "channel": "109x1x1",
                "direction": 1,
                "amount_msat": 1002,
                "delay": 21,
                "style": "tlv"
              },
              "payment_hash": "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13"
            }
          },
          "response": {
            "message": "Monitor status with listpays or waitsendpay",
            "created_index": 8,
            "id": 8,
            "payment_hash": "e445ebcf339db3cba6184330ccc6e4a41e0bb38d237b93c1d2f71958d5a74e13",
            "groupid": 1,
            "amount_sent_msat": 1002,
            "created_at": 1722303689,
            "status": "pending"
          }
        }
      ]
    },
    "lightning-sendpay.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "sendpay",
      "title": "Low-level command for sending a payment via a route",
      "description": [
        "The **sendpay** RPC command attempts to send funds associated with the given *payment_hash*, along a route to the final destination in the route.",
        "",
        "Generally, a client would call lightning-getroute(7) to resolve a route, then use **sendpay** to send it. If it fails, it would call lightning-getroute(7) again to retry. If the route is empty, a payment-to-self is attempted.",
        "",
        "The response will occur when the payment is on its way to the destination. The **sendpay** RPC command does not wait for definite success or definite failure of the payment (except for already-succeeded payments, or to-self payments). Instead, use the **waitsendpay** RPC command to poll or wait for definite success or definite failure.",
        "",
        "Once a payment has succeeded, calls to **sendpay** with the same *payment_hash* but a different *amount_msat* or destination will fail; this prevents accidental multiple payments. Calls to **sendpay** with the same *payment_hash*, *amount_msat*, and destination as a previous successful payment (even if a different route or *partid*) will return immediately with success."
      ],
      "request": {
        "required": [
          "route",
          "payment_hash"
        ],
        "properties": {
          "route": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "amount_msat",
                "id",
                "delay",
                "channel"
              ],
              "properties": {
                "id": {
                  "type": "pubkey",
                  "description": [
                    "The node at the end of this hop."
                  ]
                },
                "channel": {
                  "type": "short_channel_id",
                  "description": [
                    "The channel joining these nodes."
                  ]
                },
                "delay": {
                  "type": "u32",
                  "description": [
                    "The total CLTV expected by the node at the end of this hop."
                  ]
                },
                "amount_msat": {
                  "type": "msat",
                  "description": [
                    "The amount expected by the node at the end of this hop."
                  ]
                }
              }
            }
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the payment_preimage."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "The label provided when creating the invoice_request."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "Amount must be provided if *partid* is non-zero, or the payment is to-self, otherwise it must be equal to the final amount to the destination. it can be a whole number, or a whole number ending in *msat* or *sat*, or a number with three decimal places ending in *sat*, or a number with 1 to 11 decimal places ending in *btc*."
            ],
            "default": "in millisatoshi precision"
          },
          "bolt11": {
            "type": "string",
            "description": [
              "Bolt11 invoice to pay. If provided, will be returned in *waitsendpay* and *listsendpays* results."
            ]
          },
          "payment_secret": {
            "type": "secret",
            "description": [
              "Value that the final recipient requires to accept the payment, as defined by the `payment_data` field in BOLT 4 and the `s` field in the BOLT 11 invoice format. It is required if *partid* is non-zero."
            ]
          },
          "partid": {
            "type": "u64",
            "description": [
              "Must not be provided for self-payments. If provided and non-zero, allows for multiple parallel partial payments with the same *payment_hash*. The *amount_msat* amount (which must be provided) for each **sendpay** with matching *payment_hash* must be equal, and **sendpay** will fail if there are differing values given."
            ]
          },
          "localinvreqid": {
            "type": "hex",
            "description": [
              "Indicates that this payment is being made for a local invoice_request. This ensures that we only send a payment for a single-use invoice_request once."
            ]
          },
          "groupid": {
            "type": "u64",
            "description": [
              "Allows you to attach a number which appears in **listsendpays** so payments can be identified as part of a logical group. The *pay* plugin uses this to identify one attempt at a MPP payment, for example."
            ]
          },
          "payment_metadata": {
            "added": "v0.11.0",
            "type": "hex",
            "description": [
              "Placed in the final onion hop TLV."
            ]
          },
          "description": {
            "added": "v0.11.0",
            "type": "string",
            "description": [
              "Description used in the invoice."
            ]
          }
        }
      },
      "response": {
        "required": [
          "id",
          "created_index",
          "payment_hash",
          "status",
          "created_at",
          "amount_sent_msat"
        ],
        "properties": {
          "created_index": {
            "added": "v23.11",
            "type": "u64",
            "description": [
              "1-based index indicating order this payment was created in."
            ]
          },
          "updated_index": {
            "added": "v23.11",
            "type": "u64",
            "description": [
              "1-based index indicating order this payment was changed (only present if it has changed since creation)."
            ]
          },
          "id": {
            "type": "u64",
            "description": [
              "Old synonym for created_index."
            ]
          },
          "groupid": {
            "type": "u64",
            "description": [
              "Grouping key to disambiguate multiple attempts to pay an invoice or the same payment_hash."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "complete"
            ],
            "description": [
              "Status of the payment (could be complete if already sent previously)."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "The amount delivered to destination (if known)."
            ]
          },
          "destination": {
            "type": "pubkey",
            "description": [
              "The final destination of the payment if known."
            ]
          },
          "created_at": {
            "type": "u64",
            "description": [
              "The UNIX timestamp showing when this payment was initiated."
            ]
          },
          "completed_at": {
            "type": "u64",
            "description": [
              "The UNIX timestamp showing when this payment was completed."
            ]
          },
          "amount_sent_msat": {
            "type": "msat",
            "description": [
              "The amount sent."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "The *label*, if given to sendpay."
            ]
          },
          "partid": {
            "type": "u64",
            "description": [
              "The *partid*, if given to sendpay."
            ]
          },
          "bolt11": {
            "type": "string",
            "description": [
              "The bolt11 string (if supplied)."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The bolt12 string (if supplied: **experimental-offers** only)."
            ]
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "complete"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [
                "payment_preimage"
              ],
              "properties": {
                "id": {},
                "created_index": {},
                "updated_index": {},
                "groupid": {},
                "payment_hash": {},
                "status": {},
                "msatoshi": {},
                "amount_msat": {},
                "destination": {},
                "created_at": {},
                "completed_at": {},
                "msatoshi_sent": {},
                "amount_sent_msat": {},
                "label": {},
                "partid": {},
                "bolt11": {},
                "bolt12": {},
                "payment_preimage": {
                  "type": "secret",
                  "description": [
                    "The proof of payment: SHA256 of this **payment_hash**."
                  ]
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "pending"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [
                "message"
              ],
              "properties": {
                "id": {},
                "created_index": {},
                "updated_index": {},
                "groupid": {},
                "payment_hash": {},
                "status": {},
                "msatoshi": {},
                "amount_msat": {},
                "destination": {},
                "created_at": {},
                "completed_at": {},
                "msatoshi_sent": {},
                "amount_sent_msat": {},
                "label": {},
                "partid": {},
                "bolt11": {},
                "bolt12": {},
                "message": {
                  "type": "string",
                  "description": [
                    "Monitor status with listpays or waitsendpay."
                  ]
                }
              }
            }
          }
        ]
      },
      "errors": [
        "On error, if the error occurred from a node other than the final destination, the route table will be updated so that lightning-getroute(7) should return an alternate route (if any). An error from the final destination implies the payment should not be retried.",
        "",
        "- -1: Catchall nonspecific error.",
        "- 201: Already paid with this *hash* using different amount or destination.",
        "- 202: Unparseable onion reply. The *data* field of the error will have an *onionreply* field, a hex string representation of the raw onion reply.",
        "- 203: Permanent failure at destination. The *data* field of the error will be routing failure object.",
        "- 204: Failure along route; retry a different route. The *data* field of the error will be routing failure object.",
        "- 212: *localinvreqid* refers to an invalid, or used, local invoice_request.",
        "",
        "A routing failure object has the fields below:",
        "",
        "*erring_index*: The index of the node along the route that reported the error. 0 for the local node, 1 for the first hop, and so on.",
        "*erring_node*: The hex string of the pubkey id of the node that reported the error.",
        "*erring_channel*: The short channel ID of the channel that has the error, or *0:0:0* if the destination node raised the error. In addition *erring_direction* will indicate which direction of the channel caused the failure.",
        "*failcode*: The failure code, as per BOLT #4.",
        "*channel_update*: The hex string of the *channel_update* message received from the remote node. Only present if error is from the remote node and the *failcode* has the UPDATE bit set, as per BOLT #4."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listinvoices(7)",
        "lightning-delinvoice(7)",
        "lightning-getroute(7)",
        "lightning-invoice(7)",
        "lightning-pay(7)",
        "lightning-waitsendpay(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:sendpay#1",
            "method": "sendpay",
            "params": {
              "route": [
                {
                  "id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                  "channel": "109x1x1",
                  "direction": 1,
                  "amount_msat": 10001,
                  "delay": 15,
                  "style": "tlv"
                },
                {
                  "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                  "channel": "111x1x0",
                  "direction": 0,
                  "amount_msat": 10000,
                  "delay": 9,
                  "style": "tlv"
                }
              ],
              "payment_hash": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2",
              "payment_secret": "64733783b118ff27576f72c473c0c52814f1f47c4de41492194ddd7855486024"
            }
          },
          "response": {
            "message": "Monitor status with listpays or waitsendpay",
            "created_index": 2,
            "id": 2,
            "payment_hash": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2",
            "groupid": 1,
            "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
            "amount_msat": 10000,
            "amount_sent_msat": 10001,
            "created_at": 1722303675,
            "status": "pending"
          }
        }
      ]
    },
    "lightning-sendpsbt.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "sendpsbt",
      "title": "Command to finalize, extract and send a partially signed bitcoin transaction (PSBT).",
      "description": [
        "The **sendpsbt** is a low-level RPC command which sends a fully-signed PSBT."
      ],
      "request": {
        "required": [
          "psbt"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "The fully signed psbt to be sent."
            ]
          },
          "reserve": {
            "type": "u32",
            "description": [
              "Number of blocks to increase reservation of any of our inputs by."
            ],
            "default": "72"
          }
        }
      },
      "response": {
        "required": [
          "tx",
          "txid"
        ],
        "properties": {
          "tx": {
            "type": "hex",
            "description": [
              "The raw transaction which was sent."
            ]
          },
          "txid": {
            "type": "txid",
            "description": [
              "The txid of the **tx**."
            ]
          }
        }
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters or some error happened during the command process."
      ],
      "author": [
        "Vincenzo Palazzo <<vincenzo.palazzo@protonmail.com>> wrote the initial version of this man page,",
        "but many others did the hard work of actually implementing this rpc command."
      ],
      "see_also": [
        "lightning-fundpsbt(7)",
        "lightning-signpsbt(7)",
        "lightning-listtransactions(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:sendpsbt#1",
            "method": "sendpsbt",
            "params": {
              "psbt": "cHNidP8BAHsCAAAAApYPhUDCjBy/IhQro1NgHyHktDtz752euhXVr901aH1zAAAAAAD9////pVexPrCyRyESCD3U1cC5oifK1QBxTxBSKMaWE8H/R3UAAAAAAP3///8Buuz6CwAAAAAWABTJCW1D9AjqUmAgJizNrXyFFrkqgQAAAAAAAQCJAgAAAAGdA6aKwu4U7Zes8OwDJHp4bI3maidtrjOK6N85klZucAAAAAAA/f///wKBbNwLAAAAACJRIDXxGE9rRwyd80faYsSyjn7J7hCyILrDrM0iIJ3vADbqQEIPAAAAAAAiACBbjNO5FM9nzdj6YnPJMDU902R2c0+9liECwt9TuQiAzWwAAAABASuBbNwLAAAAACJRIDXxGE9rRwyd80faYsSyjn7J7hCyILrDrM0iIJ3vADbqARNAslo/GrzGxD6jx0S7hhxvKR8Eus+sP130lZLzFdEP0jIHUZnjDgbwVW/xgkL6M6xdWTIft2LwO6Jg/VxrnLUVniEWn8HNAfLSdwuCgeK6vBpMJF7dN7ty0S4gcjpp309fAfYJAMEg7UIAAAAAAAEAcQIAAAAB5PVQktBZBw4nvG06jM4bpxNyROmXxJnOR8qYKNgjGfwAAAAAAP3///8CgIQeAAAAAAAWABSftnv87+5st9tMflXZxr/XSeMdHoxyG+0AAAAAFgAUQudNVnkeDGRH67h8YS0ySo/R6flrAAAAAQEfgIQeAAAAAAAWABSftnv87+5st9tMflXZxr/XSeMdHiICAyjMj8l44gnxaV+ltWVQYdsaqyMRtSQXaUW/EBXvLUuJRzBEAiA9G0zR8z6JjbBAeg4wDezU0rLQB462lpdGQJwqrUxQFwIgL70Z0p7ASr4w+lDjPk0+m6WY5PafSiEiEO4tFuoHsHMBIgYDKMyPyXjiCfFpX6W1ZVBh2xqrIxG1JBdpRb8QFe8tS4kIn7Z7/AAAAAAAAA=="
            }
          },
          "response": {
            "tx": "02000000000102960f8540c28c1cbf22142ba353601f21e4b43b73ef9d9eba15d5afdd35687d730000000000fdffffffa557b13eb0b2472112083dd4d5c0b9a227cad500714f105228c69613c1ff47750000000000fdffffff01baecfa0b00000000160014c9096d43f408ea526020262ccdad7c8516b92a810140b25a3f1abcc6c43ea3c744bb861c6f291f04bacfac3f5df49592f315d10fd232075199e30e06f0556ff18242fa33ac5d59321fb762f03ba260fd5c6b9cb5159e0247304402203d1b4cd1f33e898db0407a0e300decd4d2b2d0078eb6969746409c2aad4c501702202fbd19d29ec04abe30fa50e33e4d3e9ba598e4f69f4a212210ee2d16ea07b07301210328cc8fc978e209f1695fa5b5655061db1aab2311b524176945bf1015ef2d4b8900000000",
            "txid": "8861058bff4b5310d587d7a8b6936886a290b0bdaf2485b53c79972a32daa758"
          }
        }
      ]
    },
    "lightning-setchannel.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "setchannel",
      "title": "Command for configuring fees / htlc range advertized for a channel",
      "description": [
        "The **setchannel** RPC command sets channel specific routing fees, and `htlc_minimum_msat` or `htlc_maximum_msat` as defined in BOLT #7. The channel has to be in normal or awaiting state. This can be checked by **listpeers** reporting a *state* of CHANNELD_NORMAL or CHANNELD_AWAITING_LOCKIN for the channel.",
        "",
        "These changes (for a public channel) will be broadcast to the rest of the network (though many nodes limit the rate of such changes they will accept: we allow 2 a day, with a few extra occasionally)."
      ],
      "request": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": [
              "Should contain a scid (short channel ID), channel id or peerid (pubkey) of the channel to be modified. If *id* is set to `all`, the updates are applied to all channels in states CHANNELD_NORMAL CHANNELD_AWAITING_LOCKIN or DUALOPEND_AWAITING_LOCKIN. If *id* is a peerid, all channels with the +peer in those states are changed."
            ]
          },
          "feebase": {
            "type": "msat",
            "description": [
              "Value in millisatoshi that is added as base fee to any routed payment: if omitted, it is unchanged. It can be a whole number, or a whole number ending in *msat* or *sat*, or a number with three decimal places ending in *sat*, or a number with 1 to 11 decimal places ending in *btc*."
            ]
          },
          "feeppm": {
            "type": "u32",
            "description": [
              "Value that is added proportionally per-millionths to any routed payment volume in satoshi. For example, if ppm is 1,000 and 1,000,000 satoshi is being routed through the channel, an proportional fee of 1,000 satoshi is added, resulting in a 0.1% fee."
            ]
          },
          "htlcmin": {
            "type": "msat",
            "description": [
              "Value that limits how small an HTLC we will forward: if omitted, it is unchanged. It can be a whole number, or a whole number ending in *msat* or *sat*, or a number with three decimal places ending in *sat*, or a number with 1 to 11 decimal places ending in *btc*. Note that the peer also enforces a minimum for the channel: setting it below that will simply set it to that value with a warning. Also note that *htlcmin* only applies to forwarded HTLCs: we can still send smaller payments ourselves."
            ],
            "default": "no lower limit"
          },
          "htlcmax": {
            "type": "msat",
            "description": [
              "Value that limits how large an HTLC we will forward: if omitted, it is unchanged. It can be a whole number, or a whole number ending in *msat* or *sat*, or a number with three decimal places ending in *sat*, or a number with 1 to 11 decimal places ending in *btc*. Note that *htlcmax* only applies to forwarded HTLCs: we can still send larger payments ourselves."
            ],
            "default": "no effective limit"
          },
          "enforcedelay": {
            "type": "u32",
            "description": [
              "Number of seconds to delay before enforcing the new fees/htlc max. This gives the network a chance to catch up with the new rates and avoids rejecting HTLCs before they do. This only has an effect if rates are increased (we always allow users to overpay fees) or *htlcmax* is decreased, and only applied to a single rate increase per channel (we don't remember an arbitrary number of prior feerates) and if the node is restarted the updated configuration is enforced immediately."
            ],
            "default": "600, which is ten minutes"
          },
          "ignorefeelimits": {
            "added": "v23.08",
            "type": "boolean",
            "description": [
              "If set to True means to allow the peer to set the commitment transaction fees (or closing transaction fees) to any value they want. This is dangerous: they could set an exorbitant fee (so HTLCs are unenforcable), or a tiny fee (so that commitment transactions cannot be relayed), but avoids channel breakage in case of feerate disagreements. (Note: the global `ignore_fee_limits` setting overrides this)."
            ]
          }
        }
      },
      "response": {
        "required": [
          "channels"
        ],
        "properties": {
          "channels": {
            "type": "array",
            "description": [
              "Channel(s) set, and their resulting configuration."
            ],
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "peer_id",
                "channel_id",
                "fee_base_msat",
                "fee_proportional_millionths",
                "minimum_htlc_out_msat",
                "maximum_htlc_out_msat",
                "ignore_fee_limits"
              ],
              "properties": {
                "peer_id": {
                  "type": "pubkey",
                  "description": [
                    "The node_id of the peer."
                  ]
                },
                "channel_id": {
                  "type": "hash",
                  "description": [
                    "The channel_id of the channel."
                  ]
                },
                "short_channel_id": {
                  "type": "short_channel_id",
                  "description": [
                    "The short_channel_id (if locked in)."
                  ]
                },
                "fee_base_msat": {
                  "type": "msat",
                  "description": [
                    "The resulting feebase (this is the BOLT #7 name)."
                  ]
                },
                "fee_proportional_millionths": {
                  "type": "u32",
                  "description": [
                    "The resulting feeppm (this is the BOLT #7 name)."
                  ]
                },
                "ignore_fee_limits": {
                  "type": "boolean",
                  "added": "v23.08",
                  "description": [
                    "If we are now allowing peer to set feerate on commitment transaction without restriction."
                  ]
                },
                "minimum_htlc_out_msat": {
                  "type": "msat",
                  "description": [
                    "The resulting htlcmin we will advertize (the BOLT #7 name is htlc_minimum_msat)."
                  ]
                },
                "warning_htlcmin_too_low": {
                  "type": "string",
                  "description": [
                    "The requested htlcmin was too low for this peer, so we set it to the minimum they will allow."
                  ]
                },
                "maximum_htlc_out_msat": {
                  "type": "msat",
                  "description": [
                    "The resulting htlcmax we will advertize (the BOLT #7 name is htlc_maximum_msat)."
                  ]
                },
                "warning_htlcmax_too_high": {
                  "type": "string",
                  "description": [
                    "The requested htlcmax was greater than the channel capacity, so we set it to the channel capacity."
                  ]
                }
              }
            }
          }
        }
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- -1: Channel is in incorrect state, i.e. Catchall nonspecific error.",
        "- -32602: JSONRPC2_INVALID_PARAMS, i.e. Given id is not a channel ID or short channel ID."
      ],
      "author": [
        "Michael Schmoock <<michael@schmoock.net>> is the author of this feature."
      ],
      "see_also": [
        "lightningd-config(5)",
        "lightning-fundchannel(7)",
        "lightning-listchannels(7)",
        "lightning-listpeers(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:setchannel#1",
            "method": "setchannel",
            "params": {
              "id": "123x1x1",
              "ignorefeelimits": true
            }
          },
          "response": {
            "channels": [
              {
                "peer_id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                "channel_id": "ecabe6d86abdd57565b3fb7e7c5d724e60ca1a07633951769b5dbfa48dc884b3",
                "short_channel_id": "123x1x1",
                "fee_base_msat": 1,
                "fee_proportional_millionths": 10,
                "minimum_htlc_out_msat": 0,
                "maximum_htlc_out_msat": 990000000,
                "ignore_fee_limits": true
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:setchannel#2",
            "method": "setchannel",
            "params": {
              "id": "115x1x0",
              "feebase": 4000,
              "feeppm": 300,
              "enforcedelay": 0
            }
          },
          "response": {
            "channels": [
              {
                "peer_id": "032cf15d1ad9c4a08d26eab1918f732d8ef8fdc6abb9640bf3db174372c491304e",
                "channel_id": "f8fc83a432cbfb2fffe222cc06727fdd977b5dd10ebd6707158e799e6f522d9f",
                "short_channel_id": "115x1x0",
                "fee_base_msat": 4000,
                "fee_proportional_millionths": 300,
                "minimum_htlc_out_msat": 0,
                "maximum_htlc_out_msat": 990000000,
                "ignore_fee_limits": false
              }
            ]
          }
        }
      ]
    },
    "lightning-setconfig.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.08",
      "rpc": "setconfig",
      "title": "Dynamically change some config options",
      "description": [
        "The **setconfig** RPC command allows you set the (dynamic) configuration option named by `config`: options which take a value (as separate from simple flag options) also need a `val` parameter.",
        "",
        "This new value will *also* be written at the end of the config file, for persistence across restarts (and any old value commented out).",
        "",
        "You can see what options are dynamically adjustable using lightning- listconfigs(7). Note that you can also adjust existing options for stopped plugins; they will have an effect when the plugin is restarted."
      ],
      "request": {
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "string",
            "description": [
              "Name of the config variable which should be set to the value of the variable."
            ]
          },
          "val": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              }
            ],
            "description": [
              "Value of the config variable to be set or updated."
            ]
          }
        }
      },
      "response": {
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "description": [
              "Config settings after completion."
            ],
            "additionalProperties": false,
            "required": [
              "config",
              "source",
              "dynamic"
            ],
            "properties": {
              "config": {
                "type": "string",
                "description": [
                  "Name of the config variable which was set."
                ]
              },
              "source": {
                "type": "string",
                "description": [
                  "Source of configuration setting (`file`:`linenum`)."
                ]
              },
              "plugin": {
                "type": "string",
                "description": [
                  "The plugin this configuration setting is for."
                ]
              },
              "dynamic": {
                "type": "boolean",
                "enum": [
                  true
                ],
                "description": [
                  "Whether this option is settable via setconfig."
                ]
              },
              "set": {
                "type": "boolean",
                "description": [
                  "For simple flag options."
                ]
              },
              "value_str": {
                "type": "string",
                "description": [
                  "For string options."
                ]
              },
              "value_msat": {
                "type": "msat",
                "description": [
                  "For msat options."
                ]
              },
              "value_int": {
                "type": "integer",
                "description": [
                  "For integer options."
                ]
              },
              "value_bool": {
                "type": "boolean",
                "description": [
                  "For boolean options."
                ]
              }
            }
          }
        }
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- -32602: JSONRPC2_INVALID_PARAMS, i.e. the parameter is not dynamic, or the val was invalid."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible for this feature."
      ],
      "see_also": [
        "lightningd-config(5)",
        "lightning-listconfigs(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:setconfig#1",
            "method": "setconfig",
            "params": [
              "autoclean-expiredinvoices-age",
              300
            ]
          },
          "response": {
            "config": {
              "config": "autoclean-expiredinvoices-age",
              "value_int": 300,
              "source": "/tmp/.lightning/regtest/config:2",
              "plugin": "/root/lightning/plugins/autoclean",
              "dynamic": true
            }
          }
        },
        {
          "request": {
            "id": "example:setconfig#2",
            "method": "setconfig",
            "params": {
              "config": "min-capacity-sat",
              "val": 500000
            }
          },
          "response": {
            "config": {
              "config": "min-capacity-sat",
              "value_int": 500000,
              "source": "/tmp/.lightning/regtest/config:4",
              "dynamic": true
            }
          }
        }
      ]
    },
    "lightning-setpsbtversion.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "setpsbtversion",
      "title": "Command for setting PSBT version",
      "description": [
        "The **setpsbtversion** RPC command converts the provided PSBT to the given version, and returns the base64 result of the conversion. Returns an error if version is invalid."
      ],
      "request": {
        "required": [
          "psbt",
          "version"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "The PSBT to change versions."
            ]
          },
          "version": {
            "type": "u32",
            "description": [
              "The version to set."
            ]
          }
        }
      },
      "response": {
        "required": [
          "psbt"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "A converted PSBT of the requested version."
            ]
          }
        }
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- -32602: Parameter missed or malformed."
      ],
      "author": [
        "Gregory Sanders <<gsanders87@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-fundpsbt(7)",
        "lightning-utxopsbt(7)",
        "lightning-signpsbt(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:setpsbtversion#1",
            "method": "setpsbtversion",
            "params": {
              "psbt": "cHNidP8BAgQCAAAAAQMEbwAAAAEEAQABBQEBAQYBAwH7BAIAAAAAAQMIQEIPAAAAAAABBCJRIO7yw3zIUblRUcdhCLSjdFxJsYHu2s0Y29bT0bGAGdcbAA==",
              "version": 0
            }
          },
          "response": {
            "psbt": "cHNidP8BADUCAAAAAAFAQg8AAAAAACJRIO7yw3zIUblRUcdhCLSjdFxJsYHu2s0Y29bT0bGAGdcbbwAAAAAA"
          }
        },
        {
          "request": {
            "id": "example:setpsbtversion#2",
            "method": "setpsbtversion",
            "params": [
              "cHNidP8BAgQCAAAAAQMEbwAAAAEEAQABBQEDAQYBAwH7BAIAAAAAAQMIQEIPAAAAAAABBCJRIO7yw3zIUblRUcdhCLSjdFxJsYHu2s0Y29bT0bGAGdcbAAEDCNXcMgAAAAAAAQQiUSA2cYCeVGcxdSZII2urHpalr5osmF2lPbYRaw1nKyPcmQABAwjV3DIAAAAAAAEEIlEgoqAceWUonu5Wtc/N25hWxw+kdsJk0h9xHGppr3dq5AMA",
              2
            ]
          },
          "response": {
            "psbt": "cHNidP8BAgQCAAAAAQMEbwAAAAEEAQABBQEDAQYBAwH7BAIAAAAAAQMIQEIPAAAAAAABBCJRIO7yw3zIUblRUcdhCLSjdFxJsYHu2s0Y29bT0bGAGdcbAAEDCNXcMgAAAAAAAQQiUSA2cYCeVGcxdSZII2urHpalr5osmF2lPbYRaw1nKyPcmQABAwjV3DIAAAAAAAEEIlEgoqAceWUonu5Wtc/N25hWxw+kdsJk0h9xHGppr3dq5AMA"
          }
        }
      ]
    },
    "lightning-showrunes.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.08",
      "rpc": "showrunes",
      "title": "Command to list previously generated runes",
      "description": [
        "The **showrunes** RPC command either lists runes that we stored as we generate them (see lightning-createrune(7)) or decodes the rune given on the command line."
      ],
      "request": {
        "required": [],
        "properties": {
          "rune": {
            "type": "string",
            "description": [
              "If specified, only details of that rune will be returned."
            ]
          }
        }
      },
      "response": {
        "required": [
          "runes"
        ],
        "properties": {
          "runes": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "rune",
                "unique_id",
                "restrictions",
                "restrictions_as_english"
              ],
              "properties": {
                "rune": {
                  "type": "string",
                  "description": [
                    "Base64 encoded rune."
                  ]
                },
                "unique_id": {
                  "type": "string",
                  "description": [
                    "Unique id assigned when the rune was generated; this is always a u64 for commando runes."
                  ]
                },
                "restrictions": {
                  "type": "array",
                  "description": [
                    "The restrictions on what commands this rune can authorize."
                  ],
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "alternatives",
                      "english"
                    ],
                    "properties": {
                      "alternatives": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "fieldname",
                            "value",
                            "condition",
                            "english"
                          ],
                          "properties": {
                            "fieldname": {
                              "type": "string",
                              "description": [
                                "The field this restriction applies to; see commando-rune(7)."
                              ]
                            },
                            "value": {
                              "type": "string",
                              "description": [
                                "The value accepted for this field."
                              ]
                            },
                            "condition": {
                              "type": "string",
                              "description": [
                                "The way to compare fieldname and value."
                              ]
                            },
                            "english": {
                              "type": "string",
                              "description": [
                                "English readable description of this alternative."
                              ]
                            }
                          }
                        }
                      },
                      "english": {
                        "type": "string",
                        "description": [
                          "English readable summary of alternatives above."
                        ]
                      }
                    }
                  }
                },
                "restrictions_as_english": {
                  "type": "string",
                  "description": [
                    "English readable description of the restrictions array above."
                  ]
                },
                "stored": {
                  "type": "boolean",
                  "enum": [
                    false
                  ],
                  "description": [
                    "This is false if the rune does not appear in our datastore (only possible when `rune` is specified)."
                  ]
                },
                "blacklisted": {
                  "type": "boolean",
                  "enum": [
                    true
                  ],
                  "description": [
                    "The rune has been blacklisted; see commando-blacklist(7)."
                  ]
                },
                "last_used": {
                  "type": "number",
                  "description": [
                    "The last time this rune was successfully used."
                  ],
                  "added": "v23.11"
                },
                "our_rune": {
                  "type": "boolean",
                  "enum": [
                    false
                  ],
                  "description": [
                    "This is not a rune for this node (only possible when `rune` is specified)."
                  ]
                }
              }
            }
          }
        }
      },
      "author": [
        "Shahana Farooqui <<sfarooqui@blockstream.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-commando-showrunes(7)",
        "lightning-blacklistrune(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:showrunes#1",
            "method": "showrunes",
            "params": {
              "rune": "zFMd1fjhrAYxUeFA54TjloZqOt8JrA_i_nYwIgXkag49MA=="
            }
          },
          "response": {
            "runes": [
              {
                "rune": "zFMd1fjhrAYxUeFA54TjloZqOt8JrA_i_nYwIgXkag49MA==",
                "last_used": 1722303715.068215,
                "unique_id": "0",
                "restrictions": [],
                "restrictions_as_english": ""
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:showrunes#2",
            "method": "showrunes",
            "params": {}
          },
          "response": {
            "runes": [
              {
                "rune": "zFMd1fjhrAYxUeFA54TjloZqOt8JrA_i_nYwIgXkag49MA==",
                "last_used": 1722303715.068215,
                "unique_id": "0",
                "restrictions": [],
                "restrictions_as_english": ""
              },
              {
                "rune": "RXgu0DD_i0wSPEZkIDyZIWL0bSAGdhvJ_GHOQdTg04A9MSZpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1NyZtZXRob2Q9bGlzdHBlZXJz",
                "last_used": 1722303714.9302285,
                "unique_id": "1",
                "restrictions": [
                  {
                    "alternatives": [
                      {
                        "fieldname": "id",
                        "value": "0266e4598d1d3c415f57",
                        "condition": "^",
                        "english": "id starts with 0266e4598d1d3c415f57"
                      }
                    ],
                    "english": "id starts with 0266e4598d1d3c415f57"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "method",
                        "value": "listpeers",
                        "condition": "=",
                        "english": "method equal to listpeers"
                      }
                    ],
                    "english": "method equal to listpeers"
                  }
                ],
                "restrictions_as_english": "id starts with 0266e4598d1d3c415f57 AND method equal to listpeers"
              },
              {
                "rune": "QUJEYMLGgiaJvMDv_MhR2hiMKIBTbq-PrL-KxcIlirQ9MiZtZXRob2Q9cGF5JnBuYW1lYW1vdW50bXNhdDwxMDAwMA==",
                "last_used": 1722303715.1267006,
                "unique_id": "2",
                "restrictions": [
                  {
                    "alternatives": [
                      {
                        "fieldname": "method",
                        "value": "pay",
                        "condition": "=",
                        "english": "method equal to pay"
                      }
                    ],
                    "english": "method equal to pay"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "pnameamountmsat",
                        "value": "10000",
                        "condition": "<",
                        "english": "pnameamountmsat < 10000"
                      }
                    ],
                    "english": "pnameamountmsat < 10000"
                  }
                ],
                "restrictions_as_english": "method equal to pay AND pnameamountmsat < 10000"
              },
              {
                "rune": "jEx3l0c7NMZPSDYT7xnXXvNA83z5PDNBHRQTIk1BwNw9MyZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTh8cGFycjA9MDI2NmU0NTk4ZDFkM2M0MTVmNTcyYTg0ODg4MzBiNjBmN2U3NDRlZDkyMzVlYjBiMWJhOTMyODNiMzE1YzAzNTE4",
                "unique_id": "3",
                "restrictions": [
                  {
                    "alternatives": [
                      {
                        "fieldname": "id",
                        "value": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                        "condition": "=",
                        "english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                      }
                    ],
                    "english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "method",
                        "value": "listpeers",
                        "condition": "=",
                        "english": "method equal to listpeers"
                      }
                    ],
                    "english": "method equal to listpeers"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "pnum",
                        "value": "1",
                        "condition": "=",
                        "english": "pnum equal to 1"
                      }
                    ],
                    "english": "pnum equal to 1"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "pnameid",
                        "value": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                        "condition": "=",
                        "english": "pnameid equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                      },
                      {
                        "fieldname": "parr0",
                        "value": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                        "condition": "=",
                        "english": "parr0 equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                      }
                    ],
                    "english": "pnameid equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518 OR parr0 equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                  }
                ],
                "restrictions_as_english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518 AND method equal to listpeers AND pnum equal to 1 AND pnameid equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518 OR parr0 equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
              },
              {
                "rune": "8_CRIJ4arWAz72A4ILOZ46MESSJtQQQ9iQZjU28qulA9NCZpZD0wMjY2ZTQ1OThkMWQzYzQxNWY1NzJhODQ4ODgzMGI2MGY3ZTc0NGVkOTIzNWViMGIxYmE5MzI4M2IzMTVjMDM1MTgmbWV0aG9kPWxpc3RwZWVycyZwbnVtPTEmcG5hbWVpZF4wMjY2ZTQ1OThkMWQzYzQxNWY1N3xwYXJyMF4wMjY2ZTQ1OThkMWQzYzQxNWY1Nw==",
                "unique_id": "4",
                "restrictions": [
                  {
                    "alternatives": [
                      {
                        "fieldname": "id",
                        "value": "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                        "condition": "=",
                        "english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                      }
                    ],
                    "english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "method",
                        "value": "listpeers",
                        "condition": "=",
                        "english": "method equal to listpeers"
                      }
                    ],
                    "english": "method equal to listpeers"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "pnum",
                        "value": "1",
                        "condition": "=",
                        "english": "pnum equal to 1"
                      }
                    ],
                    "english": "pnum equal to 1"
                  },
                  {
                    "alternatives": [
                      {
                        "fieldname": "pnameid",
                        "value": "0266e4598d1d3c415f57",
                        "condition": "^",
                        "english": "pnameid starts with 0266e4598d1d3c415f57"
                      },
                      {
                        "fieldname": "parr0",
                        "value": "0266e4598d1d3c415f57",
                        "condition": "^",
                        "english": "parr0 starts with 0266e4598d1d3c415f57"
                      }
                    ],
                    "english": "pnameid starts with 0266e4598d1d3c415f57 OR parr0 starts with 0266e4598d1d3c415f57"
                  }
                ],
                "restrictions_as_english": "id equal to 0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518 AND method equal to listpeers AND pnum equal to 1 AND pnameid starts with 0266e4598d1d3c415f57 OR parr0 starts with 0266e4598d1d3c415f57"
              }
            ]
          }
        }
      ]
    },
    "lightning-signinvoice.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.02",
      "rpc": "signinvoice",
      "title": "Low-level invoice signing",
      "description": [
        "The **signinvoice** RPC command signs an invoice. Unlike **createinvoice** it does not save the invoice into the database and thus does not require the preimage."
      ],
      "request": {
        "required": [
          "invstring"
        ],
        "properties": {
          "invstring": {
            "type": "string",
            "description": [
              "Bolt11 form, but the final signature is ignored. Minimal sanity checks are done."
            ]
          }
        }
      },
      "response": {
        "required": [
          "bolt11"
        ],
        "properties": {
          "bolt11": {
            "type": "string",
            "description": [
              "The bolt11 string."
            ]
          }
        }
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- -1: Catchall nonspecific error."
      ],
      "author": [
        "Carl Dong <<contact@carldong.me>> is mainly responsible."
      ],
      "see_also": [
        "lightning-createinvoice(7)",
        "lightning-invoice(7)",
        "lightning-listinvoices(7)",
        "lightning-delinvoice(7)",
        "lightning-getroute(7)",
        "lightning-sendpay(7)",
        "lightning-offer(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:signinvoice#1",
            "method": "signinvoice",
            "params": {
              "invstring": "lnbcrt10n1pn2s38psp5qnpucxgdnkrqur47x6vtxdk7xpzy3lf47kjqehm6wnuadj9rt86qpp5qg2ltzlhu2yn08f99t9zz6fjzhfmajg8h4eum43zg3gr0gdeamcsdqlv3jhxcmjd9c8g6t0dcsxjmnktakrzvsxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqd5qqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqg2kj0ma6weclle29pwpsdvnwa4r4yhw38wvly80mtysjf463r5y428k23dkp8ty0fugtzyjpcjsy0w7hhfmyzkwrlve93cr8jnm5sdgqzv7m0x"
            }
          },
          "response": {
            "bolt11": "lnbcrt10n1pn2s38psp5qnpucxgdnkrqur47x6vtxdk7xpzy3lf47kjqehm6wnuadj9rt86qpp5qg2ltzlhu2yn08f99t9zz6fjzhfmajg8h4eum43zg3gr0gdeamcsdqlv3jhxcmjd9c8g6t0dcsxjmnktakrzvsxqyjw5qcqp9rzjqgkjyd3q5dv6gllh77kygly9c3kfy0d9xwyjyxsq2nq3c83u5vw4jqqqd5qqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqq757xfxhd6hpctdfsq6vr2pltjvdv06t0z200hk0qslcydpf0pthmnzhu404w4qv89d25zv3smtsnyvqsaw6tf6tcl0lles6n29qh9gpyd3ml0"
          }
        },
        {
          "request": {
            "id": "example:signinvoice#2",
            "method": "signinvoice",
            "params": [
              "lnbcrt1250n1pn2s38psp5u22hlvy5mk7keq57m4fatz7aqnmh4whcuk45npdexrw4m5athcvqpp5ps4h5lt8waz5pprvad3skzssnksl2wxng985rcsuedp8teh29rkqdqlv3jhxcmjd9c8g6t0dcsxjmnktakrydscqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqyljtru0gcvqh7k5l9u8ulcuxw8fwa9qycyd32hl7wwdpjtlefgrpyjch6aprcdah2pthx3pku3y7c6dzluzjjy9c32cs3m5hqq6ww3sp0j4tr8"
            ]
          },
          "response": {
            "bolt11": "lnbcrt1250n1pn2s38psp5u22hlvy5mk7keq57m4fatz7aqnmh4whcuk45npdexrw4m5athcvqpp5ps4h5lt8waz5pprvad3skzssnksl2wxng985rcsuedp8teh29rkqdqlv3jhxcmjd9c8g6t0dcsxjmnktakrydscqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgq303kchnu5dvmrjam0m2yapk4d8vyx2uud3z0cpwsxern0d6f5sxqcg4rf05qczp5ncrpq4e6fsth28fxegv5gx9y7kt9f6tfhgw9dfqqckwpfv"
          }
        }
      ]
    },
    "lightning-signmessage.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "signmessage",
      "title": "Command to create a signature from this node",
      "description": [
        "The **signmessage** RPC command creates a digital signature of *message* using this node's secret key. A receiver who knows your node's *id* and the *message* can be sure that the resulting signature could only be created by something with access to this node's secret key."
      ],
      "request": {
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": [
              "Less than 65536 characters long message to be signed by the node."
            ]
          }
        }
      },
      "response": {
        "required": [
          "signature",
          "recid",
          "zbase"
        ],
        "properties": {
          "signature": {
            "type": "hex",
            "description": [
              "The signature."
            ],
            "minLength": 128,
            "maxLength": 128
          },
          "recid": {
            "type": "hex",
            "description": [
              "The recovery id (0, 1, 2 or 3)."
            ],
            "minLength": 2,
            "maxLength": 2
          },
          "zbase": {
            "type": "string",
            "description": [
              "*signature* and *recid* encoded in a style compatible with **lnd**'s [SignMessageRequest](https://api.lightning.community/#grpc-request- signmessagerequest)."
            ]
          }
        }
      },
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-checkmessage(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>",
        "",
        "[SignMessageRequest](https://api.lightning.community/#grpc-request-signmessagerequest)"
      ],
      "examples": [
        {
          "request": {
            "id": "example:signmessage#1",
            "method": "signmessage",
            "params": {
              "message": "this is a test!"
            }
          },
          "response": {
            "signature": "9ea05929890e40489edbd5fe0552d22bcffe00bbd29da4fcf93ed5d8f1973e421509071a64935231a126637e3615225ddda86d2d0926ae537d9c3be149f9b21f",
            "recid": "00",
            "zbase": "d6xkysjjtr8ry1r65xk9hbk14eih99oyzxjj5j8h9r9pms8t1h9rrfejyhpgjr41ggo1ca56gak1rzq7ibs14njgi3jz58b5hfr9uco9"
          }
        },
        {
          "request": {
            "id": "example:signmessage#2",
            "method": "signmessage",
            "params": {
              "message": "message for you"
            }
          },
          "response": {
            "signature": "8149401781108c1c2fda12d91969bfe2306afe06c387394d47a83a85a14702a16b6fcd0060693da436ff1c2b25cc470d7db68fe45d833733d8dca660a3f4d67d",
            "recid": "00",
            "zbase": "d6yw1oyzoreea8bx5ejp1gmjz9tdy4z6y5baqqkpe6wdibpbehbkn45x3wygy4j7wo5x68bmrzgrqdm7s486ezcdgh37tzfgcnt9jiu7"
          }
        }
      ]
    },
    "lightning-signpsbt.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "signpsbt",
      "title": "Command to sign a wallet's inputs on a provided bitcoin transaction (PSBT).",
      "description": [
        "**signpsbt** is a low-level RPC command which signs a PSBT as defined by BIP-174.",
        "",
        "By default, all known inputs are signed, and others ignored: with *signonly*, only those inputs are signed, and an error is returned if one of them cannot be signed.",
        "",
        "Note that the command will fail if there are no inputs to sign, or if the inputs to be signed were not previously reserved."
      ],
      "request": {
        "required": [
          "psbt"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "The psbt to be signed."
            ]
          },
          "signonly": {
            "type": "array",
            "description": [
              "Input numbers to sign."
            ],
            "items": {
              "type": "u32"
            }
          }
        }
      },
      "response": {
        "required": [
          "signed_psbt"
        ],
        "properties": {
          "signed_psbt": {
            "type": "string",
            "description": [
              "The fully signed PSBT."
            ]
          }
        }
      },
      "errors": [
        "On failure, one of the following error codes may be returned:",
        "",
        "- -32602: Error in given parameters, or there aren't wallet's inputs to sign, or we couldn't sign all of *signonly*, or inputs are not reserved."
      ],
      "author": [
        "Vincenzo Palazzo <<vincenzo.palazzo@protonmail.com>> wrote the initial version of this man page,",
        "but many others did the hard work of actually implementing this rpc command."
      ],
      "see_also": [
        "lightning-fundpsbt(7)",
        "lightning-sendpsbt(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:signpsbt#1",
            "method": "signpsbt",
            "params": {
              "psbt": "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcAQ4gswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEIQCsNB0i02NIAAQMIQVncCwAAAAABBCJRIDvhN+WjzUt2EEWojAco0yQ1GDbwTtWd/aN5uNhGRlK3DPwJbGlnaHRuaW5nAQgwkgFDAVpmeAABAwhAQg8AAAAAAAEEIgAgybxcBjyu+/emx4FEB7Vie0+BqLVuy+kyxoL5y6wNGd8M/AlsaWdodG5pbmcBCI9GsPn+O/M0AA=="
            }
          },
          "response": {
            "signed_psbt": "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcIgICRz15z0oQ57qDTAJqrEPqGLCn+3Xs2lGEv6+oxGYV9rdHMEQCIHlCL2oKhnYn6hhaUG8+V+8D6GHFlI61OM507VB6aBwoAiACA2d5TnCdlJ1j2rF/EIHkxl3W0hBp3QqweO7hEul9aQEiBgJHPXnPShDnuoNMAmqsQ+oYsKf7dezaUYS/r6jEZhX2twgDz+yHAAAAAAEOILMFPNMIQ2TqCB0v5X8scJh4eVEhwcG3I1h2iff11Pu/AQ8EAQAAAAEQBP3///8M/AlsaWdodG5pbmcBCEArDQdItNjSAAEDCEFZ3AsAAAAAAQQiUSA74Tflo81LdhBFqIwHKNMkNRg28E7Vnf2jebjYRkZStyEHE0cioCqqq2UZ2npxQi9Q6DXNZheODM6F4GjHHS3XScEJAG/ctUwEAAAADPwJbGlnaHRuaW5nAQgwkgFDAVpmeAABAwhAQg8AAAAAAAEEIgAgybxcBjyu+/emx4FEB7Vie0+BqLVuy+kyxoL5y6wNGd8M/AlsaWdodG5pbmcBCI9GsPn+O/M0AA=="
          }
        },
        {
          "request": {
            "id": "example:signpsbt#2",
            "method": "signpsbt",
            "params": [
              "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcAQ4gswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEIwRR1uu1r8GoAAQMIgIQeAAAAAAABBCIAIMm8XAY8rvv3pseBRAe1YntPgai1bsvpMsaC+cusDRnfDPwJbGlnaHRuaW5nAQjdRD+FoUsRIAABAwhiDc0LAAAAAAEEIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2gM/AlsaWdodG5pbmcBCPN/JmOnjFW4AA=="
            ]
          },
          "response": {
            "signed_psbt": "cHNidP8BAgQCAAAAAQMEmAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAAAAAAA/f///wJ6H/TSAAAAABYAFJq4HdQFbYJVeXL2XWxTpoyZUCr4AMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnJcAAAABAR8AwusLAAAAABYAFAPP7IcV4fQEo27AEeQjj4Yyn5CcIgICRz15z0oQ57qDTAJqrEPqGLCn+3Xs2lGEv6+oxGYV9rdHMEQCIA8+zCzZ59t2OEFHWefZeTypY89RRQ8dMQCjtGWw6gskAiArELH1MvjW6j1G1CKnLZdV+/oabLDU48ingGSPFDOYxwEiBgJHPXnPShDnuoNMAmqsQ+oYsKf7dezaUYS/r6jEZhX2twgDz+yHAAAAAAEOILMFPNMIQ2TqCB0v5X8scJh4eVEhwcG3I1h2iff11Pu/AQ8EAQAAAAEQBP3///8M/AlsaWdodG5pbmcBCMEUdbrta/BqAAEDCICEHgAAAAAAAQQiACDJvFwGPK7796bHgUQHtWJ7T4GotW7L6TLGgvnLrA0Z3wz8CWxpZ2h0bmluZwEI3UQ/haFLESAAAQMIYg3NCwAAAAABBCJRIMkYPt6RIfPG/RSYgixHp2AnMidmnJCVCIQ7rFu9gT9oIQeffk+gJsmVIxDZ8UKPKgJB9CLvaUr9xqOEogpzJx1hbAkAEioNzwUAAAAM/AlsaWdodG5pbmcBCPN/JmOnjFW4AA=="
          }
        }
      ]
    },
    "lightning-splice_init.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.08",
      "rpc": "splice_init",
      "title": "Command to initiate a channel to a peer",
      "warning": "experimental-splicing only",
      "description": [
        "`splice_init` is a low level RPC command which initiates a channel splice for a given channel specified by `channel_id`."
      ],
      "request": {
        "required": [
          "channel_id",
          "relative_amount"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel id of the channel to be spliced."
            ]
          },
          "relative_amount": {
            "type": "integer",
            "description": [
              "A positive or negative amount of satoshis to add or subtract from the channel. Note you may need to add a double dash (--) after splice_init if using a negative *relative_amount* so it is not interpretted as a command modifier. For example: ```shell lightning-cli splice_init -- $CHANNEL_ID -100000 ```."
            ]
          },
          "initialpsbt": {
            "type": "string",
            "description": [
              "The (optional) base 64 encoded PSBT to begin with. If not specified, one will be generated automatically."
            ]
          },
          "feerate_per_kw": {
            "type": "u32",
            "description": [
              "The miner fee we promise our peer to pay for our side of the splice transaction. It is calculated by `feerate_per_kw` * our_bytes_in_splice_tx / 1000."
            ]
          },
          "force_feerate": {
            "type": "boolean",
            "description": [
              "By default splices will fail if the fee provided looks too high. This is to protect against accidentally setting your fee higher than intended. Set `force_feerate` to true to skip this saftey check."
            ]
          }
        }
      },
      "response": {
        "required": [
          "psbt"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "The (incomplete) PSBT of the splice transaction."
            ]
          }
        }
      },
      "usage": [
        "Here is an example set of splice commands that will splice in 100,000 sats to the first channel that comes out of `listpeerchannels`.",
        "",
        "The example assumes you already have at least one confirmed channel.",
        "",
        "1: Get the channel id of the first channel.",
        "",
        "```shell",
        "CHANNEL_ID=$(echo $(lightning-cli listpeerchannels) | jq -r \".channels[0].channel_id\")",
        "```",
        "2: Get the PSBT from fundpsbt.",
        "",
        "```shell",
        "INITIALPSBT=$(echo $(lightning-cli fundpsbt -k satoshi=100000sat feerate=urgent startweight=800 excess_as_change=true) | jq -r \".psbt\")",
        "```",
        "3: Initiate the splice by passing channel id and initialpsbt received from above steps.",
        "",
        "```shell",
        "PSBT_SPLICE_INIT=$(echo $(lightning-cli splice_init $CHANNEL_ID 100000 $INITIALPSBT) | jq -r \".psbt\")",
        "```",
        "4: Update the PSBT with the splice_update command.",
        "",
        "```shell",
        "PSBT_SPLICE_UPDATE=$(echo $(lightning-cli splice_update $CHANNEL_ID $PSBT_SPLICE_INIT) | jq -r \".psbt\")",
        "```",
        "5: Sign the updated PSBT.",
        "",
        "```shell",
        "SIGNPSBT=$(echo $(lightning-cli signpsbt -k psbt=\"$PSBT_SPLICE_UPDATE\") | jq -r \".signed_psbt\")",
        "```",
        "6: Finally, call splice_signed with channel id and signed PSBT parameters.",
        "",
        "```shell",
        "lightning-cli splice_signed $CHANNEL_ID $SIGNPSBT",
        "```"
      ],
      "author": [
        "Dusty <<@dusty_daemon>> is mainly responsible."
      ],
      "see_also": [
        "lightning-splice_signed(7)",
        "lightning-splice_update(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:splice_init#1",
            "method": "splice_init",
            "params": {
              "channel_id": "f62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c",
              "relative_amount": 100000,
              "initialpsbt": "cHNidP8BAF4CAAAAAfYhJqy04agRPrPOQO2A40pJ1JsDXLnTZBexwTMyJxEsAQAAAAD9////Ac652gsAAAAAIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGCSAAAAAAEAiQIAAAAB+fmfTbLExUIRcwBZD0qxCoNAHIDe7sEfYHguS6nfkn4AAAAAAP3///8CQEIPAAAAAAAiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJloFs3AsAAAAAIlEgW7Q7f9oXFdDdAUFoJaGFIqLX7LFkdbiHgOj6/Bxz74mNAAAAAQErgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviQAA"
            }
          },
          "response": {
            "psbt": "cHNidP8BAgQCAAAAAQMEkgAAAAEEAQIBBQECAQYBAwH7BAIAAAAAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABASuBbNwLAAAAACJRIFu0O3/aFxXQ3QFBaCWhhSKi1+yxZHW4h4Do+vwcc++JAQ4g9iEmrLThqBE+s85A7YDjSknUmwNcudNkF7HBMzInESwBDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEImfI55kWjFBwAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABAStAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWAQVHUiECVw7AtutUVmMwIYOmLqx10I/e62TzE1IZIGXWAcjKUh0hAmaGfDQrglCra07axtuuL95TeCtpzRcTmUn71PIISH/yUq4BDiD2ISastOGoET6zzkDtgONKSdSbA1y502QXscEzMicRLAEPBAAAAAABEAQAAAAADPwJbGlnaHRuaW5nAQijTD4R+uEvhAABAwjOudoLAAAAAAEEIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGAM/AlsaWdodG5pbmcBCI/PBFM/C09aAAEDCAAAAAAAAAAAAQQiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJlgz8CWxpZ2h0bmluZwEIreWkThWNrsoA"
          }
        },
        {
          "request": {
            "id": "example:splice_init#2",
            "method": "splice_init",
            "params": [
              "f62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c",
              -105000,
              "cHNidP8BAgQCAAAAAQMElAAAAAEEAQABBQEBAQYBAwH7BAIAAAAAAQMIoIYBAAAAAAABBCJRIMTSgkFfmoHRjgi2GaGdEWuGVssb9JPl9UC797egWEzaAA=="
            ]
          },
          "response": {
            "psbt": "cHNidP8BAgQCAAAAAQMElAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCyAgAAAAL2ISastOGoET6zzkDtgONKSdSbA1y502QXscEzMicRLAEAAAAA/f////YhJqy04agRPrPOQO2A40pJ1JsDXLnTZBexwTMyJxEsAAAAAAAAAAAAAs652gsAAAAAIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGDgyBAAAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWkgAAAAEBK+DIEAAAAAAAIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYBBUdSIQJXDsC261RWYzAhg6YurHXQj97rZPMTUhkgZdYByMpSHSECZoZ8NCuCUKtrTtrG264v3lN4K2nNFxOZSfvU8ghIf/JSrgEOIJW7FYF67zRaxARLQco1KmOXtFQY8yFwpGexdGngFEX4AQ8EAQAAAAEQBAAAAAAM/AlsaWdodG5pbmcBCF4tdoSn7LwCAAEDCAAAAAAAAAAAAQQiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJlgz8CWxpZ2h0bmluZwEIGQ1Quuj5CvAAAQMIoIYBAAAAAAABBCJRIMTSgkFfmoHRjgi2GaGdEWuGVssb9JPl9UC797egWEzaDPwJbGlnaHRuaW5nAQi4FyJ2dePgEAA="
          }
        }
      ]
    },
    "lightning-splice_signed.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.08",
      "rpc": "splice_signed",
      "title": "Command to initiate a channel to a peer",
      "warning": "experimental-splicing only",
      "description": [
        "`splice_signed` is a low level RPC command which finishes the active channel splice associated with `channel_id`.",
        "",
        "The *psbt* must have all signatures attached to all inputs that you have added to it or it will fail."
      ],
      "request": {
        "required": [
          "channel_id",
          "psbt"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel id of the channel to be spliced."
            ]
          },
          "psbt": {
            "type": "string",
            "description": [
              "The final version of the psbt to complete the splice with."
            ]
          },
          "sign_first": {
            "type": "boolean",
            "description": [
              "A flag that makes our node offer the final splice signature first (defaults to false). When false, the node will calculate who should sign first based off who is adding inputting the least sats to the splice as per spec."
            ]
          }
        }
      },
      "response": {
        "required": [
          "tx",
          "txid"
        ],
        "properties": {
          "tx": {
            "type": "hex",
            "description": [
              "The hex representation of the final transaction that is published."
            ]
          },
          "txid": {
            "type": "txid",
            "description": [
              "The txid is of the final transaction."
            ]
          },
          "outnum": {
            "added": "v24.08",
            "type": "u32",
            "description": [
              "The index of the new funding output."
            ]
          }
        }
      },
      "usage": [
        "In this example we funded the psbt from our lightning node, so we can use the lightning node to sign for its funds.",
        "",
        "```shell",
        "SIGNPSBT=$(echo $(lightning-cli signpsbt $PSBT_SPLICE_UPDATE) | jq -r \".signed_psbt\")",
        "",
        "lightning-cli splice_signed $CHANNEL_ID $SIGNPSBT",
        "```",
        "",
        "Here is an example set of splice commands that will splice in 100,000 sats to the first channel that comes out of `listpeerchannels`.",
        "",
        "The example assumes you already have at least one confirmed channel.",
        "",
        "1: Get the channel id of the first channel.",
        "",
        "```shell",
        "CHANNEL_ID=$(echo $(lightning-cli listpeerchannels) | jq -r \".channels[0].channel_id\")",
        "```",
        "2: Get the PSBT from fundpsbt.",
        "",
        "```shell",
        "INITIALPSBT=$(echo $(lightning-cli fundpsbt -k satoshi=100000sat feerate=urgent startweight=800 excess_as_change=true) | jq -r \".psbt\")",
        "```",
        "3: Initiate the splice by passing channel id and initialpsbt received from above steps.",
        "",
        "```shell",
        "PSBT_SPLICE_INIT=$(echo $(lightning-cli splice_init $CHANNEL_ID 100000 $INITIALPSBT) | jq -r \".psbt\")",
        "```",
        "4: Update PSBTs with the splice_update command.",
        "",
        "```shell",
        "RESULT={\"commitments_secured\":false}",
        "while [[ $(echo $RESULT | jq -r \".commitments_secured\") == \"false\" ]]",
        "do",
        "  PSBT_SPLICE_UPDATE=$(echo $(lightning-cli splice_update $CHANNEL_ID $PSBT_SPLICE_INIT) | jq -r \".psbt\")",
        "  echo $PSBT_SPLICE_UPDATE",
        "done",
        "```",
        "5: Sign the updated PSBT.",
        "",
        "```shell",
        "SIGNPSBT=$(echo $(lightning-cli signpsbt -k psbt=\"$PSBT_SPLICE_UPDATE\") | jq -r \".signed_psbt\")",
        "```",
        "6: Finally, call splice_signed with channel id and signed PSBT parameters.",
        "",
        "```shell",
        "lightning-cli splice_signed $CHANNEL_ID $SIGNPSBT",
        "```"
      ],
      "author": [
        "Dusty <<@dusty_daemon>> is mainly responsible."
      ],
      "see_also": [
        "lightning-splice_init(7)",
        "lightning-splice_update(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:splice_signed#1",
            "method": "splice_signed",
            "params": {
              "channel_id": "f62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c",
              "psbt": "cHNidP8BAgQCAAAAAQMEkgAAAAEEAQIBBQECAQYBAwH7BAIAAAAAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABASuBbNwLAAAAACJRIFu0O3/aFxXQ3QFBaCWhhSKi1+yxZHW4h4Do+vwcc++JAQ4g9iEmrLThqBE+s85A7YDjSknUmwNcudNkF7HBMzInESwBDwQBAAAAARAE/f///wETQKcuGy6h+BqXM6UBaTWpiX1wgQdVDWQdu3poUITFMK4JR7Jjaqy0IsnjfOXmaFZAUIS01Heqa7RbgzHF+5qDI/AhFvTEPeeTGXjlJSGiyNDqLm+lpUC+f31Q3j7YhyeyShxZCQD2T+TUAAAAAAz8CWxpZ2h0bmluZwEImfI55kWjFBwAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABAStAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWAQ4g9iEmrLThqBE+s85A7YDjSknUmwNcudNkF7HBMzInESwBDwQAAAAAARAEAAAAAAz8CWxpZ2h0bmluZwEIo0w+EfrhL4QAAQMIzrnaCwAAAAABBCJRII+O1EYnVX28zEKuAYqcVHSpkShXksTKiRwfWcVmXTRgIQf4l/XsahrhZhlxJbtZN6e213tQQFKbPCTiBwSf3CvcvAkA9Hbq9AUAAAAM/AlsaWdodG5pbmcBCI/PBFM/C09aAAEDCODIEAAAAAAAAQQiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJlgz8CWxpZ2h0bmluZwEIreWkThWNrsoA"
            }
          },
          "response": {
            "tx": "02000000000102f62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c0100000000fdfffffff62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c00000000000000000002ceb9da0b000000002251208f8ed44627557dbccc42ae018a9c5474a991285792c4ca891c1f59c5665d3460e0c810000000000022002093dedd0c265bca868576d3ee2e59eebbb20ebc296e58f7edca93d5eeaec089960140a72e1b2ea1f81a9733a5016935a9897d708107550d641dbb7a685084c530ae0947b2636aacb422c9e37ce5e66856405084b4d477aa6bb45b8331c5fb9a8323f00400473044022024af89f1987cfee986aacf511ed101aa083a8300d4ae4d6b87cd68fef4f722c60220263fd2a4750c7fbb08c433cc0d14e500c714820175454d18b5bef74e01cdc2f9014730440220306e4f6a09653e44f9306c6c47afb58d756d7ba2803f61184db3730ab208a8a302207c40845740e1e791d05957c75eb1b3e62db18fb5ec75039768972dc5efb881710147522102570ec0b6eb545663302183a62eac75d08fdeeb64f31352192065d601c8ca521d210266867c342b8250ab6b4edac6dbae2fde53782b69cd17139949fbd4f208487ff252ae92000000",
            "txid": "f84514e06974b167a47021f31854b497632a35ca414b04c45a34ef7a8115bb95",
            "outnum": 1
          }
        },
        {
          "request": {
            "id": "example:splice_signed#2",
            "method": "splice_signed",
            "params": [
              "f62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c",
              "cHNidP8BAgQCAAAAAQMElAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCyAgAAAAL2ISastOGoET6zzkDtgONKSdSbA1y502QXscEzMicRLAEAAAAA/f////YhJqy04agRPrPOQO2A40pJ1JsDXLnTZBexwTMyJxEsAAAAAAAAAAAAAs652gsAAAAAIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGDgyBAAAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWkgAAAAEBK+DIEAAAAAAAIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYBDiCVuxWBeu80WsQES0HKNSpjl7RUGPMhcKRnsXRp4BRF+AEPBAEAAAABEAQAAAAADPwJbGlnaHRuaW5nAQheLXaEp+y8AgABAwi4Lg8AAAAAAAEEIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYM/AlsaWdodG5pbmcBCBkNULro+QrwAAEDCKCGAQAAAAAAAQQiUSDE0oJBX5qB0Y4IthmhnRFrhlbLG/ST5fVAu/e3oFhM2gz8CWxpZ2h0bmluZwEIuBcidnXj4BAA"
            ]
          },
          "response": {
            "tx": "0200000000010195bb15817aef345ac4044b41ca352a6397b45418f32170a467b17469e01445f801000000000000000002b82e0f000000000022002093dedd0c265bca868576d3ee2e59eebbb20ebc296e58f7edca93d5eeaec08996a086010000000000225120c4d282415f9a81d18e08b619a19d116b8656cb1bf493e5f540bbf7b7a0584cda04004730440220259ff7ffc38775f34aed9be01a57b3002b2cba938e8bdf37ee0d529401ca0ae102206f77ba80e128ed5096679a304078efbff423394f2ffeb286e307fc71af06773d0147304402206e715aa27e9f192a787949dd322dd8c41d69dbf0b134099b942f40f3727ecaa80220154ab1a180d2103884ac73307f6f5faa0e384d7d40dcda44a26c17fdd83a89910147522102570ec0b6eb545663302183a62eac75d08fdeeb64f31352192065d601c8ca521d210266867c342b8250ab6b4edac6dbae2fde53782b69cd17139949fbd4f208487ff252ae94000000",
            "txid": "b81ed02d0235b63cb73d1ee840345a696bc7224ba28be590165aa340bc9e37de",
            "outnum": 0
          }
        }
      ]
    },
    "lightning-splice_update.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.08",
      "rpc": "splice_update",
      "title": "Command to initiate a channel to a peer",
      "warning": "experimental-splicing only",
      "description": [
        "`splice_update` is a low level RPC command which updates the active channel splice associated with `channel_id`.",
        "",
        "`splice_update` must be called repeatidly until the result `commitments_secured` is `true`. Each time `splice_update` is called, it will return a new PSBT that may have changes. In the simplest case, you take the returned `psbt` and pass it back into `splice_update` for the incoming `psbt` field.",
        "",
        "For more complex use cases, you may modify the `psbt` both before calling `splice_update` and inbetween subsequent calls until `commitments_secured` is `true`. After which point you can no long make modifications to the PSBT (beyond signing, which comes later with `splice_signed`).",
        "",
        "Each `splice_update` result may include changes to the PSBT specified by your channel peer. You can review these changes between calls to `splice_update` to perform additional validation or strategy adjustment.",
        "",
        "Typically, `splice_update` will return `commitments_secured` true after one call but you should assume it will need multiple calls."
      ],
      "request": {
        "required": [
          "channel_id",
          "psbt"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel id of the channel to be spliced."
            ]
          },
          "psbt": {
            "type": "string",
            "description": [
              "The base 64 encoded PSBT returned from `splice_init` with any changes added by the user."
            ]
          }
        }
      },
      "response": {
        "required": [
          "psbt",
          "commitments_secured"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "The (incomplete) PSBT of the splice transaction."
            ]
          },
          "commitments_secured": {
            "type": "boolean",
            "description": [
              "Whether or not the commitments were secured."
            ]
          }
        }
      },
      "usage": [
        "Here is an example way to call `splice_update`",
        "",
        "```shell",
        "RESULT={\"commitments_secured\":false}",
        "while [[ $(echo $RESULT | jq -r \".commitments_secured\") == \"false\" ]]",
        "do",
        "  RESULT=$(lightning-cli splice_update $CHANNEL_ID $PSBT)",
        "  PSBT=$(echo $RESULT | jq -r \".psbt\")",
        "  echo $RESULT",
        "done",
        "```",
        "",
        "Before each call to `splice_update` you have the opportunity to make additional changes.",
        "",
        "Here is an example set of splice commands that will splice in 100,000 sats to the first channel that comes out of `listpeerchannels`.",
        "",
        "The example assumes you already have at least one confirmed channel.",
        "",
        "1: Get the channel id of the first channel.",
        "",
        "```shell",
        "CHANNEL_ID=$(echo $(lightning-cli listpeerchannels) | jq -r \".channels[0].channel_id\")",
        "```",
        "2: Get the PSBT from fundpsbt.",
        "",
        "```shell",
        "INITIALPSBT=$(echo $(lightning-cli fundpsbt -k satoshi=100000sat feerate=urgent startweight=800 excess_as_change=true) | jq -r \".psbt\")",
        "```",
        "3: Initiate the splice by passing channel id and initialpsbt received from above steps.",
        "",
        "```shell",
        "PSBT_SPLICE_INIT=$(echo $(lightning-cli splice_init $CHANNEL_ID 100000 $INITIALPSBT) | jq -r \".psbt\")",
        "```",
        "4: Update PSBTs with the splice_update command.",
        "",
        "```shell",
        "RESULT={\"commitments_secured\":false}",
        "while [[ $(echo $RESULT | jq -r \".commitments_secured\") == \"false\" ]]",
        "do",
        "  PSBT_SPLICE_UPDATE=$(echo $(lightning-cli splice_update $CHANNEL_ID $PSBT_SPLICE_INIT) | jq -r \".psbt\")",
        "  echo $PSBT_SPLICE_UPDATE",
        "done",
        "```",
        "5: Sign the updated PSBT.",
        "",
        "```shell",
        "SIGNPSBT=$(echo $(lightning-cli signpsbt -k psbt=\"$PSBT_SPLICE_UPDATE\") | jq -r \".signed_psbt\")",
        "```",
        "6: Finally, call splice_signed with channel id and signed PSBT parameters.",
        "",
        "```shell",
        "lightning-cli splice_signed $CHANNEL_ID $SIGNPSBT",
        "```"
      ],
      "author": [
        "Dusty <<@dusty_daemon>> is mainly responsible."
      ],
      "see_also": [
        "lightning-splice_init(7)",
        "lightning-splice_signed(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:splice_update#1",
            "method": "splice_update",
            "params": {
              "channel_id": "f62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c",
              "psbt": "cHNidP8BAgQCAAAAAQMEkgAAAAEEAQIBBQECAQYBAwH7BAIAAAAAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABASuBbNwLAAAAACJRIFu0O3/aFxXQ3QFBaCWhhSKi1+yxZHW4h4Do+vwcc++JAQ4g9iEmrLThqBE+s85A7YDjSknUmwNcudNkF7HBMzInESwBDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEImfI55kWjFBwAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABAStAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWAQVHUiECVw7AtutUVmMwIYOmLqx10I/e62TzE1IZIGXWAcjKUh0hAmaGfDQrglCra07axtuuL95TeCtpzRcTmUn71PIISH/yUq4BDiD2ISastOGoET6zzkDtgONKSdSbA1y502QXscEzMicRLAEPBAAAAAABEAQAAAAADPwJbGlnaHRuaW5nAQijTD4R+uEvhAABAwjOudoLAAAAAAEEIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGAM/AlsaWdodG5pbmcBCI/PBFM/C09aAAEDCAAAAAAAAAAAAQQiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJlgz8CWxpZ2h0bmluZwEIreWkThWNrsoA"
            }
          },
          "response": {
            "psbt": "cHNidP8BAgQCAAAAAQMEkgAAAAEEAQIBBQECAQYBAwH7BAIAAAAAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABASuBbNwLAAAAACJRIFu0O3/aFxXQ3QFBaCWhhSKi1+yxZHW4h4Do+vwcc++JAQ4g9iEmrLThqBE+s85A7YDjSknUmwNcudNkF7HBMzInESwBDwQBAAAAARAE/f///wz8CWxpZ2h0bmluZwEImfI55kWjFBwAAQCJAgAAAAH5+Z9NssTFQhFzAFkPSrEKg0AcgN7uwR9geC5Lqd+SfgAAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWgWzcCwAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY0AAAABAStAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWAQ4g9iEmrLThqBE+s85A7YDjSknUmwNcudNkF7HBMzInESwBDwQAAAAAARAEAAAAAAz8CWxpZ2h0bmluZwEIo0w+EfrhL4QAAQMIzrnaCwAAAAABBCJRII+O1EYnVX28zEKuAYqcVHSpkShXksTKiRwfWcVmXTRgDPwJbGlnaHRuaW5nAQiPzwRTPwtPWgABAwjgyBAAAAAAAAEEIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYM/AlsaWdodG5pbmcBCK3lpE4Vja7KAA==",
            "commitments_secured": true
          }
        },
        {
          "request": {
            "id": "example:splice_update#2",
            "method": "splice_update",
            "params": [
              "f62126acb4e1a8113eb3ce40ed80e34a49d49b035cb9d36417b1c1333227112c",
              "cHNidP8BAgQCAAAAAQMElAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCyAgAAAAL2ISastOGoET6zzkDtgONKSdSbA1y502QXscEzMicRLAEAAAAA/f////YhJqy04agRPrPOQO2A40pJ1JsDXLnTZBexwTMyJxEsAAAAAAAAAAAAAs652gsAAAAAIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGDgyBAAAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWkgAAAAEBK+DIEAAAAAAAIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYBBUdSIQJXDsC261RWYzAhg6YurHXQj97rZPMTUhkgZdYByMpSHSECZoZ8NCuCUKtrTtrG264v3lN4K2nNFxOZSfvU8ghIf/JSrgEOIJW7FYF67zRaxARLQco1KmOXtFQY8yFwpGexdGngFEX4AQ8EAQAAAAEQBAAAAAAM/AlsaWdodG5pbmcBCF4tdoSn7LwCAAEDCAAAAAAAAAAAAQQiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJlgz8CWxpZ2h0bmluZwEIGQ1Quuj5CvAAAQMIoIYBAAAAAAABBCJRIMTSgkFfmoHRjgi2GaGdEWuGVssb9JPl9UC797egWEzaDPwJbGlnaHRuaW5nAQi4FyJ2dePgEAA="
            ]
          },
          "response": {
            "psbt": "cHNidP8BAgQCAAAAAQMElAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCyAgAAAAL2ISastOGoET6zzkDtgONKSdSbA1y502QXscEzMicRLAEAAAAA/f////YhJqy04agRPrPOQO2A40pJ1JsDXLnTZBexwTMyJxEsAAAAAAAAAAAAAs652gsAAAAAIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGDgyBAAAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWkgAAAAEBK+DIEAAAAAAAIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYBDiCVuxWBeu80WsQES0HKNSpjl7RUGPMhcKRnsXRp4BRF+AEPBAEAAAABEAQAAAAADPwJbGlnaHRuaW5nAQheLXaEp+y8AgABAwi4Lg8AAAAAAAEEIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYM/AlsaWdodG5pbmcBCBkNULro+QrwAAEDCKCGAQAAAAAAAQQiUSDE0oJBX5qB0Y4IthmhnRFrhlbLG/ST5fVAu/e3oFhM2gz8CWxpZ2h0bmluZwEIuBcidnXj4BAA",
            "commitments_secured": true
          }
        }
      ]
    },
    "lightning-sql-template.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.02",
      "rpc": "sql",
      "title": "Command to do complex queries on list commands",
      "description": [
        "The **sql** RPC command runs the given query across a sqlite3 database created from various list commands.",
        "",
        "When tables are accessed, it calls the below commands, so it's no faster than any other local access (though it goes to great length to cache `listnodes` and `listchannels`) which then processes the results.",
        "",
        "It is, however faster for remote access if the result of the query is much smaller than the list commands would be.",
        "",
        "Note that you may need to use `-o` if you use queries which contain `=` (which make lightning-cli(1) default to keyword style)"
      ],
      "request": {
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": [
              "The standard sqlite3 query to run.",
              "Note that queries like \"SELECT *\" are fragile, as columns will change across releases; see lightning-listsqlschemas(7)."
            ]
          }
        }
      },
      "response": {
        "required": [
          "rows"
        ],
        "properties": {
          "rows": {
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "warning_db_failure": {
            "type": "string",
            "description": [
              "A message if the database encounters an error partway through."
            ]
          }
        },
        "pre_return_value_notes": [
          "On success, an object containing **rows** is returned. It is an array. Each array entry contains an array of values, each an integer, real number, string or *null*, depending on the sqlite3 type.",
          "",
          "The object may contain **warning_db_failure** if the database fails partway through its operation."
        ]
      },
      "treatment_of_types": [
        "The following types are supported in schemas, and this shows how they are presented in the database. This matters: a JSON boolean is represented as an integer in the database, so a query will return 0 or 1, not true or false.",
        "",
        "* *hex*. A hex string.",
        "  * JSON: a string",
        "  * sqlite3: BLOB",
        "",
        "* *hash*/*secret*/*pubkey*/*txid*: just like *hex*.",
        "",
        "* *msat*/*integer*/*u64*/*u32*/*u16*/*u8*. Normal numbers.",
        "  * JSON: an unsigned integer",
        "  * sqlite3: INTEGER",
        "",
        "* *boolean*. True or false.",
        "  * JSON: literal **true** or **false**",
        "  * sqlite3: INTEGER",
        "",
        "* *number*. A floating point number (used for times in some places).",
        "  * JSON: number",
        "  * sqlite3: REAL",
        "",
        "* *string*. Text.",
        "  * JSON: string",
        "  * sqlite3: TEXT",
        "",
        "* *short_channel_id*. A short-channel-id of form 1x2x3.",
        "  * JSON: string",
        "  * sqlite3: TEXT"
      ],
      "permitted_sqlite3_functions": [
        "Writing to the database is not permitted, and limits are placed on various other query parameters.",
        "",
        "Additionally, only the following functions are allowed:",
        "",
        "* abs",
        "* avg",
        "* coalesce",
        "* count",
        "* date",
        "* datetime",
        "* julianday",
        "* hex",
        "* quote",
        "* length",
        "* like",
        "* lower",
        "* upper",
        "* min",
        "* max",
        "* strftime",
        "* sum",
        "* time",
        "* timediff",
        "* total",
        "* unixepoch"
      ],
      "tables": [
        "Note that the first column of every table is a unique integer called `rowid`: this is used for related tables to refer to specific rows in their parent. sqlite3 usually has this as an implicit column, but we make it explicit as the implicit version is not allowed to be used as a foreign key.",
        ""
      ],
      "errors": [
        "On failure, an error is returned."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listtransactions(7)",
        "lightning-listchannels(7)",
        "lightning-listpeers(7)",
        "lightning-listnodes(7)",
        "lightning-listforwards(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "description": [
            "A simple peers selection query:"
          ],
          "request": {
            "id": "example:sql#1",
            "method": "sql",
            "params": {
              "query": "SELECT id FROM peers"
            }
          },
          "response": {
            "rows": [
              [
                "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59"
              ]
            ]
          }
        },
        {
          "description": [
            "A statement containing `=` needs `-o` in shell:"
          ],
          "request": {
            "id": "example:sql#2",
            "method": "sql",
            "params": [
              "SELECT nodeid,last_timestamp FROM nodes WHERE last_timestamp>=1669578892"
            ]
          },
          "response": {
            "rows": [
              [
                "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                1722303662
              ],
              [
                "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518",
                1722303662
              ],
              [
                "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
                1722303669
              ],
              [
                "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
                1722303669
              ]
            ]
          }
        },
        {
          "description": [
            "If you want to get specific nodeid values from the nodes table:"
          ],
          "request": {
            "id": "example:sql#3",
            "method": "sql",
            "params": [
              "SELECT nodeid FROM nodes WHERE nodeid != x'035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d'"
            ]
          },
          "response": {
            "rows": [
              [
                "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59"
              ],
              [
                "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
              ],
              [
                "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199"
              ]
            ]
          }
        },
        {
          "description": [
            "If you want to compare a BLOB column, `x'hex'` or `X'hex'` are needed:"
          ],
          "request": {
            "id": "example:sql#4",
            "method": "sql",
            "params": [
              "SELECT nodeid FROM nodes WHERE nodeid IN (x'0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518', x'035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d')"
            ]
          },
          "response": {
            "rows": [
              [
                "0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c03518"
              ],
              [
                "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d"
              ]
            ]
          }
        },
        {
          "description": [
            "Related tables are usually referenced by JOIN:"
          ],
          "request": {
            "id": "example:sql#5",
            "method": "sql",
            "params": [
              "SELECT peer_id, short_channel_id, to_us_msat, total_msat, peerchannels_status.status FROM peerchannels INNER JOIN peerchannels_status ON peerchannels_status.row = peerchannels.rowid"
            ]
          },
          "response": {
            "rows": [
              [
                "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
                "109x1x1",
                490503792,
                1000000000,
                "CHANNELD_NORMAL:Channel ready for use."
              ]
            ]
          }
        },
        {
          "description": [
            "Simple function usage, in this case COUNT. Strings inside arrays need \", and ' to protect them from the shell:"
          ],
          "request": {
            "id": "example:sql#6",
            "method": "sql",
            "params": [
              "SELECT COUNT(*) FROM forwards"
            ]
          },
          "response": {
            "rows": [
              [
                8
              ]
            ]
          }
        },
        {
          "request": {
            "id": "example:sql#7",
            "method": "sql",
            "params": [
              "SELECT * from peerchannels_features"
            ]
          },
          "response": {
            "rows": [
              [
                23,
                18,
                0,
                "option_static_remotekey"
              ],
              [
                24,
                18,
                1,
                "option_anchors_zero_fee_htlc_tx"
              ],
              [
                25,
                18,
                2,
                "option_anchors"
              ]
            ]
          }
        }
      ]
    },
    "lightning-staticbackup.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "staticbackup",
      "title": "Command for deriving getting SCB of all the existing channels",
      "description": [
        "The **staticbackup** RPC command returns an object with SCB of all the channels in an array."
      ],
      "request": {
        "required": [],
        "properties": {}
      },
      "response": {
        "required": [
          "scb"
        ],
        "properties": {
          "scb": {
            "type": "array",
            "items": {
              "type": "hex",
              "description": [
                "SCB of a channel in TLV format."
              ]
            }
          }
        }
      },
      "author": [
        "Aditya <<aditya.sharma20111@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-getsharedsecret(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:staticbackup#1",
            "method": "staticbackup",
            "params": {}
          },
          "response": {
            "scb": [
              "0000000000000006f4e1de801de57374d5737da622611e3a1ad9f16d5df9c30fceecc11ce732eeeb022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d5900017f0000019b987577c455da982b1753df79c56f9d8d2b75d1401e60a5af322ab27b13b20d75970000000100000000000f42400003401000",
              "000000000000000121bd30cac60f477f2c4267220b1702a6ec5780db34f9934fa94b8c0508bf3357035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d00017f000001e610e23fcc9e6306ce636b203217b22409bf9bab2211f9f432de781dedb6377dab5a0000000100000000000f42400003401000",
              "00000000000000027512083907c74ed3a045e9bf772b3d72948eb93daf84a1cee57108800451aaf2035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d00017f000001e610ee1db407eb3e47be3e93e1abc05b13806ee7aef8550c517a4974c72bf91866410000000100000000000f42400003401000",
              "0000000000000003222d999f537e32e9458c5db17a63e012dcced61340de06fda5bc30566270b0aa0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c0351800017f0000019bc5b15661ec5c17599de0858401b72d6be66c34b48a3bb6e679542809f395e6bb2000000000000000000bebb3cb0003401000",
              "0000000000000004a4a379248e49d207cc984646e632e1a31105a85708b9d6d961a5018fdd489f5a0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c0351800017f000001c1ac184e7462759ff83049b19582db049d40076f83a7a70181374ca0ea91644a3d9c0000000200000000000075300003401000",
              "000000000000000509eb55872cd9039ecd08281af756e23b15aad4129fd6a9bcd71b472114ebf43a0266e4598d1d3c415f572a8488830b60f7e744ed9235eb0b1ba93283b315c0351800017f000001c1ace9067c9d125df7150261c80eec3ab9cf8731679752b84f090ab3ea6e36c93d3100000001000000000000c3500003401000"
            ]
          }
        }
      ]
    },
    "lightning-stop.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "stop",
      "title": "Command to shutdown the Core Lightning node.",
      "description": [
        "The **stop** is a RPC command to shut off the Core Lightning node."
      ],
      "request": {
        "required": [],
        "properties": {}
      },
      "response": {
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "added": "v24.05",
            "enum": [
              "Shutdown complete"
            ]
          }
        }
      },
      "author": [
        "Vincenzo Palazzo <<vincenzo.palazzo@protonmail.com>> wrote the initial version of this man page,",
        "but many others did the hard work of actually implementing this rpc command."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:stop#1",
            "method": "stop",
            "params": {}
          },
          "response": {
            "result": "Shutdown complete"
          }
        }
      ]
    },
    "lightning-txdiscard.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "txdiscard",
      "title": "Abandon a transaction from txprepare, release inputs",
      "description": [
        "The **txdiscard** RPC command releases inputs which were reserved for use of the *txid* from lightning-txprepare(7)."
      ],
      "request": {
        "required": [
          "txid"
        ],
        "properties": {
          "txid": {
            "type": "txid",
            "description": [
              "The transaction id, inputs should be unreseverd from."
            ]
          }
        }
      },
      "response": {
        "required": [
          "unsigned_tx",
          "txid"
        ],
        "properties": {
          "unsigned_tx": {
            "type": "hex",
            "description": [
              "The unsigned transaction."
            ]
          },
          "txid": {
            "type": "txid",
            "description": [
              "The transaction id of *unsigned_tx*."
            ]
          }
        },
        "post_return_value_notes": [
          "If there is no matching *txid*, an error is reported. Note that this may happen due to incorrect usage, such as **txdiscard** or **txsend** already being called for *txid*."
        ]
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- -1: An unknown *txid*."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-txprepare(7)",
        "lightning-txsend(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:txdiscard#1",
            "method": "txdiscard",
            "params": [
              "cafef1e6936d05584c8406e9ec5e9631b03513fe8b2a0444c5824e1a1f3d7c67"
            ]
          },
          "response": {
            "unsigned_tx": "0200000001974bc23173b7bca9b060dac12abd1bb158e8ed69a3e74d4f6af5919b15f5772c0100000000fdffffff020000000100000000220020a056363be8c7dbb511098cc50fbca24843e6ed6de03f816465f1998a9a82a09d4183980000000000225120f1393467c717cd50de2760167d4311141a8f750c89f54fd2c900601a7da8434c95000000",
            "txid": "cafef1e6936d05584c8406e9ec5e9631b03513fe8b2a0444c5824e1a1f3d7c67"
          }
        },
        {
          "request": {
            "id": "example:txdiscard#2",
            "method": "txdiscard",
            "params": {
              "txid": "91a189eb69a436e49735ae1e8619fd96a342a4e5c63fa2baa7e9f69ecdc7434c"
            }
          },
          "response": {
            "unsigned_tx": "02000000010cbdd42439292d7a59620493020f2a204488bfa4d640eedb84af5d3bd6479aea0000000000fdffffff0240420f00000000002200200fefd5034808bec0c94b857b7a3ddeeece7cae1b2101b2f23f1c114b14073f31b7a1f000000000002251205c54c6ff7b25c08e66a91d4256a5ca2c374ab1faf56377e8d65466cf997614ce97000000",
            "txid": "91a189eb69a436e49735ae1e8619fd96a342a4e5c63fa2baa7e9f69ecdc7434c"
          }
        }
      ]
    },
    "lightning-txprepare.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "txprepare",
      "title": "Command to prepare to withdraw funds from the internal wallet",
      "description": [
        "The **txprepare** RPC command creates an unsigned transaction which spends funds from Core Lightning's internal wallet to the outputs specified in *outputs*.",
        "",
        "**txprepare** is similar to the first part of a **withdraw** command, but supports multiple outputs and uses *outputs* as parameter. The second part is provided by **txsend**."
      ],
      "request": {
        "required": [
          "outputs"
        ],
        "properties": {
          "outputs": {
            "type": "array",
            "description": [
              "Format is like: [{destination1: amount1}, {destination2: amount2}] or [{destination: *all*}]. It supports any number of **confirmed** outputs."
            ],
            "items": {
              "type": "outputdesc"
            }
          },
          "feerate": {
            "type": "feerate",
            "description": [
              "Used for the transaction as initial feerate."
            ],
            "default": "*normal*"
          },
          "minconf": {
            "type": "u32",
            "description": [
              "The minimum number of confirmations that used outputs should have."
            ],
            "default": 1
          },
          "utxos": {
            "type": "array",
            "description": [
              "To be used to fund the transaction, as an array of `txid:vout`. These must be drawn from the node's available UTXO set."
            ],
            "items": {
              "type": "outpoint"
            }
          }
        }
      },
      "response": {
        "required": [
          "psbt",
          "unsigned_tx",
          "txid"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "The PSBT representing the unsigned transaction."
            ]
          },
          "unsigned_tx": {
            "type": "hex",
            "description": [
              "The unsigned transaction."
            ]
          },
          "txid": {
            "type": "txid",
            "description": [
              "The transaction id of *unsigned_tx*; you hand this to lightning-txsend(7) or lightning-txdiscard(7), as the inputs of this transaction are reserved."
            ]
          }
        }
      },
      "errors": [
        "On failure, an error is reported and the transaction is not created.",
        "",
        "- -1: Catchall nonspecific error.",
        "- 301: There are not enough funds in the internal wallet (including fees) to create the transaction.",
        "- 302: The dust limit is not met."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-withdraw(7)",
        "lightning-txsend(7)",
        "lightning-txdiscard(7)",
        "lightning-feerates(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:txprepare#1",
            "method": "txprepare",
            "params": [
              [
                {
                  "bcrt1q5ptrvwlgcldm2ygf3nzsl09zfpp7dmtduqlczer97xvc4x5z5zwsc2ulv4": 16777216
                }
              ]
            ]
          },
          "response": {
            "unsigned_tx": "0200000001974bc23173b7bca9b060dac12abd1bb158e8ed69a3e74d4f6af5919b15f5772c0100000000fdffffff020000000100000000220020a056363be8c7dbb511098cc50fbca24843e6ed6de03f816465f1998a9a82a09d4183980000000000225120f1393467c717cd50de2760167d4311141a8f750c89f54fd2c900601a7da8434c95000000",
            "txid": "cafef1e6936d05584c8406e9ec5e9631b03513fe8b2a0444c5824e1a1f3d7c67",
            "psbt": "cHNidP8BAgQCAAAAAQMElQAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAFpz79e9wou5mbmtaiB+6WfRTf8SpZxmrd6n+rIFcWewQAAAAAA/f///wLS79/eAAAAABYAFE35CMxYA4yQx9XLuFj0/q5uNmligJaYAQAAAAAWABT/hTPq8LE5vAc9KiJjjmygoIN81UsAAAABAR+AlpgBAAAAABYAFP+FM+rwsTm8Bz0qImOObKCgg3zVAQ4gl0vCMXO3vKmwYNrBKr0bsVjo7Wmj501PavWRmxX1dywBDwQBAAAAARAE/f///wABAwgAAAABAAAAAAEEIgAgoFY2O+jH27URCYzFD7yiSEPm7W3gP4FkZfGZipqCoJ0AAQMIQYOYAAAAAAABBCJRIPE5NGfHF81Q3idgFn1DERQaj3UMifVP0skAYBp9qENMAA=="
          }
        },
        {
          "request": {
            "id": "example:txprepare#2",
            "method": "txprepare",
            "params": {
              "outputs": [
                {
                  "bcrt1q4hz6a4gtecfmy8z870cwkq2gzc0t7n9u9pu23689u55ghwewemqsv4v2zs": 16777216
                }
              ]
            }
          },
          "response": {
            "unsigned_tx": "0200000001974bc23173b7bca9b060dac12abd1bb158e8ed69a3e74d4f6af5919b15f5772c0100000000fdffffff020000000100000000220020adc5aed50bce13b21c47f3f0eb0148161ebf4cbc2878a8e8e5e5288bbb2ecec1418398000000000022512081da0d3e3051135a89e2f9d85e2eadf661f959bfb05e671097854672cfd0ac7d95000000",
            "txid": "ed6c309a10273aa036d29b71cf70202291d4d4b72be353ac410e1678ecfbf74e",
            "psbt": "cHNidP8BAgQCAAAAAQMElQAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAFpz79e9wou5mbmtaiB+6WfRTf8SpZxmrd6n+rIFcWewQAAAAAA/f///wLS79/eAAAAABYAFE35CMxYA4yQx9XLuFj0/q5uNmligJaYAQAAAAAWABT/hTPq8LE5vAc9KiJjjmygoIN81UsAAAABAR+AlpgBAAAAABYAFP+FM+rwsTm8Bz0qImOObKCgg3zVAQ4gl0vCMXO3vKmwYNrBKr0bsVjo7Wmj501PavWRmxX1dywBDwQBAAAAARAE/f///wABAwgAAAABAAAAAAEEIgAgrcWu1QvOE7IcR/Pw6wFIFh6/TLwoeKjo5eUoi7suzsEAAQMIQYOYAAAAAAABBCJRIIHaDT4wURNaieL52F4urfZh+Vm/sF5nEJeFRnLP0Kx9AA=="
          }
        }
      ]
    },
    "lightning-txsend.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "txsend",
      "title": "Command to sign and send transaction from txprepare",
      "description": [
        "The **txsend** RPC command signs and broadcasts a transaction created by *txprepare* RPC command."
      ],
      "request": {
        "required": [
          "txid"
        ],
        "properties": {
          "txid": {
            "type": "txid",
            "description": [
              "The transaction id of the transaction created by `txprepare` rpc command."
            ]
          }
        }
      },
      "response": {
        "required": [
          "psbt",
          "tx",
          "txid"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "The completed PSBT representing the signed transaction."
            ]
          },
          "tx": {
            "type": "hex",
            "description": [
              "The fully signed transaction."
            ]
          },
          "txid": {
            "type": "txid",
            "description": [
              "The transaction id of *tx*."
            ]
          }
        }
      },
      "errors": [
        "On failure, an error is reported (from bitcoind), and the inputs from the transaction are unreserved.",
        "",
        "- -1: Catchall nonspecific error."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-txprepare(7)",
        "lightning-txdiscard(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:txsend#1",
            "method": "txsend",
            "params": [
              "ed6c309a10273aa036d29b71cf70202291d4d4b72be353ac410e1678ecfbf74e"
            ]
          },
          "response": {
            "tx": "0200000001974bc23173b7bca9b060dac12abd1bb158e8ed69a3e74d4f6af5919b15f5772c0100000000fdffffff020000000100000000220020adc5aed50bce13b21c47f3f0eb0148161ebf4cbc2878a8e8e5e5288bbb2ecec1418398000000000022512081da0d3e3051135a89e2f9d85e2eadf661f959bfb05e671097854672cfd0ac7d95000000",
            "txid": "ed6c309a10273aa036d29b71cf70202291d4d4b72be353ac410e1678ecfbf74e",
            "psbt": "cHNidP8BAgQCAAAAAQMElQAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAFpz79e9wou5mbmtaiB+6WfRTf8SpZxmrd6n+rIFcWewQAAAAAA/f///wLS79/eAAAAABYAFE35CMxYA4yQx9XLuFj0/q5uNmligJaYAQAAAAAWABT/hTPq8LE5vAc9KiJjjmygoIN81UsAAAABAR+AlpgBAAAAABYAFP+FM+rwsTm8Bz0qImOObKCgg3zVIgICrdS+fDe+nFDye7Mp6i6PaAV6YeEglyQM1Lypkk6qiU5HMEQCID5oPTp8udytiNikLxBRfm+iAL2LeYa9bJBKih0OcN2CAiApOyjSHogrEppHHuTPuUqEeLq/psjaa8cEKHXw6Hz7cQEiBgKt1L58N76cUPJ7synqLo9oBXph4SCXJAzUvKmSTqqJTgj/hTPqAAAAAAEOIJdLwjFzt7ypsGDawSq9G7FY6O1po+dNT2r1kZsV9XcsAQ8EAQAAAAEQBP3///8AAQMIAAAAAQAAAAABBCIAIK3FrtULzhOyHEfz8OsBSBYev0y8KHio6OXlKIu7Ls7BAAEDCEGDmAAAAAAAAQQiUSCB2g0+MFETWoni+dheLq32YflZv7BeZxCXhUZyz9CsfSEHPXxCgubxwYgC9mDabmKYMY13V5d4yQepeZJ7VCvUFqIJAEDR+iMDAAAAAA=="
          }
        },
        {
          "request": {
            "id": "example:txsend#2",
            "method": "txsend",
            "params": {
              "txid": "e9a218878137adf2d34a8ef69151d6e288cc9b9a23f6a5e8ace1b43f03409358"
            }
          },
          "response": {
            "tx": "02000000014ef7fbec78160e41ac53e32bb7d4d491222070cf719bd236a03a27109a306ced0100000000fdffffff0240420f0000000000220020c9ea2c65ca8cdc27bc130fe11f5e52e175475e0e31b645b1dcc3832dc4f7e78dc22d890000000000225120774b1c2a9b4b0a9dce43b46395940da2001115d400fa3667909ec86a5d36518b4e000000",
            "txid": "e9a218878137adf2d34a8ef69151d6e288cc9b9a23f6a5e8ace1b43f03409358",
            "psbt": "cHNidP8BAgQCAAAAAQMETgAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCJAgAAAAGXS8Ixc7e8qbBg2sEqvRuxWOjtaaPnTU9q9ZGbFfV3LAEAAAAA/f///wIAAAABAAAAACIAIK3FrtULzhOyHEfz8OsBSBYev0y8KHio6OXlKIu7Ls7BQYOYAAAAAAAiUSCB2g0+MFETWoni+dheLq32YflZv7BeZxCXhUZyz9CsfZUAAAABAStBg5gAAAAAACJRIIHaDT4wURNaieL52F4urfZh+Vm/sF5nEJeFRnLP0Kx9AQ4gTvf77HgWDkGsU+Mrt9TUkSIgcM9xm9I2oDonEJowbO0BDwQBAAAAARAE/f///wETQIRl9k9MarVBCdz+jTkHVLk/f0KpyiwelXb3+0KqyEUNKPpgLxiJskis5PEsQfEjatvrDCm8cl1CnutfbKUUTGchFj18QoLm8cGIAvZg2m5imDGNd1eXeMkHqXmSe1Qr1BaiCQBA0fojAAAAAAABAwhAQg8AAAAAAAEEIgAgyeosZcqM3Ce8Ew/hH15S4XVHXg4xtkWx3MODLcT3540AAQMIwi2JAAAAAAABBCJRIHdLHCqbSwqdzkO0Y5WUDaIAERXUAPo2Z5CeyGpdNlGLIQeEMcD3iRgEiqSnJRphfipArfPS8md+1DjVMvR3UrU8wwkA1WaCQwYAAAAA"
          }
        }
      ]
    },
    "lightning-unreserveinputs.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "unreserveinputs",
      "title": "Release reserved UTXOs",
      "description": [
        "The **unreserveinputs** RPC command releases (or reduces reservation) on UTXOs which were previously marked as reserved, generally by lightning-reserveinputs(7)."
      ],
      "request": {
        "required": [
          "psbt"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "Inputs to unreserve are the inputs specified in the passed-in *psbt*."
            ]
          },
          "reserve": {
            "type": "u32",
            "description": [
              "The number of blocks to decrease reservation by."
            ],
            "default": 72
          }
        }
      },
      "response": {
        "required": [
          "reservations"
        ],
        "properties": {
          "reservations": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "required": [
                "txid",
                "vout",
                "was_reserved",
                "reserved"
              ],
              "properties": {
                "txid": {
                  "type": "txid",
                  "description": [
                    "The transaction id."
                  ]
                },
                "vout": {
                  "type": "u32",
                  "description": [
                    "The output number which was reserved."
                  ]
                },
                "was_reserved": {
                  "type": "boolean",
                  "description": [
                    "Whether the input was already reserved (usually `true`)."
                  ]
                },
                "reserved": {
                  "type": "boolean",
                  "description": [
                    "Whether the input is now reserved (may still be `true` if it was reserved for a long time)."
                  ]
                }
              },
              "allOf": [
                {
                  "if": {
                    "additionalProperties": true,
                    "properties": {
                      "reserved": {
                        "enum": [
                          true
                        ]
                      }
                    }
                  },
                  "then": {
                    "required": [
                      "reserved_to_block"
                    ],
                    "properties": {
                      "txid": {},
                      "vout": {},
                      "was_reserved": {},
                      "reserved": {},
                      "reserved_to_block": {
                        "type": "u32",
                        "description": [
                          "What blockheight the reservation will expire."
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "errors": [
        "On failure, an error is reported and no UTXOs are unreserved.",
        "",
        "- -32602: Invalid parameter, i.e. an unparseable PSBT."
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-unreserveinputs(7)",
        "lightning-signpsbt(7)",
        "lightning-sendpsbt(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:unreserveinputs#1",
            "method": "unreserveinputs",
            "params": {
              "psbt": "cHNidP8BAF4CAAAAAZiQf/mEs4NcFFfD4K8xauOgSpbz/xeetoXVWAPCI0h6AQAAAAD9////AahhAAAAAAAAIlEg+3d9jpNmK0getyg5W+Mp31CPIRDKcJg/mZs/uaVrQ+GZAAAAAAEAiQIAAAABswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BAAAAAP3///8CgIQeAAAAAAAiACDJvFwGPK7796bHgUQHtWJ7T4GotW7L6TLGgvnLrA0Z32INzQsAAAAAIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2iYAAAAAQErYg3NCwAAAAAiUSDJGD7ekSHzxv0UmIIsR6dgJzInZpyQlQiEO6xbvYE/aAAA",
              "reserve": 200
            }
          },
          "response": {
            "reservations": []
          }
        },
        {
          "request": {
            "id": "example:unreserveinputs#2",
            "method": "unreserveinputs",
            "params": [
              "cHNidP8BAF4CAAAAAZiQf/mEs4NcFFfD4K8xauOgSpbz/xeetoXVWAPCI0h6AQAAAAD9////AfZRxQsAAAAAIlEg21kTTo7K2doCG6F2JqgaDjc1kRCrH7AL08oPVVJhuE+ZAAAAAAEAiQIAAAABswU80whDZOoIHS/lfyxwmHh5USHBwbcjWHaJ9/XU+78BAAAAAP3///8CgIQeAAAAAAAiACDJvFwGPK7796bHgUQHtWJ7T4GotW7L6TLGgvnLrA0Z32INzQsAAAAAIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2iYAAAAAQErYg3NCwAAAAAiUSDJGD7ekSHzxv0UmIIsR6dgJzInZpyQlQiEO6xbvYE/aAAA"
            ]
          },
          "response": {
            "reservations": []
          }
        }
      ]
    },
    "lightning-upgradewallet.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "upgradewallet",
      "title": "Command to spend all P2SH-wrapped inputs into a Native Segwit output",
      "description": [
        "`upgradewallet` is a convenience RPC which will spend all p2sh-wrapped Segwit deposits in a wallet into a single Native Segwit P2WPKH address."
      ],
      "request": {
        "required": [],
        "properties": {
          "feerate": {
            "type": "feerate",
            "description": [
              "Feerate for the upgrade transaction."
            ],
            "added": "v23.02",
            "default": "*opening*"
          },
          "reservedok": {
            "type": "boolean",
            "description": [
              "Tells the wallet to include all P2SH-wrapped inputs, including reserved ones."
            ],
            "added": "v23.02"
          }
        }
      },
      "response": {
        "required": [
          "upgraded_outs"
        ],
        "properties": {
          "upgraded_outs": {
            "type": "u64",
            "description": [
              "Count of spent/upgraded UTXOs."
            ],
            "added": "v23.02"
          },
          "psbt": {
            "type": "string",
            "description": [
              "The PSBT that was finalized and sent."
            ],
            "added": "v23.02"
          },
          "tx": {
            "type": "hex",
            "description": [
              "The raw transaction which was sent."
            ],
            "added": "v23.02"
          },
          "txid": {
            "type": "txid",
            "description": [
              "The txid of the **tx**."
            ],
            "added": "v23.02"
          }
        }
      },
      "usage": [
        "The caller is trying to buy a liquidity ad but the command keeps failing. They have funds in their wallet, but they're all P2SH-wrapped outputs.",
        "",
        "The caller can call `upgradewallet` to convert their funds to native segwit outputs, which are valid for liquidity ad buys."
      ],
      "author": [
        "Lisa Neigut <<niftynei@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-utxopsbt(7)",
        "lightning-reserveinputs(7)",
        "lightning-unreserveinputs(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:upgradewallet#1",
            "method": "upgradewallet",
            "params": {}
          },
          "response": {
            "upgraded_outs": 0
          }
        },
        {
          "request": {
            "id": "example:upgradewallet#2",
            "method": "upgradewallet",
            "params": {
              "feerate": "urgent",
              "reservedok": true
            }
          },
          "response": {
            "tx": "0200000001e3148821838724c371613dfe954620b99b689803f29b17e33b85f655afc812170000000000fdffffff0135143101000000002251206c27e1956acfa61e68292c80908880e813450f754132e8a2ac471a86bf1326b566000000",
            "txid": "52b8957df7b017c4c187641491b80ca209c52b286eba60afac7292a868fdf9d0",
            "psbt": "cHNidP8BAgQCAAAAAQMEZgAAAAEEAQEBBQEBAQYBAwH7BAIAAAAAAQBzAgAAAAEJawGuY9Yx4yHwOdSd9MWwVc46+mVaPVwiwqhZT0H1zQAAAAAA/f///wIALTEBAAAAABepFGVXKPNs/jbQGqUNMjZwRGn4SlVAh3HE1CgBAAAAF6kUfN+wjm5E/BFSxPQjIl0rcUgkip2HZQAAAAEBIAAtMQEAAAAAF6kUZVco82z+NtAapQ0yNnBEafhKVUCHIgICucDGhE4SpTHJaOVcVQeOwW2b92vpKQ/YfRzKcrSDmhdHMEQCIBsJrbJqp2dLLklUvvheXUy1uu4eIMkebSbbYkQHWItOAiBEuulzciFVMVB7Rkt5eOb53CX5hq7Vq2LbwBHB6ApUTwEBBBYAFNa5adNt/9rZhpGT9mPuSA39xzSIIgYCucDGhE4SpTHJaOVcVQeOwW2b92vpKQ/YfRzKcrSDmhcI1rlp0wAAAAABDiDjFIghg4ckw3FhPf6VRiC5m2iYA/KbF+M7hfZVr8gSFwEPBAAAAAABEAT9////AAEDCDUUMQEAAAAAAQQiUSBsJ+GVas+mHmgpLICQiIDoE0UPdUEy6KKsRxqGvxMmtSEHWnm7u0BtS8KN8F+mqHMoz7AqfhN0O+zc0d/P4HHC4BAJAH0I2ZcFAAAAAA==",
            "upgraded_outs": 1
          }
        }
      ]
    },
    "lightning-utxopsbt.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "utxopsbt",
      "title": "Command to populate PSBT inputs from given UTXOs",
      "description": [
        "*utxopsbt* is a low-level RPC command which creates a PSBT using unreserved inputs in the wallet, optionally reserving them as well.",
        "",
        "It deliberately mirrors the parameters and output of lightning-fundpsbt(7) except instead of an optional *minconf* parameter to select unreserved outputs from the wallet, it takes a compulsory list of outputs to use."
      ],
      "request": {
        "required": [
          "satoshi",
          "feerate",
          "startweight",
          "utxos"
        ],
        "properties": {
          "satoshi": {
            "type": "sat_or_all",
            "description": [
              "The minimum satoshi value of the output(s) needed (or the string `all` meaning use all unreserved inputs). If a value, it can be a whole number, a whole number ending in *sat*, a whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*."
            ]
          },
          "feerate": {
            "type": "feerate",
            "description": [
              "Used for the transaction as initial feerate."
            ],
            "default": "*normal*"
          },
          "startweight": {
            "type": "u32",
            "description": [
              "The weight of the transaction before *fundpsbt* has added any inputs."
            ]
          },
          "utxos": {
            "type": "array",
            "description": [
              "An array of `txid:vout`, each of which must be reserved or available."
            ],
            "items": {
              "type": "outpoint"
            }
          },
          "reserve": {
            "type": "u32",
            "description": [
              "If not zero, then *reserveinputs* is called (successfully, with *exclusive* true) on the returned PSBT for this number of blocks."
            ],
            "default": "72 blocks"
          },
          "reservedok": {
            "type": "boolean",
            "description": [
              "If set to true, it will also fail if any of the *utxos* are already reserved."
            ],
            "default": "false"
          },
          "locktime": {
            "type": "u32",
            "description": [
              "If not set, it is set to a recent block height."
            ]
          },
          "min_witness_weight": {
            "type": "u32",
            "description": [
              "Minimum weight to use for a UTXO's witness. If the actual witness weight is greater than the provided minimum, the actual witness weight will be used."
            ]
          },
          "excess_as_change": {
            "type": "boolean",
            "description": [
              "Flag to add a change output for the excess sats."
            ]
          },
          "opening_anchor_channel": {
            "added": "v23.08",
            "type": "boolean",
            "description": [
              "To signel that it needs emergency reserve for anchors so that we can lowball our commitment tx fees, and min-emergency-msat for reserving some sats for closing anchor channels."
            ]
          }
        }
      },
      "response": {
        "required": [
          "psbt",
          "feerate_per_kw",
          "estimated_final_weight",
          "excess_msat"
        ],
        "properties": {
          "psbt": {
            "type": "string",
            "description": [
              "Unsigned PSBT which fulfills the parameters given."
            ]
          },
          "feerate_per_kw": {
            "type": "u32",
            "description": [
              "The feerate used to create the PSBT, in satoshis-per-kiloweight."
            ]
          },
          "estimated_final_weight": {
            "type": "u32",
            "description": [
              "The estimated weight of the transaction once fully signed."
            ]
          },
          "excess_msat": {
            "type": "msat",
            "description": [
              "The amount above *satoshi* which is available. This could be zero, or dust; it will be zero if *change_outnum* is also returned."
            ]
          },
          "change_outnum": {
            "type": "u32",
            "description": [
              "The 0-based output number where change was placed (only if parameter *excess_as_change* was true and there was sufficient funds)."
            ]
          },
          "reservations": {
            "type": "array",
            "description": [
              "If *reserve* was true or a non-zero number, just as per lightning- reserveinputs(7)."
            ],
            "items": {
              "type": "object",
              "required": [
                "txid",
                "vout",
                "was_reserved",
                "reserved",
                "reserved_to_block"
              ],
              "additionalProperties": false,
              "properties": {
                "txid": {
                  "type": "txid",
                  "description": [
                    "The txid of the transaction."
                  ]
                },
                "vout": {
                  "type": "u32",
                  "description": [
                    "The 0-based output number."
                  ]
                },
                "was_reserved": {
                  "type": "boolean",
                  "description": [
                    "Whether this output was previously reserved."
                  ]
                },
                "reserved": {
                  "type": "boolean",
                  "enum": [
                    true
                  ],
                  "description": [
                    "Whether this output is now reserved."
                  ]
                },
                "reserved_to_block": {
                  "type": "u32",
                  "description": [
                    "The blockheight the reservation will expire."
                  ]
                }
              }
            }
          }
        },
        "post_return_value_notes": [
          "On success, returns the *psbt* it created, containing the inputs, *feerate_per_kw* showing the exact numeric feerate it used, *estimated_final_weight* for the estimated weight of the transaction once fully signed, and *excess_msat* containing the amount above *satoshi* which is available. This could be zero, or dust. If *satoshi* was `all`, then *excess_msat* is the entire amount once fees are subtracted for the weights of the inputs and *startweight*.",
          "",
          "If *reserve* was *true* or a non-zero number, then a *reservations* array is returned, exactly like *reserveinputs*.",
          "",
          "If *excess_as_change* is true and the excess is enough to cover an additional output above the `dust_limit`, then an output is added to the PSBT for the excess amount. The *excess_msat* will be zero. A *change_outnum* will be returned with the index of the change output."
        ]
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- -1: Catchall nonspecific error.",
        "- 301: Insufficient UTXOs to meet *satoshi* value."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-fundpsbt(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:utxopsbt#1",
            "method": "utxopsbt",
            "params": [
              1000000,
              "15000perkw",
              214,
              [
                "bffbd4f5f789765823b7c1c12151797898702c7fe52f1d08ea644308d33c05b3:1"
              ],
              null,
              true,
              null,
              null,
              true
            ]
          },
          "response": {
            "psbt": "cHNidP8BAF4CAAAAAbMFPNMIQ2TqCB0v5X8scJh4eVEhwcG3I1h2iff11Pu/AQAAAAD9////AUFZ3AsAAAAAIlEgO+E35aPNS3YQRaiMByjTJDUYNvBO1Z39o3m42EZGUreYAAAAAAEAcQIAAAABl0vCMXO3vKmwYNrBKr0bsVjo7Wmj501PavWRmxX1dywAAAAAAP3///8Ceh/00gAAAAAWABSauB3UBW2CVXly9l1sU6aMmVAq+ADC6wsAAAAAFgAUA8/shxXh9ASjbsAR5COPhjKfkJyXAAAAAQEfAMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnAAA",
            "feerate_per_kw": 15000,
            "estimated_final_weight": 657,
            "excess_msat": 0,
            "change_outnum": 0,
            "reservations": [
              {
                "txid": "bffbd4f5f789765823b7c1c12151797898702c7fe52f1d08ea644308d33c05b3",
                "vout": 1,
                "was_reserved": true,
                "reserved": true,
                "reserved_to_block": 2240
              }
            ]
          }
        },
        {
          "request": {
            "id": "example:utxopsbt#2",
            "method": "utxopsbt",
            "params": {
              "satoshi": 2000000,
              "feerate": "18750perkw",
              "startweight": 214,
              "utxos": [
                "bffbd4f5f789765823b7c1c12151797898702c7fe52f1d08ea644308d33c05b3:1"
              ],
              "reservedok": true,
              "excess_as_change": true
            }
          },
          "response": {
            "psbt": "cHNidP8BAF4CAAAAAbMFPNMIQ2TqCB0v5X8scJh4eVEhwcG3I1h2iff11Pu/AQAAAAD9////AWINzQsAAAAAIlEgyRg+3pEh88b9FJiCLEenYCcyJ2ackJUIhDusW72BP2iYAAAAAAEAcQIAAAABl0vCMXO3vKmwYNrBKr0bsVjo7Wmj501PavWRmxX1dywAAAAAAP3///8Ceh/00gAAAAAWABSauB3UBW2CVXly9l1sU6aMmVAq+ADC6wsAAAAAFgAUA8/shxXh9ASjbsAR5COPhjKfkJyXAAAAAQEfAMLrCwAAAAAWABQDz+yHFeH0BKNuwBHkI4+GMp+QnAAA",
            "feerate_per_kw": 18750,
            "estimated_final_weight": 657,
            "excess_msat": 0,
            "change_outnum": 0,
            "reservations": [
              {
                "txid": "bffbd4f5f789765823b7c1c12151797898702c7fe52f1d08ea644308d33c05b3",
                "vout": 1,
                "was_reserved": true,
                "reserved": true,
                "reserved_to_block": 2312
              }
            ]
          }
        }
      ]
    },
    "lightning-wait.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "added": "v23.08",
      "rpc": "wait",
      "title": "Command to wait for creations, changes and deletions",
      "description": [
        "The **wait** RPC command returns once the index given by *indexname* in *subsystem* reaches or exceeds *nextvalue*. All indexes start at 0, when no events have happened (**wait** with a *nextvalue* of 0 is a way of getting the current index, though naturally this is racy!)."
      ],
      "request": {
        "required": [
          "subsystem",
          "indexname",
          "nextvalue"
        ],
        "properties": {
          "subsystem": {
            "type": "string",
            "description": [
              "The subsystem to get the next index value from.",
              "  `invoices`: corresponding to `listinvoices` (added in *v23.08*).",
              "  `sendpays`: corresponding to `listsendpays` (added in *v23.11*).",
              "  `forwards`: corresponding to `listforwards` (added in *v23.11*)."
            ],
            "enum": [
              "invoices",
              "forwards",
              "sendpays"
            ]
          },
          "indexname": {
            "type": "string",
            "description": [
              "The name of the index to get the next value for.",
              "  `created` is incremented by one for every new object.",
              "  `updated` is incremented by one every time an object is changed.",
              "  `deleted` is incremented by one every time an object is deleted."
            ],
            "enum": [
              "created",
              "updated",
              "deleted"
            ]
          },
          "nextvalue": {
            "type": "u64",
            "description": [
              "The next value of the index."
            ]
          }
        }
      },
      "response": {
        "required": [
          "subsystem"
        ],
        "properties": {
          "subsystem": {
            "type": "string",
            "enum": [
              "invoices",
              "forwards",
              "sendpays"
            ]
          },
          "created": {
            "type": "u64",
            "description": [
              "1-based index indicating order entry was created."
            ]
          },
          "updated": {
            "type": "u64",
            "description": [
              "1-based index indicating order entry was updated."
            ]
          },
          "deleted": {
            "type": "u64",
            "description": [
              "1-based index indicating order entry was deleted."
            ]
          },
          "details": {}
        },
        "allOf": [
          {
            "if": {
              "additionalProperties": true,
              "properties": {
                "subsystem": {
                  "type": "string",
                  "enum": [
                    "invoices"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "subsystem": {},
                "created": {},
                "updated": {},
                "deleted": {},
                "details": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "unpaid",
                        "paid",
                        "expired"
                      ],
                      "description": [
                        "Whether it's paid, unpaid or unpayable."
                      ]
                    },
                    "label": {
                      "type": "string",
                      "description": [
                        "Unique label supplied at invoice creation."
                      ]
                    },
                    "description": {
                      "type": "string",
                      "description": [
                        "Description used in the invoice."
                      ]
                    },
                    "bolt11": {
                      "type": "string",
                      "description": [
                        "The BOLT11 string."
                      ]
                    },
                    "bolt12": {
                      "type": "string",
                      "description": [
                        "The BOLT12 string."
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "if": {
              "additionalProperties": true,
              "properties": {
                "subsystem": {
                  "type": "string",
                  "enum": [
                    "forwards"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "subsystem": {},
                "created": {},
                "updated": {},
                "deleted": {},
                "details": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "offered",
                        "settled",
                        "failed",
                        "local_failed"
                      ],
                      "description": [
                        "Still ongoing, completed, failed locally, or failed after forwarding."
                      ]
                    },
                    "in_channel": {
                      "type": "short_channel_id",
                      "description": [
                        "Unique label supplied at invoice creation."
                      ]
                    },
                    "in_htlc_id": {
                      "type": "u64",
                      "description": [
                        "The unique HTLC id the sender gave this (not present if incoming channel was closed before upgrade to v22.11)."
                      ]
                    },
                    "in_msat": {
                      "type": "msat",
                      "description": [
                        "The value of the incoming HTLC."
                      ]
                    },
                    "out_channel": {
                      "type": "short_channel_id",
                      "description": [
                        "The channel that the HTLC (trying to) forward to."
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "if": {
              "additionalProperties": true,
              "properties": {
                "subsystem": {
                  "type": "string",
                  "enum": [
                    "sendpays"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "properties": {
                "subsystem": {},
                "created": {},
                "updated": {},
                "deleted": {},
                "details": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "failed",
                        "complete"
                      ],
                      "description": [
                        "Status of the payment."
                      ]
                    },
                    "partid": {
                      "type": "u64",
                      "description": [
                        "Part number (for multiple parts to a single payment)."
                      ]
                    },
                    "groupid": {
                      "type": "u64",
                      "description": [
                        "Grouping key to disambiguate multiple attempts to pay an invoice or the same payment_hash."
                      ]
                    },
                    "payment_hash": {
                      "type": "hash",
                      "description": [
                        "The hash of the *payment_preimage* which will prove payment."
                      ]
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "reliability": [
        "Indices can go forward by more than one; in particlar, if multiple objects were created and the one deleted, you could see this effect. Similarly, there are some places (e.g. invoice expiration) where we can update multiple entries at once.",
        "",
        "Indices only monotoncally increase."
      ],
      "usage": [
        "The **wait** RPC is used to track changes in the system. Consider tracking invoices being paid or expiring.",
        "",
        "The simplest (and inefficient method) would be:",
        "",
        "1: Call `listinvoices` to get the current state of all invoices, and remember the highest `updated_index`. Say it was 5.",
        "",
        "2: Call `wait invoices updated 6`.",
        "",
        "3: When it returns, call `listinvoices` again to see what changed.",
        "",
        "This is obviously inefficient, so there are two optimizations:",
        "",
        "1: Call `listinvoices` with `index=updated` and `start=6` to only see invoices with `updated_index` greater than or equal to 6.",
        "",
        "2: `wait` itself may also return some limited subset of fields from the list command (it can't do this in all cases); for `invoices` this is `label` and `status`, allowing many callers to avoid the `listinvoices` call."
      ],
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listinvoices(7)",
        "lightning-listforwards(7)",
        "lightning-listsendpays(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:wait#1",
            "method": "wait",
            "params": {
              "subsystem": "invoices",
              "indexname": "created",
              "nextvalue": 0
            }
          },
          "response": {
            "subsystem": "invoices",
            "created": 15
          }
        },
        {
          "request": {
            "id": "example:wait#2",
            "method": "wait",
            "params": {
              "subsystem": "sendpays",
              "indexname": "created",
              "nextvalue": 15
            }
          },
          "response": {
            "subsystem": "sendpays",
            "created": 15,
            "details": {
              "status": "pending",
              "partid": 0,
              "groupid": 1,
              "payment_hash": "4c6f04eaf19dd956b616f1ba8718df40e387c4a56be36cf4e881a009cbf66899"
            }
          }
        },
        {
          "request": {
            "id": "example:wait#3",
            "method": "wait",
            "params": [
              "sendpays",
              "updated",
              15
            ]
          },
          "response": {
            "subsystem": "sendpays",
            "updated": 15,
            "details": {
              "status": "complete",
              "partid": 0,
              "groupid": 1,
              "payment_hash": "4c6f04eaf19dd956b616f1ba8718df40e387c4a56be36cf4e881a009cbf66899"
            }
          }
        }
      ]
    },
    "lightning-waitanyinvoice.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "waitanyinvoice",
      "title": "Command for waiting for payments",
      "description": [
        "The **waitanyinvoice** RPC command waits until an invoice is paid, then returns a single entry as per **listinvoices**. It will not return for any invoices paid prior to or including the *lastpay_index*.",
        "",
        "This is usually called iteratively: once with no arguments, then repeatedly with the returned *pay_index* entry. This ensures that no paid invoice is missed. The *pay_index* is a monotonically-increasing number assigned to an invoice when it gets paid. The first valid *pay_index* is 1."
      ],
      "request": {
        "required": [],
        "properties": {
          "lastpay_index": {
            "type": "u64",
            "description": [
              "Ignores any invoices paid prior to or including this index. 0 is equivalent to not specifying and negative value is invalid."
            ]
          },
          "timeout": {
            "type": "u64",
            "description": [
              "If specified, wait at most that number of seconds, which must be an integer. If the specified *timeout* is reached, this command will return with an error. You can specify this to 0 so that **waitanyinvoice** will return immediately with an error if no pending invoice is available yet. If unspecified, this command will wait indefinitely."
            ]
          }
        }
      },
      "response": {
        "required": [
          "label",
          "description",
          "payment_hash",
          "status",
          "created_index",
          "expires_at"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": [
              "Unique label supplied at invoice creation."
            ]
          },
          "description": {
            "type": "string",
            "description": [
              "Description used in the invoice."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "paid",
              "expired"
            ],
            "description": [
              "Whether it's paid or expired."
            ]
          },
          "expires_at": {
            "type": "u64",
            "description": [
              "UNIX timestamp of when it will become / became unpayable."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "The amount required to pay this invoice."
            ]
          },
          "bolt11": {
            "type": "string",
            "description": [
              "The BOLT11 string (always present unless *bolt12* is)."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The BOLT12 string (always present unless *bolt11* is)."
            ]
          },
          "created_index": {
            "type": "u64",
            "added": "v23.08",
            "description": [
              "1-based index indicating order this invoice was created in."
            ]
          },
          "updated_index": {
            "type": "u64",
            "added": "v23.08",
            "description": [
              "1-based index indicating order this invoice was changed (only present if it has changed since creation)."
            ]
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "paid"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [
                "pay_index",
                "amount_received_msat",
                "paid_at",
                "payment_preimage"
              ],
              "properties": {
                "label": {},
                "description": {},
                "payment_hash": {},
                "status": {},
                "msatoshi": {},
                "amount_msat": {},
                "bolt11": {},
                "bolt12": {},
                "expires_at": {},
                "created_index": {},
                "updated_index": {},
                "pay_index": {
                  "type": "u64",
                  "description": [
                    "Unique incrementing index for this payment."
                  ]
                },
                "amount_received_msat": {
                  "type": "msat",
                  "description": [
                    "The amount actually received (could be slightly greater than *amount_msat*, since clients may overpay)."
                  ]
                },
                "paid_at": {
                  "type": "u64",
                  "description": [
                    "UNIX timestamp of when it was paid."
                  ]
                },
                "paid_outpoint": {
                  "type": "object",
                  "description": [
                    "Outpoint this invoice was paid with."
                  ],
                  "added": "v23.11",
                  "additionalProperties": false,
                  "required": [
                    "txid",
                    "outnum"
                  ],
                  "properties": {
                    "txid": {
                      "added": "v23.11",
                      "type": "txid",
                      "description": [
                        "ID of the transaction that paid the invoice."
                      ]
                    },
                    "outnum": {
                      "added": "v23.11",
                      "type": "u32",
                      "description": [
                        "The 0-based output number of the transaction that paid the invoice."
                      ]
                    }
                  }
                },
                "payment_preimage": {
                  "type": "secret",
                  "description": [
                    "Proof of payment."
                  ]
                }
              }
            },
            "else": {
              "additionalProperties": false,
              "properties": {
                "label": {},
                "description": {},
                "payment_hash": {},
                "status": {},
                "msatoshi": {},
                "amount_msat": {},
                "bolt11": {},
                "bolt12": {},
                "created_index": {},
                "updated_index": {},
                "expires_at": {}
              }
            }
          }
        ]
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- 904: The *timeout* was reached without an invoice being paid."
      ],
      "author": [
        "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
      ],
      "see_also": [
        "lightning-waitinvoice(7)",
        "lightning-listinvoices(7)",
        "lightning-delinvoice(7)",
        "lightning-invoice(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:waitanyinvoice#1",
            "method": "waitanyinvoice",
            "params": {}
          },
          "response": {
            "label": "lbl balance l1 to l2",
            "bolt11": "lnbcrt5m1pn2s39ksp53sknyy2mxxurt4y0wqgp730z0cnm0vz3zmzth8p79xsrtmg5llxspp5dp94v59nm6c99jf7lc07zmnhqw6kyujx3mkdav7643dczgtdedfqdpcv3jhxcmjd9c8g6t0dcs8xetwvss8xmmdv5s8xct5wvsxcvfqw3hjqmpjxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqqduqqqqgqqqqqqqqpqqqqqzsqqc9qxpqysgqdz9cftkxe6kcqfddyrvr7j57ulsfxxxkgkjyhr3k77n8v59mzs5rmuexz9lxusyhhehlemd9ujclgahln8e0n8y86stc7u8uys6mjqgqerm6q4",
            "payment_hash": "684b5650b3deb052c93efe1fe16e7703b56272468eecdeb3daac5b81216dcb52",
            "amount_msat": 500000000,
            "status": "paid",
            "pay_index": 1,
            "amount_received_msat": 500000000,
            "paid_at": 1722303671,
            "payment_preimage": "bed4140e1db302720d7f9547dc9127d45b115080447cce7e23cfd00b60991831",
            "description": "description send some sats l1 to l2",
            "expires_at": 1722908470,
            "created_index": 1,
            "updated_index": 1
          }
        },
        {
          "request": {
            "id": "example:waitanyinvoice#2",
            "method": "waitanyinvoice",
            "params": {
              "lastpay_index": 1,
              "timeout": 0
            }
          },
          "response": {
            "label": "lbl_l23",
            "bolt11": "lnbcrt1pn2s38zsp5lv49w44a8tvkwtkxfxwts8rnr864u59srp7sxuua3haahdhlhtrqpp5p928w8rmsg2hjeymedcn54vxhsz372qhcedgf003nmsknhx9594sdqcdserxgryv4ekxunfwp6xjmmwxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqt5h8te9lkn0jpdkhkmlkzs80aw7mt5kdm6jxmvddkavt3vj0vakkmfcs0hsde8y8g8za46sch2lp4jxy56u8ve25sgpgcsya0vp92sgphzw570",
            "payment_hash": "0954771c7b821579649bcb713a5586bc051f2817c65a84bdf19ee169dcc5a16b",
            "status": "paid",
            "pay_index": 2,
            "amount_received_msat": 9900,
            "paid_at": 1722303715,
            "payment_preimage": "f3a3b40d63e62785f537aad60f93980914c5639872c7746299a6a1228abbc303",
            "description": "l23 description",
            "expires_at": 1722908514,
            "created_index": 8,
            "updated_index": 2
          }
        }
      ]
    },
    "lightning-waitblockheight.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "waitblockheight",
      "title": "Command for waiting for blocks on the blockchain",
      "description": [
        "The **waitblockheight** RPC command waits until the blockchain has reached the specified *blockheight*."
      ],
      "request": {
        "required": [
          "blockheight"
        ],
        "properties": {
          "blockheight": {
            "type": "u32",
            "description": [
              "Current blockheight of the blockchain if the value is greater than this number. If it is a present or past block height, then the command returns immediately."
            ]
          },
          "timeout": {
            "type": "u32",
            "description": [
              "Only wait up to specified seconds."
            ],
            "default": "60 seconds"
          }
        }
      },
      "response": {
        "required": [
          "blockheight"
        ],
        "properties": {
          "blockheight": {
            "type": "u32",
            "description": [
              "The current block height (>= *blockheight* parameter)."
            ]
          }
        },
        "post_return_value_notes": [
          "If *timeout* seconds is reached without the specified blockheight being reached, this command will fail with a code of `2000`."
        ]
      },
      "errors": [
        "The following error codes may occur:",
        "",
        "- 2000: Timed out."
      ],
      "author": [
        "ZmnSCPxj <<ZmnSCPxj@protonmail.com>> is mainly responsible."
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:waitblockheight#1",
            "method": "waitblockheight",
            "params": {
              "blockheight": 129,
              "timeout": 600
            }
          },
          "response": {
            "blockheight": 130
          }
        },
        {
          "request": {
            "id": "example:waitblockheight#2",
            "method": "waitblockheight",
            "params": {
              "blockheight": 131
            }
          },
          "response": {
            "blockheight": 131
          }
        }
      ]
    },
    "lightning-waitinvoice.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "waitinvoice",
      "title": "Command for waiting for specific payment",
      "description": [
        "The **waitinvoice** RPC command waits until a specific invoice is paid, then returns that single entry as per **listinvoices**."
      ],
      "request": {
        "required": [
          "label"
        ],
        "properties": {
          "label": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "description": [
              "Unique label of the invoice waiting to be paid."
            ]
          }
        }
      },
      "response": {
        "required": [
          "label",
          "description",
          "payment_hash",
          "status",
          "created_index",
          "expires_at"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": [
              "Unique label supplied at invoice creation."
            ]
          },
          "description": {
            "type": "string",
            "description": [
              "Description used in the invoice."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "paid",
              "expired"
            ],
            "description": [
              "Whether it's paid or expired."
            ]
          },
          "expires_at": {
            "type": "u64",
            "description": [
              "UNIX timestamp of when it will become / became unpayable."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "The amount required to pay this invoice."
            ]
          },
          "bolt11": {
            "type": "string",
            "description": [
              "The BOLT11 string (always present unless *bolt12* is)."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The BOLT12 string (always present unless *bolt11* is)."
            ]
          },
          "created_index": {
            "type": "u64",
            "added": "v23.08",
            "description": [
              "1-based index indicating order this invoice was created in."
            ]
          },
          "updated_index": {
            "type": "u64",
            "added": "v23.08",
            "description": [
              "1-based index indicating order this invoice was changed (only present if it has changed since creation)."
            ]
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "paid"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [
                "pay_index",
                "amount_received_msat",
                "paid_at",
                "payment_preimage"
              ],
              "properties": {
                "label": {},
                "description": {},
                "payment_hash": {},
                "status": {},
                "msatoshi": {},
                "amount_msat": {},
                "bolt11": {},
                "bolt12": {},
                "expires_at": {},
                "created_index": {},
                "updated_index": {},
                "pay_index": {
                  "type": "u64",
                  "description": [
                    "Unique incrementing index for this payment."
                  ]
                },
                "amount_received_msat": {
                  "type": "msat",
                  "description": [
                    "The amount actually received (could be slightly greater than *amount_msat*, since clients may overpay)."
                  ]
                },
                "paid_at": {
                  "type": "u64",
                  "description": [
                    "UNIX timestamp of when it was paid."
                  ]
                },
                "paid_outpoint": {
                  "type": "object",
                  "description": [
                    "Outpoint this invoice was paid with."
                  ],
                  "added": "v23.11",
                  "additionalProperties": false,
                  "required": [
                    "txid",
                    "outnum"
                  ],
                  "properties": {
                    "txid": {
                      "added": "v23.11",
                      "type": "txid",
                      "description": [
                        "ID of the transaction that paid the invoice."
                      ]
                    },
                    "outnum": {
                      "added": "v23.11",
                      "type": "u32",
                      "description": [
                        "The 0-based output number of the transaction that paid the invoice."
                      ]
                    }
                  }
                },
                "payment_preimage": {
                  "type": "secret",
                  "description": [
                    "Proof of payment."
                  ]
                }
              }
            },
            "else": {
              "additionalProperties": false,
              "properties": {
                "label": {},
                "description": {},
                "payment_hash": {},
                "status": {},
                "msatoshi": {},
                "amount_msat": {},
                "bolt11": {},
                "bolt12": {},
                "created_index": {},
                "updated_index": {},
                "expires_at": {}
              }
            }
          }
        ]
      },
      "errors": [
        "On error the returned object will contain `code` and `message` properties, with `code` being one of the following:",
        "",
        "- -32602: If the given parameters are wrong.",
        "- -1: If the invoice is deleted while unpaid, or the invoice does not exist.",
        "- 903: If the invoice expires before being paid, or is already expired."
      ],
      "author": [
        "Christian Decker <<decker.christian@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-waitanyinvoice(7)",
        "lightning-listinvoices(7)",
        "lightning-delinvoice(7)",
        "lightning-invoice(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:waitinvoice#1",
            "method": "waitinvoice",
            "params": {
              "label": "inv2"
            }
          },
          "response": {
            "label": "inv2",
            "bolt11": "lnbcrt20n1pn2s38fsp55xnux6tuzuutlqhekzytnexpqj6w3q00h6e7wu08ex43rdr4xqdqpp5znq67nu5secgcf79ncjtqfdpjfqh7acaxvngcqwqsvvxwnkyl35qdq8d9h8vvsxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgq9ptnru6v58v8qd58xdqypr86utn6fhssx8rwegsspfp9d975h0t47xn0hea6qrmy2ucxt4l02nkxu7va7d5lqgy8nrqmhxqpm5qauegqjjqr02",
            "payment_hash": "14c1af4f9486708c27c59e24b025a192417f771d33268c01c08318674ec4fc68",
            "amount_msat": 2000,
            "status": "paid",
            "pay_index": 4,
            "amount_received_msat": 2000,
            "paid_at": 1722303723,
            "payment_preimage": "1bda6e78384905bc476c6f50b447cf7fbba13a2644d49d85d797a826e8b9a6a0",
            "description": "inv2",
            "expires_at": 1722908521,
            "created_index": 12,
            "updated_index": 4
          }
        },
        {
          "request": {
            "id": "example:waitinvoice#2",
            "method": "waitinvoice",
            "params": [
              "inv3"
            ]
          },
          "response": {
            "label": "inv3",
            "bolt11": "lnbcrt30n1pn2s38fsp5syqds2z0hgqgf3dcxt9kp5m2rtywxm4u4hr4xe90r885rr609vgqpp52y0xdhlzrua5clpuyw4wcfk9duxwwauzcjxrs9nj00258njmdjnsdq8d9h8vvcxqyjw5qcqp9rzjqdwjkyvjm7apxnssu4qgwhfkd67ghs6n6k48v6uqczgt88p6tky96qqq0vqqqqgqqyqqqqqpqqqqqzsqqc9qxpqysgqkkeex45p62vc7nfjywwfle8yhk9wemyktw2m7924cfmlthk37q6ptjd8vxyaevtejfj44yp55xllqlljxv5vz6wc3gc9jlfkwrkngscqtl0xs8",
            "payment_hash": "511e66dfe21f3b4c7c3c23aaec26c56f0ce77782c48c3816727bd543ce5b6ca7",
            "amount_msat": 3000,
            "status": "paid",
            "pay_index": 5,
            "amount_received_msat": 3000,
            "paid_at": 1722303725,
            "payment_preimage": "86e637cb70631a0db88cc8f6ef9a21457b1b85be30236efb769a611b356225cd",
            "description": "inv3",
            "expires_at": 1722908521,
            "created_index": 13,
            "updated_index": 5
          }
        }
      ]
    },
    "lightning-waitsendpay.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "waitsendpay",
      "title": "Command for sending a payment via a route",
      "description": [
        "The **waitsendpay** RPC command polls or waits for the status of an outgoing payment that was initiated by a previous **sendpay** invocation.",
        "",
        "If the payment completed with success, this command returns with success. Otherwise, if the payment completed with failure, this command returns an error."
      ],
      "request": {
        "required": [
          "payment_hash"
        ],
        "properties": {
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage*."
            ]
          },
          "timeout": {
            "type": "u32",
            "description": [
              "A timeout in seconds, for this RPC command to return. If the *timeout* is provided and the given amount of time passes without the payment definitely succeeding or definitely failing, this command returns with a 200 error code (payment still in progress). If *timeout* is not provided this call will wait indefinitely. Indicating a *timeout* of 0 effectively makes this call a pollable query of the status of the payment."
            ]
          },
          "partid": {
            "type": "u64",
            "description": [
              "Unique ID within this (multi-part) payment. It must match that of the **sendpay** command."
            ]
          },
          "groupid": {
            "type": "u64",
            "description": [
              "Grouping key to disambiguate multiple attempts to pay the same payment_hash."
            ]
          }
        },
        "pairedWith": [
          [
            "partid",
            "groupid"
          ]
        ]
      },
      "response": {
        "required": [
          "id",
          "created_index",
          "payment_hash",
          "status",
          "created_at",
          "amount_sent_msat"
        ],
        "properties": {
          "created_index": {
            "added": "v23.11",
            "type": "u64",
            "description": [
              "1-based index indicating order this payment was created in."
            ]
          },
          "id": {
            "type": "u64",
            "description": [
              "Old synonym for created_index."
            ]
          },
          "groupid": {
            "type": "u64",
            "description": [
              "Grouping key to disambiguate multiple attempts to pay an invoice or the same payment_hash."
            ]
          },
          "payment_hash": {
            "type": "hash",
            "description": [
              "The hash of the *payment_preimage* which will prove payment."
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "complete"
            ],
            "description": [
              "Status of the payment."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "The amount delivered to destination (if known)."
            ]
          },
          "destination": {
            "type": "pubkey",
            "description": [
              "The final destination of the payment if known."
            ]
          },
          "created_at": {
            "type": "u64",
            "description": [
              "The UNIX timestamp showing when this payment was initiated."
            ]
          },
          "updated_index": {
            "added": "v23.11",
            "type": "u64",
            "description": [
              "1-based index indicating order this payment was changed (only present if it has changed since creation)."
            ]
          },
          "completed_at": {
            "type": "number",
            "description": [
              "The UNIX timestamp showing when this payment was completed."
            ]
          },
          "amount_sent_msat": {
            "type": "msat",
            "description": [
              "The amount sent."
            ]
          },
          "label": {
            "type": "string",
            "description": [
              "The label, if given to sendpay."
            ]
          },
          "partid": {
            "type": "u64",
            "description": [
              "The *partid*, if given to sendpay."
            ]
          },
          "bolt11": {
            "type": "string",
            "description": [
              "The bolt11 string (if pay supplied one)."
            ]
          },
          "bolt12": {
            "type": "string",
            "description": [
              "The bolt12 string (if supplied for pay: **experimental-offers** only)."
            ]
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "complete"
                  ]
                }
              }
            },
            "then": {
              "additionalProperties": false,
              "required": [
                "payment_preimage"
              ],
              "properties": {
                "id": {},
                "created_index": {},
                "updated_index": {},
                "groupid": {},
                "payment_hash": {},
                "status": {},
                "msatoshi": {},
                "amount_msat": {},
                "destination": {},
                "created_at": {},
                "completed_at": {},
                "msatoshi_sent": {},
                "amount_sent_msat": {},
                "label": {},
                "partid": {},
                "bolt11": {},
                "bolt12": {},
                "payment_preimage": {
                  "type": "secret",
                  "description": [
                    "The proof of payment: SHA256 of this **payment_hash**."
                  ]
                }
              }
            }
          }
        ]
      },
      "errors": [
        "On error, and even if the error occurred from a node other than the final destination, the route table will no longer be updated. Use the *exclude* parameter of the `getroute` command to ignore the failing route.",
        "",
        "- -1: Catchall nonspecific error.",
        "- 200: Timed out before the payment could complete.",
        "- 202: Unparseable onion reply. The *data* field of the error will have an *onionreply* field, a hex string representation of the raw onion reply.",
        "- 203: Permanent failure at destination. The *data* field of the error will be routing failure object.",
        "- 204: Failure along route; retry a different route. The *data* field of the error will be routing failure object.",
        "- 208: A payment for *payment_hash* was never made and there is nothing to wait for.",
        "- 209: The payment already failed, but the reason for failure was not stored. This should only occur when querying failed payments on very old databases.",
        "",
        "A routing failure object has the fields below:",
        "",
        "*erring_index*: The index of the node along the route that reported the error. 0 for the local node, 1 for the first hop, and so on.",
        "*erring_node*: The hex string of the pubkey id of the node that reported the error.",
        "*erring_channel*: The short channel ID of the channel that has the error (or the final channel if the destination raised the error).",
        "*erring_direction*: The direction of traversing the *erring_channel*:",
        "*failcode*: The failure code, as per BOLT #4.",
        "*failcodename*: The human-readable name corresponding to *failcode*, if known."
      ],
      "author": [
        "ZmnSCPxj <<ZmnSCPxj@protonmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-sendpay(7)",
        "lightning-pay(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:waitsendpay#1",
            "method": "waitsendpay",
            "params": {
              "payment_hash": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2"
            }
          },
          "response": {
            "created_index": 2,
            "id": 2,
            "payment_hash": "d598cfc62da16b381b8fb8af9833a24005f730e54cc32c317fecc511ffc6d2a2",
            "groupid": 1,
            "updated_index": 2,
            "destination": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
            "amount_msat": 10000,
            "amount_sent_msat": 10001,
            "created_at": 1722303675,
            "completed_at": 1722303677,
            "status": "complete",
            "payment_preimage": "984a10782218478cd39e1f9a16795d756c337662067023a3b690bffdb1593f76"
          }
        }
      ]
    },
    "lightning-withdraw.json": {
      "$schema": "../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "rpc": "withdraw",
      "title": "Command for withdrawing funds from the internal wallet",
      "description": [
        "The **withdraw** RPC command sends funds from Core Lightning's internal wallet to the address specified in *destination*."
      ],
      "request": {
        "required": [
          "destination",
          "satoshi"
        ],
        "properties": {
          "destination": {
            "type": "string",
            "description": [
              "Any Bitcoin accepted type, including bech32."
            ]
          },
          "satoshi": {
            "type": "sat_or_all",
            "description": [
              "The amount to be withdrawn from the internal wallet (expressed, as name suggests, in satoshi). The string *all* can be used to specify withdrawal of all available funds (but if we have any anchor channels, this will always leave at least `min-emergency-msat` as change). Otherwise, it is in satoshi precision; it can be a whole number, a whole number ending in *sat*, a whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*."
            ]
          },
          "feerate": {
            "type": "feerate",
            "description": [
              "Used for the withdrawal as initial feerate."
            ],
            "default": "*normal*"
          },
          "minconf": {
            "type": "u16",
            "description": [
              "Minimum number of confirmations that used outputs should have."
            ],
            "default": 1
          },
          "utxos": {
            "type": "array",
            "description": [
              "Specifies the utxos to be used to be withdrawn from, as an array of `txid:vout`. These must be drawn from the node's available UTXO set."
            ],
            "items": {
              "type": "outpoint"
            }
          }
        }
      },
      "response": {
        "required": [
          "psbt",
          "tx",
          "txid"
        ],
        "properties": {
          "tx": {
            "type": "hex",
            "description": [
              "The fully signed bitcoin transaction."
            ]
          },
          "txid": {
            "type": "txid",
            "description": [
              "The transaction id of *tx*."
            ]
          },
          "psbt": {
            "type": "string",
            "description": [
              "The PSBT representing the unsigned transaction."
            ]
          }
        }
      },
      "errors": [
        "On failure, an error is reported and the withdrawal transaction is not created.",
        "",
        "- -1: Catchall nonspecific error.",
        "- 301: There are not enough funds in the internal wallet (including fees) to create the transaction.",
        "- 302: The dust limit is not met.",
        "- 313: The `min-emergency-msat` reserve not be preserved (and we have anchor channels)."
      ],
      "author": [
        "Felix <<fixone@gmail.com>> is mainly responsible."
      ],
      "see_also": [
        "lightning-listfunds(7)",
        "lightning-fundchannel(7)",
        "lightning-newaddr(7)",
        "lightning-txprepare(7)",
        "lightning-feerates(7)"
      ],
      "resources": [
        "Main web site: <https://github.com/ElementsProject/lightning>"
      ],
      "examples": [
        {
          "request": {
            "id": "example:withdraw#1",
            "method": "withdraw",
            "params": {
              "destination": "bcrt1qcqqvkswps3e6ck3jmqf86f9tcaeke5z04d3tv4",
              "satoshi": 555555
            }
          },
          "response": {
            "tx": "0200000001187e8867dc9462f0acbf9b7ecad69c786bdb04bdc89eb0bea45db35f8cf7dd860000000000fdffffff02237a080000000000160014c000cb41c18473ac5a32d8127d24abc7736cd04f0636e30b0000000022512052021c61da23b2eda3d5000c6d812d0c9b088c237ed2a510abd94d8c3f7c421d20000000",
            "txid": "faf2ac1e15fe8df73c411d404224cb481f01cabdde58df83c56d5d6050ec53a9",
            "psbt": "cHNidP8BAgQCAAAAAQMEIAAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQBxAgAAAAGdA6aKwu4U7Zes8OwDJHp4bI3maidtrjOK6N85klZucAEAAAAA/f///wIAwusLAAAAABYAFCchPiIXtPVr0Ztsg5Pcn2G+aRIzQD/9EAEAAAAWABRz0UYcTRX0fJpAf766DfDa2wbGUGcAAAABAR8AwusLAAAAABYAFCchPiIXtPVr0Ztsg5Pcn2G+aRIzIgICB+wrNVNHEthq4DDdm/rsCOLd6h7Bzs/7lyXtessSq2ZHMEQCIEW+oeZvFbmuQidamye9/iuDhJ41SARdgZV8yWWjfq8vAiAS3no++NDmJjip3G/y4VTfQ/jiJv2jv9lQKqBUK9hQ0wEiBgIH7Cs1U0cS2GrgMN2b+uwI4t3qHsHOz/uXJe16yxKrZggnIT4iAAAAAAEOIBh+iGfclGLwrL+bfsrWnHhr2wS9yJ6wvqRds1+M992GAQ8EAAAAAAEQBP3///8AIgICLKJZZMteDpQ8BfcEOrSAECukrPM9dXeamXREWCtGR1AIwADLQQwAAAABAwgjeggAAAAAAAEEFgAUwADLQcGEc6xaMtgSfSSrx3Ns0E8M/AlsaWdodG5pbmcEAgABAAEDCAY24wsAAAAAAQQiUSBSAhxh2iOy7aPVAAxtgS0MmwiMI37SpRCr2U2MP3xCHSEHxKQ1JAGJOzVxgiryRaI4NGaYWWe35WSg4OUGHU+NcXEJAIvHqlwOAAAAAA=="
          }
        },
        {
          "request": {
            "id": "example:withdraw#2",
            "method": "withdraw",
            "params": {
              "destination": "bcrt1phtprcvhz842sxe8qw0yryvc0g6n6dw2puweklcpnfye273kjpfhs0d6d2e",
              "satoshi": "all",
              "feerate": "20000perkb",
              "minconf": 0,
              "utxos": [
                "f2f4e67dbf2791a3b57dd986418156b116b452c5fc27b077da7c529db82f06f5:0"
              ]
            }
          },
          "response": {
            "tx": "0200000001f5062fb89d527cda77b027fcc552b416b156814186d97db5a39127bf7de6f4f20000000000fdffffff0119f70e0000000000225120bac23c32e23d550364e073c832330f46a7a6b941e3b36fe0334932af46d20a6f87000000",
            "txid": "41dd478136c95acc82b7669fa4c70843da2ecd04baa7c53cbe8c73d0dd98e5c1",
            "psbt": "cHNidP8BAgQCAAAAAQMEhwAAAAEEAQEBBQEBAQYBAwH7BAIAAAAAAQCJAgAAAAGxWGMGDX3aCdIKW4Vrs4nxXQD8LjoWZ2z3R6yqUp0MxAEAAAAA/f///wKSAA8AAAAAACJRIP2rfAH65wwI4LH5rKzKEQpTEh513FSiXnVCQW80Kur3QEIPAAAAAAAiACCWVeKnMwzYbcafjtGEWvVYDdBrFaeUA0yVceU9Vjmzl3oAAAABASuSAA8AAAAAACJRIP2rfAH65wwI4LH5rKzKEQpTEh513FSiXnVCQW80Kur3AQ4g9QYvuJ1SfNp3sCf8xVK0FrFWgUGG2X21o5Env33m9PIBDwQAAAAAARAE/f///wETQFj1/T/JtePk1+LfX9fAK4QBBwl1Xt1YmoE2cQOo/0hAvCLgwb5zSZCrDGAhxdSujHXyVo3a19wl+ayqa0/nckAhFr2SP8yeYDMCCkVocL4aDjUqc7hPoTIp/uS7zAf7okk6CQDK3xgoAAAAAAABAwgZ9w4AAAAAAAEEIlEgusI8MuI9VQNk4HPIMjMPRqemuUHjs2/gM0kyr0bSCm8hB6Jvzf+c2c5Qrvvj78smeIzuWAjjEtHW01YDo2je0daMCQBxtd2rDQAAAAz8CWxpZ2h0bmluZwQCAAEA"
          }
        }
      ]
    }
  },
  "notifications": {
    "block_added.json": {
      "$schema": "../../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "notification": "block_added",
      "title": "Notification that a block has been added to the blockchain",
      "description": [
        "The **block_added** notification is sent whenever the node receives a new block from the blockchain."
      ],
      "added": "v22.11",
      "request": {},
      "response": {
        "required": [
          "hash",
          "height"
        ],
        "properties": {
          "hash": {
            "type": "hash",
            "description": [
              "The hash of the block."
            ],
            "added": "v22.11"
          },
          "height": {
            "type": "u32",
            "description": [
              "The total block height."
            ],
            "added": "v22.11"
          }
        }
      }
    },
    "channel_open_failed.json": {
      "$schema": "../../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "notification": "channel_open_failed",
      "title": "Notification that the channel open request failed",
      "description": [
        "The **channel_open_failed** notification is sent whenever the channel opening request is failed."
      ],
      "added": "pre-v0.10.1",
      "request": {},
      "response": {
        "required": [
          "channel_id"
        ],
        "properties": {
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel id of the channel."
            ],
            "added": "pre-v0.10.1"
          }
        }
      }
    },
    "channel_opened.json": {
      "$schema": "../../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "notification": "channel_opened",
      "title": "Notification for channel opening",
      "description": [
        "The **channel_opened** notification is sent whenever the channel opened successfully."
      ],
      "added": "pre-v0.10.1",
      "request": {},
      "response": {
        "required": [
          "id",
          "funding_msat",
          "funding_txid",
          "channel_ready"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "The id of the peer which opened the channel"
            ],
            "added": "pre-v0.10.1"
          },
          "funding_msat": {
            "type": "msat",
            "description": [
              "The amount of the funding transaction"
            ],
            "added": "pre-v0.10.1"
          },
          "funding_txid": {
            "type": "txid",
            "description": [
              "The transaction id of the funding transaction"
            ],
            "added": "pre-v0.10.1"
          },
          "channel_ready": {
            "type": "boolean",
            "description": [
              "true if the channel is ready"
            ],
            "added": "pre-v0.10.1"
          }
        }
      }
    },
    "channel_state_changed.json": {
      "$schema": "../../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "notification": "channel_state_changed",
      "title": "Notification for channel state change",
      "description": [
        "The **channel_state_changed** informs whenever the state of the channel has been updated."
      ],
      "added": "pre-v0.10.1",
      "request": {},
      "response": {
        "required": [
          "peer_id",
          "channel_id",
          "short_channel_id",
          "timestamp",
          "old_state",
          "new_state",
          "cause",
          "message"
        ],
        "properties": {
          "peer_id": {
            "type": "pubkey",
            "description": [
              "The peer id of the channel."
            ],
            "added": "pre-v0.10.1"
          },
          "channel_id": {
            "type": "hash",
            "description": [
              "The channel id of the channel."
            ],
            "added": "pre-v0.10.1"
          },
          "short_channel_id": {
            "type": "short_channel_id",
            "description": [
              "The short channel id of the channel. If the channel is not yet confirmed, this field will be null."
            ],
            "added": "pre-v0.10.1"
          },
          "timestamp": {
            "type": "string",
            "description": [
              "The timestamp of the state change."
            ],
            "added": "pre-v0.10.1"
          },
          "old_state": {
            "type": "string",
            "enum": [
              "OPENINGD",
              "CHANNELD_AWAITING_LOCKIN",
              "CHANNELD_NORMAL",
              "CHANNELD_SHUTTING_DOWN",
              "CLOSINGD_SIGEXCHANGE",
              "CLOSINGD_COMPLETE",
              "AWAITING_UNILATERAL",
              "FUNDING_SPEND_SEEN",
              "ONCHAIN",
              "DUALOPEND_OPEN_INIT",
              "DUALOPEND_AWAITING_LOCKIN",
              "CHANNELD_AWAITING_SPLICE",
              "DUALOPEND_OPEN_COMMITTED",
              "DUALOPEND_OPEN_COMMIT_READY"
            ],
            "description": [
              "The channel state, in particular \"CHANNELD_NORMAL\" means the channel can be used normally"
            ],
            "added": "pre-v0.10.1"
          },
          "new_state": {
            "type": "string",
            "enum": [
              "OPENINGD",
              "CHANNELD_AWAITING_LOCKIN",
              "CHANNELD_NORMAL",
              "CHANNELD_SHUTTING_DOWN",
              "CLOSINGD_SIGEXCHANGE",
              "CLOSINGD_COMPLETE",
              "AWAITING_UNILATERAL",
              "FUNDING_SPEND_SEEN",
              "ONCHAIN",
              "DUALOPEND_OPEN_INIT",
              "DUALOPEND_AWAITING_LOCKIN",
              "CHANNELD_AWAITING_SPLICE",
              "DUALOPEND_OPEN_COMMITTED",
              "DUALOPEND_OPEN_COMMIT_READY"
            ],
            "description": [
              "The channel state, in particular \"CHANNELD_NORMAL\" means the channel can be used normally"
            ],
            "added": "pre-v0.10.1"
          },
          "cause": {
            "type": "string",
            "enum": [
              "unknown",
              "local",
              "user",
              "remote",
              "protocol",
              "onchain"
            ],
            "description": [
              "The cause of the state change."
            ],
            "added": "pre-v0.10.1"
          },
          "message": {
            "type": "string",
            "description": [
              "The state change message."
            ],
            "added": "pre-v0.10.1"
          }
        }
      }
    },
    "connect.json": {
      "$schema": "../../rpc-schema-draft.json",
      "type": "object",
      "notification": "connect",
      "title": "Notification for connection with a peer",
      "description": [
        "The **connect** informs whenever the node is connected to a peer."
      ],
      "additionalProperties": false,
      "added": "pre-v0.10.1",
      "request": {},
      "response": {
        "required": [
          "id",
          "direction",
          "address"
        ],
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "The id of the peer which sent the custom message"
            ],
            "added": "pre-v0.10.1"
          },
          "direction": {
            "type": "string",
            "enum": [
              "in",
              "out"
            ],
            "description": [
              "Direction of the connection"
            ],
            "added": "pre-v0.10.1"
          },
          "address": {
            "type": "object",
            "description": [
              "Address information (mainly useful if **direction** is *out*)"
            ],
            "added": "pre-v0.10.1",
            "additionalProperties": true,
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "added": "pre-v0.10.1",
                "enum": [
                  "local socket",
                  "ipv4",
                  "ipv6",
                  "torv2",
                  "torv3"
                ],
                "description": [
                  "Type of connection (*torv2*/*torv3* only if **direction** is *out*)"
                ]
              }
            },
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "local socket"
                      ]
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "required": [
                    "socket"
                  ],
                  "properties": {
                    "type": {},
                    "socket": {
                      "type": "string",
                      "added": "pre-v0.10.1",
                      "description": [
                        "Socket filename"
                      ]
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "ipv4",
                        "ipv6",
                        "torv2",
                        "torv3"
                      ]
                    }
                  }
                },
                "then": {
                  "additionalProperties": false,
                  "required": [
                    "address",
                    "port"
                  ],
                  "properties": {
                    "type": {},
                    "address": {
                      "type": "string",
                      "added": "pre-v0.10.1",
                      "description": [
                        "Address in expected format for **type**"
                      ]
                    },
                    "port": {
                      "type": "u16",
                      "added": "pre-v0.10.1",
                      "description": [
                        "Port number"
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    "custommsg.json": {
      "$schema": "../../rpc-schema-draft.json",
      "type": "object",
      "additionalProperties": false,
      "notification": "custommsg",
      "title": "Notification for custom messages",
      "description": [
        "The **custommsg** notifies whenever the node receives a custom message from a peer."
      ],
      "added": "v24.02",
      "request": {},
      "response": {
        "required": [
          "peer_id",
          "payload"
        ],
        "properties": {
          "peer_id": {
            "type": "pubkey",
            "description": [
              "The id of the peer which sent the custom message"
            ],
            "added": "v24.02"
          },
          "payload": {
            "type": "hex",
            "description": [
              "The hex-encoded payload. The first 2 bytes represent the BOLT-8 message type followed by the message content"
            ],
            "added": "v24.02"
          }
        }
      }
    }
  }
}