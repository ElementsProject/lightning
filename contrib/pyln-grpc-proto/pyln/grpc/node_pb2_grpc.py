# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pyln.grpc import node_pb2 as node__pb2


class NodeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Getinfo = channel.unary_unary(
                '/cln.Node/Getinfo',
                request_serializer=node__pb2.GetinfoRequest.SerializeToString,
                response_deserializer=node__pb2.GetinfoResponse.FromString,
                )
        self.ListPeers = channel.unary_unary(
                '/cln.Node/ListPeers',
                request_serializer=node__pb2.ListpeersRequest.SerializeToString,
                response_deserializer=node__pb2.ListpeersResponse.FromString,
                )
        self.ListFunds = channel.unary_unary(
                '/cln.Node/ListFunds',
                request_serializer=node__pb2.ListfundsRequest.SerializeToString,
                response_deserializer=node__pb2.ListfundsResponse.FromString,
                )
        self.SendPay = channel.unary_unary(
                '/cln.Node/SendPay',
                request_serializer=node__pb2.SendpayRequest.SerializeToString,
                response_deserializer=node__pb2.SendpayResponse.FromString,
                )
        self.ListChannels = channel.unary_unary(
                '/cln.Node/ListChannels',
                request_serializer=node__pb2.ListchannelsRequest.SerializeToString,
                response_deserializer=node__pb2.ListchannelsResponse.FromString,
                )
        self.AddGossip = channel.unary_unary(
                '/cln.Node/AddGossip',
                request_serializer=node__pb2.AddgossipRequest.SerializeToString,
                response_deserializer=node__pb2.AddgossipResponse.FromString,
                )
        self.AddPsbtOutput = channel.unary_unary(
                '/cln.Node/AddPsbtOutput',
                request_serializer=node__pb2.AddpsbtoutputRequest.SerializeToString,
                response_deserializer=node__pb2.AddpsbtoutputResponse.FromString,
                )
        self.AutoCleanInvoice = channel.unary_unary(
                '/cln.Node/AutoCleanInvoice',
                request_serializer=node__pb2.AutocleaninvoiceRequest.SerializeToString,
                response_deserializer=node__pb2.AutocleaninvoiceResponse.FromString,
                )
        self.AutoCleanOnce = channel.unary_unary(
                '/cln.Node/AutoCleanOnce',
                request_serializer=node__pb2.AutocleanonceRequest.SerializeToString,
                response_deserializer=node__pb2.AutocleanonceResponse.FromString,
                )
        self.AutoCleanStatus = channel.unary_unary(
                '/cln.Node/AutoCleanStatus',
                request_serializer=node__pb2.AutocleanstatusRequest.SerializeToString,
                response_deserializer=node__pb2.AutocleanstatusResponse.FromString,
                )
        self.CheckMessage = channel.unary_unary(
                '/cln.Node/CheckMessage',
                request_serializer=node__pb2.CheckmessageRequest.SerializeToString,
                response_deserializer=node__pb2.CheckmessageResponse.FromString,
                )
        self.Close = channel.unary_unary(
                '/cln.Node/Close',
                request_serializer=node__pb2.CloseRequest.SerializeToString,
                response_deserializer=node__pb2.CloseResponse.FromString,
                )
        self.ConnectPeer = channel.unary_unary(
                '/cln.Node/ConnectPeer',
                request_serializer=node__pb2.ConnectRequest.SerializeToString,
                response_deserializer=node__pb2.ConnectResponse.FromString,
                )
        self.CreateInvoice = channel.unary_unary(
                '/cln.Node/CreateInvoice',
                request_serializer=node__pb2.CreateinvoiceRequest.SerializeToString,
                response_deserializer=node__pb2.CreateinvoiceResponse.FromString,
                )
        self.Datastore = channel.unary_unary(
                '/cln.Node/Datastore',
                request_serializer=node__pb2.DatastoreRequest.SerializeToString,
                response_deserializer=node__pb2.DatastoreResponse.FromString,
                )
        self.DatastoreUsage = channel.unary_unary(
                '/cln.Node/DatastoreUsage',
                request_serializer=node__pb2.DatastoreusageRequest.SerializeToString,
                response_deserializer=node__pb2.DatastoreusageResponse.FromString,
                )
        self.CreateOnion = channel.unary_unary(
                '/cln.Node/CreateOnion',
                request_serializer=node__pb2.CreateonionRequest.SerializeToString,
                response_deserializer=node__pb2.CreateonionResponse.FromString,
                )
        self.DelDatastore = channel.unary_unary(
                '/cln.Node/DelDatastore',
                request_serializer=node__pb2.DeldatastoreRequest.SerializeToString,
                response_deserializer=node__pb2.DeldatastoreResponse.FromString,
                )
        self.DelInvoice = channel.unary_unary(
                '/cln.Node/DelInvoice',
                request_serializer=node__pb2.DelinvoiceRequest.SerializeToString,
                response_deserializer=node__pb2.DelinvoiceResponse.FromString,
                )
        self.DevForgetChannel = channel.unary_unary(
                '/cln.Node/DevForgetChannel',
                request_serializer=node__pb2.DevforgetchannelRequest.SerializeToString,
                response_deserializer=node__pb2.DevforgetchannelResponse.FromString,
                )
        self.EmergencyRecover = channel.unary_unary(
                '/cln.Node/EmergencyRecover',
                request_serializer=node__pb2.EmergencyrecoverRequest.SerializeToString,
                response_deserializer=node__pb2.EmergencyrecoverResponse.FromString,
                )
        self.Recover = channel.unary_unary(
                '/cln.Node/Recover',
                request_serializer=node__pb2.RecoverRequest.SerializeToString,
                response_deserializer=node__pb2.RecoverResponse.FromString,
                )
        self.RecoverChannel = channel.unary_unary(
                '/cln.Node/RecoverChannel',
                request_serializer=node__pb2.RecoverchannelRequest.SerializeToString,
                response_deserializer=node__pb2.RecoverchannelResponse.FromString,
                )
        self.Invoice = channel.unary_unary(
                '/cln.Node/Invoice',
                request_serializer=node__pb2.InvoiceRequest.SerializeToString,
                response_deserializer=node__pb2.InvoiceResponse.FromString,
                )
        self.CreateInvoiceRequest = channel.unary_unary(
                '/cln.Node/CreateInvoiceRequest',
                request_serializer=node__pb2.InvoicerequestRequest.SerializeToString,
                response_deserializer=node__pb2.InvoicerequestResponse.FromString,
                )
        self.DisableInvoiceRequest = channel.unary_unary(
                '/cln.Node/DisableInvoiceRequest',
                request_serializer=node__pb2.DisableinvoicerequestRequest.SerializeToString,
                response_deserializer=node__pb2.DisableinvoicerequestResponse.FromString,
                )
        self.ListInvoiceRequests = channel.unary_unary(
                '/cln.Node/ListInvoiceRequests',
                request_serializer=node__pb2.ListinvoicerequestsRequest.SerializeToString,
                response_deserializer=node__pb2.ListinvoicerequestsResponse.FromString,
                )
        self.ListDatastore = channel.unary_unary(
                '/cln.Node/ListDatastore',
                request_serializer=node__pb2.ListdatastoreRequest.SerializeToString,
                response_deserializer=node__pb2.ListdatastoreResponse.FromString,
                )
        self.ListInvoices = channel.unary_unary(
                '/cln.Node/ListInvoices',
                request_serializer=node__pb2.ListinvoicesRequest.SerializeToString,
                response_deserializer=node__pb2.ListinvoicesResponse.FromString,
                )
        self.SendOnion = channel.unary_unary(
                '/cln.Node/SendOnion',
                request_serializer=node__pb2.SendonionRequest.SerializeToString,
                response_deserializer=node__pb2.SendonionResponse.FromString,
                )
        self.ListSendPays = channel.unary_unary(
                '/cln.Node/ListSendPays',
                request_serializer=node__pb2.ListsendpaysRequest.SerializeToString,
                response_deserializer=node__pb2.ListsendpaysResponse.FromString,
                )
        self.ListTransactions = channel.unary_unary(
                '/cln.Node/ListTransactions',
                request_serializer=node__pb2.ListtransactionsRequest.SerializeToString,
                response_deserializer=node__pb2.ListtransactionsResponse.FromString,
                )
        self.MakeSecret = channel.unary_unary(
                '/cln.Node/MakeSecret',
                request_serializer=node__pb2.MakesecretRequest.SerializeToString,
                response_deserializer=node__pb2.MakesecretResponse.FromString,
                )
        self.Pay = channel.unary_unary(
                '/cln.Node/Pay',
                request_serializer=node__pb2.PayRequest.SerializeToString,
                response_deserializer=node__pb2.PayResponse.FromString,
                )
        self.ListNodes = channel.unary_unary(
                '/cln.Node/ListNodes',
                request_serializer=node__pb2.ListnodesRequest.SerializeToString,
                response_deserializer=node__pb2.ListnodesResponse.FromString,
                )
        self.WaitAnyInvoice = channel.unary_unary(
                '/cln.Node/WaitAnyInvoice',
                request_serializer=node__pb2.WaitanyinvoiceRequest.SerializeToString,
                response_deserializer=node__pb2.WaitanyinvoiceResponse.FromString,
                )
        self.WaitInvoice = channel.unary_unary(
                '/cln.Node/WaitInvoice',
                request_serializer=node__pb2.WaitinvoiceRequest.SerializeToString,
                response_deserializer=node__pb2.WaitinvoiceResponse.FromString,
                )
        self.WaitSendPay = channel.unary_unary(
                '/cln.Node/WaitSendPay',
                request_serializer=node__pb2.WaitsendpayRequest.SerializeToString,
                response_deserializer=node__pb2.WaitsendpayResponse.FromString,
                )
        self.NewAddr = channel.unary_unary(
                '/cln.Node/NewAddr',
                request_serializer=node__pb2.NewaddrRequest.SerializeToString,
                response_deserializer=node__pb2.NewaddrResponse.FromString,
                )
        self.Withdraw = channel.unary_unary(
                '/cln.Node/Withdraw',
                request_serializer=node__pb2.WithdrawRequest.SerializeToString,
                response_deserializer=node__pb2.WithdrawResponse.FromString,
                )
        self.KeySend = channel.unary_unary(
                '/cln.Node/KeySend',
                request_serializer=node__pb2.KeysendRequest.SerializeToString,
                response_deserializer=node__pb2.KeysendResponse.FromString,
                )
        self.FundPsbt = channel.unary_unary(
                '/cln.Node/FundPsbt',
                request_serializer=node__pb2.FundpsbtRequest.SerializeToString,
                response_deserializer=node__pb2.FundpsbtResponse.FromString,
                )
        self.SendPsbt = channel.unary_unary(
                '/cln.Node/SendPsbt',
                request_serializer=node__pb2.SendpsbtRequest.SerializeToString,
                response_deserializer=node__pb2.SendpsbtResponse.FromString,
                )
        self.SignPsbt = channel.unary_unary(
                '/cln.Node/SignPsbt',
                request_serializer=node__pb2.SignpsbtRequest.SerializeToString,
                response_deserializer=node__pb2.SignpsbtResponse.FromString,
                )
        self.UtxoPsbt = channel.unary_unary(
                '/cln.Node/UtxoPsbt',
                request_serializer=node__pb2.UtxopsbtRequest.SerializeToString,
                response_deserializer=node__pb2.UtxopsbtResponse.FromString,
                )
        self.TxDiscard = channel.unary_unary(
                '/cln.Node/TxDiscard',
                request_serializer=node__pb2.TxdiscardRequest.SerializeToString,
                response_deserializer=node__pb2.TxdiscardResponse.FromString,
                )
        self.TxPrepare = channel.unary_unary(
                '/cln.Node/TxPrepare',
                request_serializer=node__pb2.TxprepareRequest.SerializeToString,
                response_deserializer=node__pb2.TxprepareResponse.FromString,
                )
        self.TxSend = channel.unary_unary(
                '/cln.Node/TxSend',
                request_serializer=node__pb2.TxsendRequest.SerializeToString,
                response_deserializer=node__pb2.TxsendResponse.FromString,
                )
        self.ListPeerChannels = channel.unary_unary(
                '/cln.Node/ListPeerChannels',
                request_serializer=node__pb2.ListpeerchannelsRequest.SerializeToString,
                response_deserializer=node__pb2.ListpeerchannelsResponse.FromString,
                )
        self.ListClosedChannels = channel.unary_unary(
                '/cln.Node/ListClosedChannels',
                request_serializer=node__pb2.ListclosedchannelsRequest.SerializeToString,
                response_deserializer=node__pb2.ListclosedchannelsResponse.FromString,
                )
        self.DecodePay = channel.unary_unary(
                '/cln.Node/DecodePay',
                request_serializer=node__pb2.DecodepayRequest.SerializeToString,
                response_deserializer=node__pb2.DecodepayResponse.FromString,
                )
        self.Decode = channel.unary_unary(
                '/cln.Node/Decode',
                request_serializer=node__pb2.DecodeRequest.SerializeToString,
                response_deserializer=node__pb2.DecodeResponse.FromString,
                )
        self.DelPay = channel.unary_unary(
                '/cln.Node/DelPay',
                request_serializer=node__pb2.DelpayRequest.SerializeToString,
                response_deserializer=node__pb2.DelpayResponse.FromString,
                )
        self.DelForward = channel.unary_unary(
                '/cln.Node/DelForward',
                request_serializer=node__pb2.DelforwardRequest.SerializeToString,
                response_deserializer=node__pb2.DelforwardResponse.FromString,
                )
        self.DisableOffer = channel.unary_unary(
                '/cln.Node/DisableOffer',
                request_serializer=node__pb2.DisableofferRequest.SerializeToString,
                response_deserializer=node__pb2.DisableofferResponse.FromString,
                )
        self.Disconnect = channel.unary_unary(
                '/cln.Node/Disconnect',
                request_serializer=node__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=node__pb2.DisconnectResponse.FromString,
                )
        self.Feerates = channel.unary_unary(
                '/cln.Node/Feerates',
                request_serializer=node__pb2.FeeratesRequest.SerializeToString,
                response_deserializer=node__pb2.FeeratesResponse.FromString,
                )
        self.FetchInvoice = channel.unary_unary(
                '/cln.Node/FetchInvoice',
                request_serializer=node__pb2.FetchinvoiceRequest.SerializeToString,
                response_deserializer=node__pb2.FetchinvoiceResponse.FromString,
                )
        self.FundChannel_Cancel = channel.unary_unary(
                '/cln.Node/FundChannel_Cancel',
                request_serializer=node__pb2.Fundchannel_cancelRequest.SerializeToString,
                response_deserializer=node__pb2.Fundchannel_cancelResponse.FromString,
                )
        self.FundChannel_Complete = channel.unary_unary(
                '/cln.Node/FundChannel_Complete',
                request_serializer=node__pb2.Fundchannel_completeRequest.SerializeToString,
                response_deserializer=node__pb2.Fundchannel_completeResponse.FromString,
                )
        self.FundChannel = channel.unary_unary(
                '/cln.Node/FundChannel',
                request_serializer=node__pb2.FundchannelRequest.SerializeToString,
                response_deserializer=node__pb2.FundchannelResponse.FromString,
                )
        self.FundChannel_Start = channel.unary_unary(
                '/cln.Node/FundChannel_Start',
                request_serializer=node__pb2.Fundchannel_startRequest.SerializeToString,
                response_deserializer=node__pb2.Fundchannel_startResponse.FromString,
                )
        self.GetLog = channel.unary_unary(
                '/cln.Node/GetLog',
                request_serializer=node__pb2.GetlogRequest.SerializeToString,
                response_deserializer=node__pb2.GetlogResponse.FromString,
                )
        self.FunderUpdate = channel.unary_unary(
                '/cln.Node/FunderUpdate',
                request_serializer=node__pb2.FunderupdateRequest.SerializeToString,
                response_deserializer=node__pb2.FunderupdateResponse.FromString,
                )
        self.GetRoute = channel.unary_unary(
                '/cln.Node/GetRoute',
                request_serializer=node__pb2.GetrouteRequest.SerializeToString,
                response_deserializer=node__pb2.GetrouteResponse.FromString,
                )
        self.ListForwards = channel.unary_unary(
                '/cln.Node/ListForwards',
                request_serializer=node__pb2.ListforwardsRequest.SerializeToString,
                response_deserializer=node__pb2.ListforwardsResponse.FromString,
                )
        self.ListOffers = channel.unary_unary(
                '/cln.Node/ListOffers',
                request_serializer=node__pb2.ListoffersRequest.SerializeToString,
                response_deserializer=node__pb2.ListoffersResponse.FromString,
                )
        self.ListPays = channel.unary_unary(
                '/cln.Node/ListPays',
                request_serializer=node__pb2.ListpaysRequest.SerializeToString,
                response_deserializer=node__pb2.ListpaysResponse.FromString,
                )
        self.ListHtlcs = channel.unary_unary(
                '/cln.Node/ListHtlcs',
                request_serializer=node__pb2.ListhtlcsRequest.SerializeToString,
                response_deserializer=node__pb2.ListhtlcsResponse.FromString,
                )
        self.MultiFundChannel = channel.unary_unary(
                '/cln.Node/MultiFundChannel',
                request_serializer=node__pb2.MultifundchannelRequest.SerializeToString,
                response_deserializer=node__pb2.MultifundchannelResponse.FromString,
                )
        self.MultiWithdraw = channel.unary_unary(
                '/cln.Node/MultiWithdraw',
                request_serializer=node__pb2.MultiwithdrawRequest.SerializeToString,
                response_deserializer=node__pb2.MultiwithdrawResponse.FromString,
                )
        self.Offer = channel.unary_unary(
                '/cln.Node/Offer',
                request_serializer=node__pb2.OfferRequest.SerializeToString,
                response_deserializer=node__pb2.OfferResponse.FromString,
                )
        self.OpenChannel_Abort = channel.unary_unary(
                '/cln.Node/OpenChannel_Abort',
                request_serializer=node__pb2.Openchannel_abortRequest.SerializeToString,
                response_deserializer=node__pb2.Openchannel_abortResponse.FromString,
                )
        self.OpenChannel_Bump = channel.unary_unary(
                '/cln.Node/OpenChannel_Bump',
                request_serializer=node__pb2.Openchannel_bumpRequest.SerializeToString,
                response_deserializer=node__pb2.Openchannel_bumpResponse.FromString,
                )
        self.OpenChannel_Init = channel.unary_unary(
                '/cln.Node/OpenChannel_Init',
                request_serializer=node__pb2.Openchannel_initRequest.SerializeToString,
                response_deserializer=node__pb2.Openchannel_initResponse.FromString,
                )
        self.OpenChannel_Signed = channel.unary_unary(
                '/cln.Node/OpenChannel_Signed',
                request_serializer=node__pb2.Openchannel_signedRequest.SerializeToString,
                response_deserializer=node__pb2.Openchannel_signedResponse.FromString,
                )
        self.OpenChannel_Update = channel.unary_unary(
                '/cln.Node/OpenChannel_Update',
                request_serializer=node__pb2.Openchannel_updateRequest.SerializeToString,
                response_deserializer=node__pb2.Openchannel_updateResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/cln.Node/Ping',
                request_serializer=node__pb2.PingRequest.SerializeToString,
                response_deserializer=node__pb2.PingResponse.FromString,
                )
        self.Plugin = channel.unary_unary(
                '/cln.Node/Plugin',
                request_serializer=node__pb2.PluginRequest.SerializeToString,
                response_deserializer=node__pb2.PluginResponse.FromString,
                )
        self.RenePayStatus = channel.unary_unary(
                '/cln.Node/RenePayStatus',
                request_serializer=node__pb2.RenepaystatusRequest.SerializeToString,
                response_deserializer=node__pb2.RenepaystatusResponse.FromString,
                )
        self.RenePay = channel.unary_unary(
                '/cln.Node/RenePay',
                request_serializer=node__pb2.RenepayRequest.SerializeToString,
                response_deserializer=node__pb2.RenepayResponse.FromString,
                )
        self.ReserveInputs = channel.unary_unary(
                '/cln.Node/ReserveInputs',
                request_serializer=node__pb2.ReserveinputsRequest.SerializeToString,
                response_deserializer=node__pb2.ReserveinputsResponse.FromString,
                )
        self.SendCustomMsg = channel.unary_unary(
                '/cln.Node/SendCustomMsg',
                request_serializer=node__pb2.SendcustommsgRequest.SerializeToString,
                response_deserializer=node__pb2.SendcustommsgResponse.FromString,
                )
        self.SendInvoice = channel.unary_unary(
                '/cln.Node/SendInvoice',
                request_serializer=node__pb2.SendinvoiceRequest.SerializeToString,
                response_deserializer=node__pb2.SendinvoiceResponse.FromString,
                )
        self.SendOnionMessage = channel.unary_unary(
                '/cln.Node/SendOnionMessage',
                request_serializer=node__pb2.SendonionmessageRequest.SerializeToString,
                response_deserializer=node__pb2.SendonionmessageResponse.FromString,
                )
        self.SetChannel = channel.unary_unary(
                '/cln.Node/SetChannel',
                request_serializer=node__pb2.SetchannelRequest.SerializeToString,
                response_deserializer=node__pb2.SetchannelResponse.FromString,
                )
        self.SetConfig = channel.unary_unary(
                '/cln.Node/SetConfig',
                request_serializer=node__pb2.SetconfigRequest.SerializeToString,
                response_deserializer=node__pb2.SetconfigResponse.FromString,
                )
        self.SetPsbtVersion = channel.unary_unary(
                '/cln.Node/SetPsbtVersion',
                request_serializer=node__pb2.SetpsbtversionRequest.SerializeToString,
                response_deserializer=node__pb2.SetpsbtversionResponse.FromString,
                )
        self.SignInvoice = channel.unary_unary(
                '/cln.Node/SignInvoice',
                request_serializer=node__pb2.SigninvoiceRequest.SerializeToString,
                response_deserializer=node__pb2.SigninvoiceResponse.FromString,
                )
        self.SignMessage = channel.unary_unary(
                '/cln.Node/SignMessage',
                request_serializer=node__pb2.SignmessageRequest.SerializeToString,
                response_deserializer=node__pb2.SignmessageResponse.FromString,
                )
        self.Splice_Init = channel.unary_unary(
                '/cln.Node/Splice_Init',
                request_serializer=node__pb2.Splice_initRequest.SerializeToString,
                response_deserializer=node__pb2.Splice_initResponse.FromString,
                )
        self.Splice_Signed = channel.unary_unary(
                '/cln.Node/Splice_Signed',
                request_serializer=node__pb2.Splice_signedRequest.SerializeToString,
                response_deserializer=node__pb2.Splice_signedResponse.FromString,
                )
        self.Splice_Update = channel.unary_unary(
                '/cln.Node/Splice_Update',
                request_serializer=node__pb2.Splice_updateRequest.SerializeToString,
                response_deserializer=node__pb2.Splice_updateResponse.FromString,
                )
        self.UnreserveInputs = channel.unary_unary(
                '/cln.Node/UnreserveInputs',
                request_serializer=node__pb2.UnreserveinputsRequest.SerializeToString,
                response_deserializer=node__pb2.UnreserveinputsResponse.FromString,
                )
        self.UpgradeWallet = channel.unary_unary(
                '/cln.Node/UpgradeWallet',
                request_serializer=node__pb2.UpgradewalletRequest.SerializeToString,
                response_deserializer=node__pb2.UpgradewalletResponse.FromString,
                )
        self.WaitBlockHeight = channel.unary_unary(
                '/cln.Node/WaitBlockHeight',
                request_serializer=node__pb2.WaitblockheightRequest.SerializeToString,
                response_deserializer=node__pb2.WaitblockheightResponse.FromString,
                )
        self.Wait = channel.unary_unary(
                '/cln.Node/Wait',
                request_serializer=node__pb2.WaitRequest.SerializeToString,
                response_deserializer=node__pb2.WaitResponse.FromString,
                )
        self.ListConfigs = channel.unary_unary(
                '/cln.Node/ListConfigs',
                request_serializer=node__pb2.ListconfigsRequest.SerializeToString,
                response_deserializer=node__pb2.ListconfigsResponse.FromString,
                )
        self.Stop = channel.unary_unary(
                '/cln.Node/Stop',
                request_serializer=node__pb2.StopRequest.SerializeToString,
                response_deserializer=node__pb2.StopResponse.FromString,
                )
        self.Help = channel.unary_unary(
                '/cln.Node/Help',
                request_serializer=node__pb2.HelpRequest.SerializeToString,
                response_deserializer=node__pb2.HelpResponse.FromString,
                )
        self.PreApproveKeysend = channel.unary_unary(
                '/cln.Node/PreApproveKeysend',
                request_serializer=node__pb2.PreapprovekeysendRequest.SerializeToString,
                response_deserializer=node__pb2.PreapprovekeysendResponse.FromString,
                )
        self.PreApproveInvoice = channel.unary_unary(
                '/cln.Node/PreApproveInvoice',
                request_serializer=node__pb2.PreapproveinvoiceRequest.SerializeToString,
                response_deserializer=node__pb2.PreapproveinvoiceResponse.FromString,
                )
        self.StaticBackup = channel.unary_unary(
                '/cln.Node/StaticBackup',
                request_serializer=node__pb2.StaticbackupRequest.SerializeToString,
                response_deserializer=node__pb2.StaticbackupResponse.FromString,
                )
        self.BkprChannelsApy = channel.unary_unary(
                '/cln.Node/BkprChannelsApy',
                request_serializer=node__pb2.BkprchannelsapyRequest.SerializeToString,
                response_deserializer=node__pb2.BkprchannelsapyResponse.FromString,
                )
        self.BkprDumpIncomeCsv = channel.unary_unary(
                '/cln.Node/BkprDumpIncomeCsv',
                request_serializer=node__pb2.BkprdumpincomecsvRequest.SerializeToString,
                response_deserializer=node__pb2.BkprdumpincomecsvResponse.FromString,
                )
        self.BkprInspect = channel.unary_unary(
                '/cln.Node/BkprInspect',
                request_serializer=node__pb2.BkprinspectRequest.SerializeToString,
                response_deserializer=node__pb2.BkprinspectResponse.FromString,
                )
        self.BkprListAccountEvents = channel.unary_unary(
                '/cln.Node/BkprListAccountEvents',
                request_serializer=node__pb2.BkprlistaccounteventsRequest.SerializeToString,
                response_deserializer=node__pb2.BkprlistaccounteventsResponse.FromString,
                )
        self.BkprListBalances = channel.unary_unary(
                '/cln.Node/BkprListBalances',
                request_serializer=node__pb2.BkprlistbalancesRequest.SerializeToString,
                response_deserializer=node__pb2.BkprlistbalancesResponse.FromString,
                )
        self.BkprListIncome = channel.unary_unary(
                '/cln.Node/BkprListIncome',
                request_serializer=node__pb2.BkprlistincomeRequest.SerializeToString,
                response_deserializer=node__pb2.BkprlistincomeResponse.FromString,
                )
        self.BlacklistRune = channel.unary_unary(
                '/cln.Node/BlacklistRune',
                request_serializer=node__pb2.BlacklistruneRequest.SerializeToString,
                response_deserializer=node__pb2.BlacklistruneResponse.FromString,
                )
        self.CheckRune = channel.unary_unary(
                '/cln.Node/CheckRune',
                request_serializer=node__pb2.CheckruneRequest.SerializeToString,
                response_deserializer=node__pb2.CheckruneResponse.FromString,
                )
        self.CreateRune = channel.unary_unary(
                '/cln.Node/CreateRune',
                request_serializer=node__pb2.CreateruneRequest.SerializeToString,
                response_deserializer=node__pb2.CreateruneResponse.FromString,
                )
        self.ShowRunes = channel.unary_unary(
                '/cln.Node/ShowRunes',
                request_serializer=node__pb2.ShowrunesRequest.SerializeToString,
                response_deserializer=node__pb2.ShowrunesResponse.FromString,
                )
        self.SubscribeBlockAdded = channel.unary_stream(
                '/cln.Node/SubscribeBlockAdded',
                request_serializer=node__pb2.StreamBlockAddedRequest.SerializeToString,
                response_deserializer=node__pb2.BlockAddedNotification.FromString,
                )
        self.SubscribeChannelOpenFailed = channel.unary_stream(
                '/cln.Node/SubscribeChannelOpenFailed',
                request_serializer=node__pb2.StreamChannelOpenFailedRequest.SerializeToString,
                response_deserializer=node__pb2.ChannelOpenFailedNotification.FromString,
                )
        self.SubscribeChannelOpened = channel.unary_stream(
                '/cln.Node/SubscribeChannelOpened',
                request_serializer=node__pb2.StreamChannelOpenedRequest.SerializeToString,
                response_deserializer=node__pb2.ChannelOpenedNotification.FromString,
                )
        self.SubscribeConnect = channel.unary_stream(
                '/cln.Node/SubscribeConnect',
                request_serializer=node__pb2.StreamConnectRequest.SerializeToString,
                response_deserializer=node__pb2.PeerConnectNotification.FromString,
                )
        self.SubscribeCustomMsg = channel.unary_stream(
                '/cln.Node/SubscribeCustomMsg',
                request_serializer=node__pb2.StreamCustomMsgRequest.SerializeToString,
                response_deserializer=node__pb2.CustomMsgNotification.FromString,
                )


class NodeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Getinfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPeers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFunds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddGossip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPsbtOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AutoCleanInvoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AutoCleanOnce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AutoCleanStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectPeer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateInvoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Datastore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DatastoreUsage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOnion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelDatastore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelInvoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DevForgetChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmergencyRecover(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Recover(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecoverChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Invoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateInvoiceRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableInvoiceRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListInvoiceRequests(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatastore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListInvoices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendOnion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSendPays(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitAnyInvoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitInvoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitSendPay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewAddr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Withdraw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KeySend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FundPsbt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPsbt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignPsbt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UtxoPsbt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TxDiscard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TxPrepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TxSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPeerChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListClosedChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecodePay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Decode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelPay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelForward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableOffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Feerates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchInvoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FundChannel_Cancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FundChannel_Complete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FundChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FundChannel_Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FunderUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListForwards(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOffers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPays(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListHtlcs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiFundChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiWithdraw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Offer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenChannel_Abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenChannel_Bump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenChannel_Init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenChannel_Signed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenChannel_Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Plugin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenePayStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenePay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReserveInputs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCustomMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendInvoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendOnionMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPsbtVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignInvoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Splice_Init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Splice_Signed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Splice_Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnreserveInputs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpgradeWallet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitBlockHeight(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Wait(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListConfigs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Help(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PreApproveKeysend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PreApproveInvoice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StaticBackup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BkprChannelsApy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BkprDumpIncomeCsv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BkprInspect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BkprListAccountEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BkprListBalances(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BkprListIncome(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlacklistRune(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckRune(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRune(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowRunes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeBlockAdded(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeChannelOpenFailed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeChannelOpened(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeConnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeCustomMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Getinfo': grpc.unary_unary_rpc_method_handler(
                    servicer.Getinfo,
                    request_deserializer=node__pb2.GetinfoRequest.FromString,
                    response_serializer=node__pb2.GetinfoResponse.SerializeToString,
            ),
            'ListPeers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPeers,
                    request_deserializer=node__pb2.ListpeersRequest.FromString,
                    response_serializer=node__pb2.ListpeersResponse.SerializeToString,
            ),
            'ListFunds': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFunds,
                    request_deserializer=node__pb2.ListfundsRequest.FromString,
                    response_serializer=node__pb2.ListfundsResponse.SerializeToString,
            ),
            'SendPay': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPay,
                    request_deserializer=node__pb2.SendpayRequest.FromString,
                    response_serializer=node__pb2.SendpayResponse.SerializeToString,
            ),
            'ListChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListChannels,
                    request_deserializer=node__pb2.ListchannelsRequest.FromString,
                    response_serializer=node__pb2.ListchannelsResponse.SerializeToString,
            ),
            'AddGossip': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGossip,
                    request_deserializer=node__pb2.AddgossipRequest.FromString,
                    response_serializer=node__pb2.AddgossipResponse.SerializeToString,
            ),
            'AddPsbtOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPsbtOutput,
                    request_deserializer=node__pb2.AddpsbtoutputRequest.FromString,
                    response_serializer=node__pb2.AddpsbtoutputResponse.SerializeToString,
            ),
            'AutoCleanInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.AutoCleanInvoice,
                    request_deserializer=node__pb2.AutocleaninvoiceRequest.FromString,
                    response_serializer=node__pb2.AutocleaninvoiceResponse.SerializeToString,
            ),
            'AutoCleanOnce': grpc.unary_unary_rpc_method_handler(
                    servicer.AutoCleanOnce,
                    request_deserializer=node__pb2.AutocleanonceRequest.FromString,
                    response_serializer=node__pb2.AutocleanonceResponse.SerializeToString,
            ),
            'AutoCleanStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.AutoCleanStatus,
                    request_deserializer=node__pb2.AutocleanstatusRequest.FromString,
                    response_serializer=node__pb2.AutocleanstatusResponse.SerializeToString,
            ),
            'CheckMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckMessage,
                    request_deserializer=node__pb2.CheckmessageRequest.FromString,
                    response_serializer=node__pb2.CheckmessageResponse.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=node__pb2.CloseRequest.FromString,
                    response_serializer=node__pb2.CloseResponse.SerializeToString,
            ),
            'ConnectPeer': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectPeer,
                    request_deserializer=node__pb2.ConnectRequest.FromString,
                    response_serializer=node__pb2.ConnectResponse.SerializeToString,
            ),
            'CreateInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateInvoice,
                    request_deserializer=node__pb2.CreateinvoiceRequest.FromString,
                    response_serializer=node__pb2.CreateinvoiceResponse.SerializeToString,
            ),
            'Datastore': grpc.unary_unary_rpc_method_handler(
                    servicer.Datastore,
                    request_deserializer=node__pb2.DatastoreRequest.FromString,
                    response_serializer=node__pb2.DatastoreResponse.SerializeToString,
            ),
            'DatastoreUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.DatastoreUsage,
                    request_deserializer=node__pb2.DatastoreusageRequest.FromString,
                    response_serializer=node__pb2.DatastoreusageResponse.SerializeToString,
            ),
            'CreateOnion': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOnion,
                    request_deserializer=node__pb2.CreateonionRequest.FromString,
                    response_serializer=node__pb2.CreateonionResponse.SerializeToString,
            ),
            'DelDatastore': grpc.unary_unary_rpc_method_handler(
                    servicer.DelDatastore,
                    request_deserializer=node__pb2.DeldatastoreRequest.FromString,
                    response_serializer=node__pb2.DeldatastoreResponse.SerializeToString,
            ),
            'DelInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.DelInvoice,
                    request_deserializer=node__pb2.DelinvoiceRequest.FromString,
                    response_serializer=node__pb2.DelinvoiceResponse.SerializeToString,
            ),
            'DevForgetChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.DevForgetChannel,
                    request_deserializer=node__pb2.DevforgetchannelRequest.FromString,
                    response_serializer=node__pb2.DevforgetchannelResponse.SerializeToString,
            ),
            'EmergencyRecover': grpc.unary_unary_rpc_method_handler(
                    servicer.EmergencyRecover,
                    request_deserializer=node__pb2.EmergencyrecoverRequest.FromString,
                    response_serializer=node__pb2.EmergencyrecoverResponse.SerializeToString,
            ),
            'Recover': grpc.unary_unary_rpc_method_handler(
                    servicer.Recover,
                    request_deserializer=node__pb2.RecoverRequest.FromString,
                    response_serializer=node__pb2.RecoverResponse.SerializeToString,
            ),
            'RecoverChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.RecoverChannel,
                    request_deserializer=node__pb2.RecoverchannelRequest.FromString,
                    response_serializer=node__pb2.RecoverchannelResponse.SerializeToString,
            ),
            'Invoice': grpc.unary_unary_rpc_method_handler(
                    servicer.Invoice,
                    request_deserializer=node__pb2.InvoiceRequest.FromString,
                    response_serializer=node__pb2.InvoiceResponse.SerializeToString,
            ),
            'CreateInvoiceRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateInvoiceRequest,
                    request_deserializer=node__pb2.InvoicerequestRequest.FromString,
                    response_serializer=node__pb2.InvoicerequestResponse.SerializeToString,
            ),
            'DisableInvoiceRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableInvoiceRequest,
                    request_deserializer=node__pb2.DisableinvoicerequestRequest.FromString,
                    response_serializer=node__pb2.DisableinvoicerequestResponse.SerializeToString,
            ),
            'ListInvoiceRequests': grpc.unary_unary_rpc_method_handler(
                    servicer.ListInvoiceRequests,
                    request_deserializer=node__pb2.ListinvoicerequestsRequest.FromString,
                    response_serializer=node__pb2.ListinvoicerequestsResponse.SerializeToString,
            ),
            'ListDatastore': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatastore,
                    request_deserializer=node__pb2.ListdatastoreRequest.FromString,
                    response_serializer=node__pb2.ListdatastoreResponse.SerializeToString,
            ),
            'ListInvoices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListInvoices,
                    request_deserializer=node__pb2.ListinvoicesRequest.FromString,
                    response_serializer=node__pb2.ListinvoicesResponse.SerializeToString,
            ),
            'SendOnion': grpc.unary_unary_rpc_method_handler(
                    servicer.SendOnion,
                    request_deserializer=node__pb2.SendonionRequest.FromString,
                    response_serializer=node__pb2.SendonionResponse.SerializeToString,
            ),
            'ListSendPays': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSendPays,
                    request_deserializer=node__pb2.ListsendpaysRequest.FromString,
                    response_serializer=node__pb2.ListsendpaysResponse.SerializeToString,
            ),
            'ListTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTransactions,
                    request_deserializer=node__pb2.ListtransactionsRequest.FromString,
                    response_serializer=node__pb2.ListtransactionsResponse.SerializeToString,
            ),
            'MakeSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeSecret,
                    request_deserializer=node__pb2.MakesecretRequest.FromString,
                    response_serializer=node__pb2.MakesecretResponse.SerializeToString,
            ),
            'Pay': grpc.unary_unary_rpc_method_handler(
                    servicer.Pay,
                    request_deserializer=node__pb2.PayRequest.FromString,
                    response_serializer=node__pb2.PayResponse.SerializeToString,
            ),
            'ListNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNodes,
                    request_deserializer=node__pb2.ListnodesRequest.FromString,
                    response_serializer=node__pb2.ListnodesResponse.SerializeToString,
            ),
            'WaitAnyInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitAnyInvoice,
                    request_deserializer=node__pb2.WaitanyinvoiceRequest.FromString,
                    response_serializer=node__pb2.WaitanyinvoiceResponse.SerializeToString,
            ),
            'WaitInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitInvoice,
                    request_deserializer=node__pb2.WaitinvoiceRequest.FromString,
                    response_serializer=node__pb2.WaitinvoiceResponse.SerializeToString,
            ),
            'WaitSendPay': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitSendPay,
                    request_deserializer=node__pb2.WaitsendpayRequest.FromString,
                    response_serializer=node__pb2.WaitsendpayResponse.SerializeToString,
            ),
            'NewAddr': grpc.unary_unary_rpc_method_handler(
                    servicer.NewAddr,
                    request_deserializer=node__pb2.NewaddrRequest.FromString,
                    response_serializer=node__pb2.NewaddrResponse.SerializeToString,
            ),
            'Withdraw': grpc.unary_unary_rpc_method_handler(
                    servicer.Withdraw,
                    request_deserializer=node__pb2.WithdrawRequest.FromString,
                    response_serializer=node__pb2.WithdrawResponse.SerializeToString,
            ),
            'KeySend': grpc.unary_unary_rpc_method_handler(
                    servicer.KeySend,
                    request_deserializer=node__pb2.KeysendRequest.FromString,
                    response_serializer=node__pb2.KeysendResponse.SerializeToString,
            ),
            'FundPsbt': grpc.unary_unary_rpc_method_handler(
                    servicer.FundPsbt,
                    request_deserializer=node__pb2.FundpsbtRequest.FromString,
                    response_serializer=node__pb2.FundpsbtResponse.SerializeToString,
            ),
            'SendPsbt': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPsbt,
                    request_deserializer=node__pb2.SendpsbtRequest.FromString,
                    response_serializer=node__pb2.SendpsbtResponse.SerializeToString,
            ),
            'SignPsbt': grpc.unary_unary_rpc_method_handler(
                    servicer.SignPsbt,
                    request_deserializer=node__pb2.SignpsbtRequest.FromString,
                    response_serializer=node__pb2.SignpsbtResponse.SerializeToString,
            ),
            'UtxoPsbt': grpc.unary_unary_rpc_method_handler(
                    servicer.UtxoPsbt,
                    request_deserializer=node__pb2.UtxopsbtRequest.FromString,
                    response_serializer=node__pb2.UtxopsbtResponse.SerializeToString,
            ),
            'TxDiscard': grpc.unary_unary_rpc_method_handler(
                    servicer.TxDiscard,
                    request_deserializer=node__pb2.TxdiscardRequest.FromString,
                    response_serializer=node__pb2.TxdiscardResponse.SerializeToString,
            ),
            'TxPrepare': grpc.unary_unary_rpc_method_handler(
                    servicer.TxPrepare,
                    request_deserializer=node__pb2.TxprepareRequest.FromString,
                    response_serializer=node__pb2.TxprepareResponse.SerializeToString,
            ),
            'TxSend': grpc.unary_unary_rpc_method_handler(
                    servicer.TxSend,
                    request_deserializer=node__pb2.TxsendRequest.FromString,
                    response_serializer=node__pb2.TxsendResponse.SerializeToString,
            ),
            'ListPeerChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPeerChannels,
                    request_deserializer=node__pb2.ListpeerchannelsRequest.FromString,
                    response_serializer=node__pb2.ListpeerchannelsResponse.SerializeToString,
            ),
            'ListClosedChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListClosedChannels,
                    request_deserializer=node__pb2.ListclosedchannelsRequest.FromString,
                    response_serializer=node__pb2.ListclosedchannelsResponse.SerializeToString,
            ),
            'DecodePay': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodePay,
                    request_deserializer=node__pb2.DecodepayRequest.FromString,
                    response_serializer=node__pb2.DecodepayResponse.SerializeToString,
            ),
            'Decode': grpc.unary_unary_rpc_method_handler(
                    servicer.Decode,
                    request_deserializer=node__pb2.DecodeRequest.FromString,
                    response_serializer=node__pb2.DecodeResponse.SerializeToString,
            ),
            'DelPay': grpc.unary_unary_rpc_method_handler(
                    servicer.DelPay,
                    request_deserializer=node__pb2.DelpayRequest.FromString,
                    response_serializer=node__pb2.DelpayResponse.SerializeToString,
            ),
            'DelForward': grpc.unary_unary_rpc_method_handler(
                    servicer.DelForward,
                    request_deserializer=node__pb2.DelforwardRequest.FromString,
                    response_serializer=node__pb2.DelforwardResponse.SerializeToString,
            ),
            'DisableOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableOffer,
                    request_deserializer=node__pb2.DisableofferRequest.FromString,
                    response_serializer=node__pb2.DisableofferResponse.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=node__pb2.DisconnectRequest.FromString,
                    response_serializer=node__pb2.DisconnectResponse.SerializeToString,
            ),
            'Feerates': grpc.unary_unary_rpc_method_handler(
                    servicer.Feerates,
                    request_deserializer=node__pb2.FeeratesRequest.FromString,
                    response_serializer=node__pb2.FeeratesResponse.SerializeToString,
            ),
            'FetchInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchInvoice,
                    request_deserializer=node__pb2.FetchinvoiceRequest.FromString,
                    response_serializer=node__pb2.FetchinvoiceResponse.SerializeToString,
            ),
            'FundChannel_Cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.FundChannel_Cancel,
                    request_deserializer=node__pb2.Fundchannel_cancelRequest.FromString,
                    response_serializer=node__pb2.Fundchannel_cancelResponse.SerializeToString,
            ),
            'FundChannel_Complete': grpc.unary_unary_rpc_method_handler(
                    servicer.FundChannel_Complete,
                    request_deserializer=node__pb2.Fundchannel_completeRequest.FromString,
                    response_serializer=node__pb2.Fundchannel_completeResponse.SerializeToString,
            ),
            'FundChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.FundChannel,
                    request_deserializer=node__pb2.FundchannelRequest.FromString,
                    response_serializer=node__pb2.FundchannelResponse.SerializeToString,
            ),
            'FundChannel_Start': grpc.unary_unary_rpc_method_handler(
                    servicer.FundChannel_Start,
                    request_deserializer=node__pb2.Fundchannel_startRequest.FromString,
                    response_serializer=node__pb2.Fundchannel_startResponse.SerializeToString,
            ),
            'GetLog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLog,
                    request_deserializer=node__pb2.GetlogRequest.FromString,
                    response_serializer=node__pb2.GetlogResponse.SerializeToString,
            ),
            'FunderUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.FunderUpdate,
                    request_deserializer=node__pb2.FunderupdateRequest.FromString,
                    response_serializer=node__pb2.FunderupdateResponse.SerializeToString,
            ),
            'GetRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoute,
                    request_deserializer=node__pb2.GetrouteRequest.FromString,
                    response_serializer=node__pb2.GetrouteResponse.SerializeToString,
            ),
            'ListForwards': grpc.unary_unary_rpc_method_handler(
                    servicer.ListForwards,
                    request_deserializer=node__pb2.ListforwardsRequest.FromString,
                    response_serializer=node__pb2.ListforwardsResponse.SerializeToString,
            ),
            'ListOffers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListOffers,
                    request_deserializer=node__pb2.ListoffersRequest.FromString,
                    response_serializer=node__pb2.ListoffersResponse.SerializeToString,
            ),
            'ListPays': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPays,
                    request_deserializer=node__pb2.ListpaysRequest.FromString,
                    response_serializer=node__pb2.ListpaysResponse.SerializeToString,
            ),
            'ListHtlcs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListHtlcs,
                    request_deserializer=node__pb2.ListhtlcsRequest.FromString,
                    response_serializer=node__pb2.ListhtlcsResponse.SerializeToString,
            ),
            'MultiFundChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.MultiFundChannel,
                    request_deserializer=node__pb2.MultifundchannelRequest.FromString,
                    response_serializer=node__pb2.MultifundchannelResponse.SerializeToString,
            ),
            'MultiWithdraw': grpc.unary_unary_rpc_method_handler(
                    servicer.MultiWithdraw,
                    request_deserializer=node__pb2.MultiwithdrawRequest.FromString,
                    response_serializer=node__pb2.MultiwithdrawResponse.SerializeToString,
            ),
            'Offer': grpc.unary_unary_rpc_method_handler(
                    servicer.Offer,
                    request_deserializer=node__pb2.OfferRequest.FromString,
                    response_serializer=node__pb2.OfferResponse.SerializeToString,
            ),
            'OpenChannel_Abort': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenChannel_Abort,
                    request_deserializer=node__pb2.Openchannel_abortRequest.FromString,
                    response_serializer=node__pb2.Openchannel_abortResponse.SerializeToString,
            ),
            'OpenChannel_Bump': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenChannel_Bump,
                    request_deserializer=node__pb2.Openchannel_bumpRequest.FromString,
                    response_serializer=node__pb2.Openchannel_bumpResponse.SerializeToString,
            ),
            'OpenChannel_Init': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenChannel_Init,
                    request_deserializer=node__pb2.Openchannel_initRequest.FromString,
                    response_serializer=node__pb2.Openchannel_initResponse.SerializeToString,
            ),
            'OpenChannel_Signed': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenChannel_Signed,
                    request_deserializer=node__pb2.Openchannel_signedRequest.FromString,
                    response_serializer=node__pb2.Openchannel_signedResponse.SerializeToString,
            ),
            'OpenChannel_Update': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenChannel_Update,
                    request_deserializer=node__pb2.Openchannel_updateRequest.FromString,
                    response_serializer=node__pb2.Openchannel_updateResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=node__pb2.PingRequest.FromString,
                    response_serializer=node__pb2.PingResponse.SerializeToString,
            ),
            'Plugin': grpc.unary_unary_rpc_method_handler(
                    servicer.Plugin,
                    request_deserializer=node__pb2.PluginRequest.FromString,
                    response_serializer=node__pb2.PluginResponse.SerializeToString,
            ),
            'RenePayStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.RenePayStatus,
                    request_deserializer=node__pb2.RenepaystatusRequest.FromString,
                    response_serializer=node__pb2.RenepaystatusResponse.SerializeToString,
            ),
            'RenePay': grpc.unary_unary_rpc_method_handler(
                    servicer.RenePay,
                    request_deserializer=node__pb2.RenepayRequest.FromString,
                    response_serializer=node__pb2.RenepayResponse.SerializeToString,
            ),
            'ReserveInputs': grpc.unary_unary_rpc_method_handler(
                    servicer.ReserveInputs,
                    request_deserializer=node__pb2.ReserveinputsRequest.FromString,
                    response_serializer=node__pb2.ReserveinputsResponse.SerializeToString,
            ),
            'SendCustomMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCustomMsg,
                    request_deserializer=node__pb2.SendcustommsgRequest.FromString,
                    response_serializer=node__pb2.SendcustommsgResponse.SerializeToString,
            ),
            'SendInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.SendInvoice,
                    request_deserializer=node__pb2.SendinvoiceRequest.FromString,
                    response_serializer=node__pb2.SendinvoiceResponse.SerializeToString,
            ),
            'SendOnionMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendOnionMessage,
                    request_deserializer=node__pb2.SendonionmessageRequest.FromString,
                    response_serializer=node__pb2.SendonionmessageResponse.SerializeToString,
            ),
            'SetChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetChannel,
                    request_deserializer=node__pb2.SetchannelRequest.FromString,
                    response_serializer=node__pb2.SetchannelResponse.SerializeToString,
            ),
            'SetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConfig,
                    request_deserializer=node__pb2.SetconfigRequest.FromString,
                    response_serializer=node__pb2.SetconfigResponse.SerializeToString,
            ),
            'SetPsbtVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPsbtVersion,
                    request_deserializer=node__pb2.SetpsbtversionRequest.FromString,
                    response_serializer=node__pb2.SetpsbtversionResponse.SerializeToString,
            ),
            'SignInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.SignInvoice,
                    request_deserializer=node__pb2.SigninvoiceRequest.FromString,
                    response_serializer=node__pb2.SigninvoiceResponse.SerializeToString,
            ),
            'SignMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SignMessage,
                    request_deserializer=node__pb2.SignmessageRequest.FromString,
                    response_serializer=node__pb2.SignmessageResponse.SerializeToString,
            ),
            'Splice_Init': grpc.unary_unary_rpc_method_handler(
                    servicer.Splice_Init,
                    request_deserializer=node__pb2.Splice_initRequest.FromString,
                    response_serializer=node__pb2.Splice_initResponse.SerializeToString,
            ),
            'Splice_Signed': grpc.unary_unary_rpc_method_handler(
                    servicer.Splice_Signed,
                    request_deserializer=node__pb2.Splice_signedRequest.FromString,
                    response_serializer=node__pb2.Splice_signedResponse.SerializeToString,
            ),
            'Splice_Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Splice_Update,
                    request_deserializer=node__pb2.Splice_updateRequest.FromString,
                    response_serializer=node__pb2.Splice_updateResponse.SerializeToString,
            ),
            'UnreserveInputs': grpc.unary_unary_rpc_method_handler(
                    servicer.UnreserveInputs,
                    request_deserializer=node__pb2.UnreserveinputsRequest.FromString,
                    response_serializer=node__pb2.UnreserveinputsResponse.SerializeToString,
            ),
            'UpgradeWallet': grpc.unary_unary_rpc_method_handler(
                    servicer.UpgradeWallet,
                    request_deserializer=node__pb2.UpgradewalletRequest.FromString,
                    response_serializer=node__pb2.UpgradewalletResponse.SerializeToString,
            ),
            'WaitBlockHeight': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitBlockHeight,
                    request_deserializer=node__pb2.WaitblockheightRequest.FromString,
                    response_serializer=node__pb2.WaitblockheightResponse.SerializeToString,
            ),
            'Wait': grpc.unary_unary_rpc_method_handler(
                    servicer.Wait,
                    request_deserializer=node__pb2.WaitRequest.FromString,
                    response_serializer=node__pb2.WaitResponse.SerializeToString,
            ),
            'ListConfigs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConfigs,
                    request_deserializer=node__pb2.ListconfigsRequest.FromString,
                    response_serializer=node__pb2.ListconfigsResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=node__pb2.StopRequest.FromString,
                    response_serializer=node__pb2.StopResponse.SerializeToString,
            ),
            'Help': grpc.unary_unary_rpc_method_handler(
                    servicer.Help,
                    request_deserializer=node__pb2.HelpRequest.FromString,
                    response_serializer=node__pb2.HelpResponse.SerializeToString,
            ),
            'PreApproveKeysend': grpc.unary_unary_rpc_method_handler(
                    servicer.PreApproveKeysend,
                    request_deserializer=node__pb2.PreapprovekeysendRequest.FromString,
                    response_serializer=node__pb2.PreapprovekeysendResponse.SerializeToString,
            ),
            'PreApproveInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.PreApproveInvoice,
                    request_deserializer=node__pb2.PreapproveinvoiceRequest.FromString,
                    response_serializer=node__pb2.PreapproveinvoiceResponse.SerializeToString,
            ),
            'StaticBackup': grpc.unary_unary_rpc_method_handler(
                    servicer.StaticBackup,
                    request_deserializer=node__pb2.StaticbackupRequest.FromString,
                    response_serializer=node__pb2.StaticbackupResponse.SerializeToString,
            ),
            'BkprChannelsApy': grpc.unary_unary_rpc_method_handler(
                    servicer.BkprChannelsApy,
                    request_deserializer=node__pb2.BkprchannelsapyRequest.FromString,
                    response_serializer=node__pb2.BkprchannelsapyResponse.SerializeToString,
            ),
            'BkprDumpIncomeCsv': grpc.unary_unary_rpc_method_handler(
                    servicer.BkprDumpIncomeCsv,
                    request_deserializer=node__pb2.BkprdumpincomecsvRequest.FromString,
                    response_serializer=node__pb2.BkprdumpincomecsvResponse.SerializeToString,
            ),
            'BkprInspect': grpc.unary_unary_rpc_method_handler(
                    servicer.BkprInspect,
                    request_deserializer=node__pb2.BkprinspectRequest.FromString,
                    response_serializer=node__pb2.BkprinspectResponse.SerializeToString,
            ),
            'BkprListAccountEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.BkprListAccountEvents,
                    request_deserializer=node__pb2.BkprlistaccounteventsRequest.FromString,
                    response_serializer=node__pb2.BkprlistaccounteventsResponse.SerializeToString,
            ),
            'BkprListBalances': grpc.unary_unary_rpc_method_handler(
                    servicer.BkprListBalances,
                    request_deserializer=node__pb2.BkprlistbalancesRequest.FromString,
                    response_serializer=node__pb2.BkprlistbalancesResponse.SerializeToString,
            ),
            'BkprListIncome': grpc.unary_unary_rpc_method_handler(
                    servicer.BkprListIncome,
                    request_deserializer=node__pb2.BkprlistincomeRequest.FromString,
                    response_serializer=node__pb2.BkprlistincomeResponse.SerializeToString,
            ),
            'BlacklistRune': grpc.unary_unary_rpc_method_handler(
                    servicer.BlacklistRune,
                    request_deserializer=node__pb2.BlacklistruneRequest.FromString,
                    response_serializer=node__pb2.BlacklistruneResponse.SerializeToString,
            ),
            'CheckRune': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckRune,
                    request_deserializer=node__pb2.CheckruneRequest.FromString,
                    response_serializer=node__pb2.CheckruneResponse.SerializeToString,
            ),
            'CreateRune': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRune,
                    request_deserializer=node__pb2.CreateruneRequest.FromString,
                    response_serializer=node__pb2.CreateruneResponse.SerializeToString,
            ),
            'ShowRunes': grpc.unary_unary_rpc_method_handler(
                    servicer.ShowRunes,
                    request_deserializer=node__pb2.ShowrunesRequest.FromString,
                    response_serializer=node__pb2.ShowrunesResponse.SerializeToString,
            ),
            'SubscribeBlockAdded': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeBlockAdded,
                    request_deserializer=node__pb2.StreamBlockAddedRequest.FromString,
                    response_serializer=node__pb2.BlockAddedNotification.SerializeToString,
            ),
            'SubscribeChannelOpenFailed': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeChannelOpenFailed,
                    request_deserializer=node__pb2.StreamChannelOpenFailedRequest.FromString,
                    response_serializer=node__pb2.ChannelOpenFailedNotification.SerializeToString,
            ),
            'SubscribeChannelOpened': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeChannelOpened,
                    request_deserializer=node__pb2.StreamChannelOpenedRequest.FromString,
                    response_serializer=node__pb2.ChannelOpenedNotification.SerializeToString,
            ),
            'SubscribeConnect': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeConnect,
                    request_deserializer=node__pb2.StreamConnectRequest.FromString,
                    response_serializer=node__pb2.PeerConnectNotification.SerializeToString,
            ),
            'SubscribeCustomMsg': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeCustomMsg,
                    request_deserializer=node__pb2.StreamCustomMsgRequest.FromString,
                    response_serializer=node__pb2.CustomMsgNotification.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cln.Node', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Node(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Getinfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Getinfo',
            node__pb2.GetinfoRequest.SerializeToString,
            node__pb2.GetinfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListPeers',
            node__pb2.ListpeersRequest.SerializeToString,
            node__pb2.ListpeersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFunds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListFunds',
            node__pb2.ListfundsRequest.SerializeToString,
            node__pb2.ListfundsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SendPay',
            node__pb2.SendpayRequest.SerializeToString,
            node__pb2.SendpayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListChannels',
            node__pb2.ListchannelsRequest.SerializeToString,
            node__pb2.ListchannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddGossip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/AddGossip',
            node__pb2.AddgossipRequest.SerializeToString,
            node__pb2.AddgossipResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPsbtOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/AddPsbtOutput',
            node__pb2.AddpsbtoutputRequest.SerializeToString,
            node__pb2.AddpsbtoutputResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AutoCleanInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/AutoCleanInvoice',
            node__pb2.AutocleaninvoiceRequest.SerializeToString,
            node__pb2.AutocleaninvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AutoCleanOnce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/AutoCleanOnce',
            node__pb2.AutocleanonceRequest.SerializeToString,
            node__pb2.AutocleanonceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AutoCleanStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/AutoCleanStatus',
            node__pb2.AutocleanstatusRequest.SerializeToString,
            node__pb2.AutocleanstatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/CheckMessage',
            node__pb2.CheckmessageRequest.SerializeToString,
            node__pb2.CheckmessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Close',
            node__pb2.CloseRequest.SerializeToString,
            node__pb2.CloseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectPeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ConnectPeer',
            node__pb2.ConnectRequest.SerializeToString,
            node__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/CreateInvoice',
            node__pb2.CreateinvoiceRequest.SerializeToString,
            node__pb2.CreateinvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Datastore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Datastore',
            node__pb2.DatastoreRequest.SerializeToString,
            node__pb2.DatastoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DatastoreUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/DatastoreUsage',
            node__pb2.DatastoreusageRequest.SerializeToString,
            node__pb2.DatastoreusageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateOnion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/CreateOnion',
            node__pb2.CreateonionRequest.SerializeToString,
            node__pb2.CreateonionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelDatastore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/DelDatastore',
            node__pb2.DeldatastoreRequest.SerializeToString,
            node__pb2.DeldatastoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/DelInvoice',
            node__pb2.DelinvoiceRequest.SerializeToString,
            node__pb2.DelinvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DevForgetChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/DevForgetChannel',
            node__pb2.DevforgetchannelRequest.SerializeToString,
            node__pb2.DevforgetchannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EmergencyRecover(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/EmergencyRecover',
            node__pb2.EmergencyrecoverRequest.SerializeToString,
            node__pb2.EmergencyrecoverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Recover(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Recover',
            node__pb2.RecoverRequest.SerializeToString,
            node__pb2.RecoverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecoverChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/RecoverChannel',
            node__pb2.RecoverchannelRequest.SerializeToString,
            node__pb2.RecoverchannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Invoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Invoice',
            node__pb2.InvoiceRequest.SerializeToString,
            node__pb2.InvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateInvoiceRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/CreateInvoiceRequest',
            node__pb2.InvoicerequestRequest.SerializeToString,
            node__pb2.InvoicerequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableInvoiceRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/DisableInvoiceRequest',
            node__pb2.DisableinvoicerequestRequest.SerializeToString,
            node__pb2.DisableinvoicerequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListInvoiceRequests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListInvoiceRequests',
            node__pb2.ListinvoicerequestsRequest.SerializeToString,
            node__pb2.ListinvoicerequestsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDatastore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListDatastore',
            node__pb2.ListdatastoreRequest.SerializeToString,
            node__pb2.ListdatastoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListInvoices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListInvoices',
            node__pb2.ListinvoicesRequest.SerializeToString,
            node__pb2.ListinvoicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendOnion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SendOnion',
            node__pb2.SendonionRequest.SerializeToString,
            node__pb2.SendonionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSendPays(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListSendPays',
            node__pb2.ListsendpaysRequest.SerializeToString,
            node__pb2.ListsendpaysResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListTransactions',
            node__pb2.ListtransactionsRequest.SerializeToString,
            node__pb2.ListtransactionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakeSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/MakeSecret',
            node__pb2.MakesecretRequest.SerializeToString,
            node__pb2.MakesecretResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Pay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Pay',
            node__pb2.PayRequest.SerializeToString,
            node__pb2.PayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListNodes',
            node__pb2.ListnodesRequest.SerializeToString,
            node__pb2.ListnodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitAnyInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/WaitAnyInvoice',
            node__pb2.WaitanyinvoiceRequest.SerializeToString,
            node__pb2.WaitanyinvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/WaitInvoice',
            node__pb2.WaitinvoiceRequest.SerializeToString,
            node__pb2.WaitinvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitSendPay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/WaitSendPay',
            node__pb2.WaitsendpayRequest.SerializeToString,
            node__pb2.WaitsendpayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewAddr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/NewAddr',
            node__pb2.NewaddrRequest.SerializeToString,
            node__pb2.NewaddrResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Withdraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Withdraw',
            node__pb2.WithdrawRequest.SerializeToString,
            node__pb2.WithdrawResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KeySend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/KeySend',
            node__pb2.KeysendRequest.SerializeToString,
            node__pb2.KeysendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FundPsbt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/FundPsbt',
            node__pb2.FundpsbtRequest.SerializeToString,
            node__pb2.FundpsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPsbt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SendPsbt',
            node__pb2.SendpsbtRequest.SerializeToString,
            node__pb2.SendpsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignPsbt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SignPsbt',
            node__pb2.SignpsbtRequest.SerializeToString,
            node__pb2.SignpsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UtxoPsbt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/UtxoPsbt',
            node__pb2.UtxopsbtRequest.SerializeToString,
            node__pb2.UtxopsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TxDiscard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/TxDiscard',
            node__pb2.TxdiscardRequest.SerializeToString,
            node__pb2.TxdiscardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TxPrepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/TxPrepare',
            node__pb2.TxprepareRequest.SerializeToString,
            node__pb2.TxprepareResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TxSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/TxSend',
            node__pb2.TxsendRequest.SerializeToString,
            node__pb2.TxsendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPeerChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListPeerChannels',
            node__pb2.ListpeerchannelsRequest.SerializeToString,
            node__pb2.ListpeerchannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListClosedChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListClosedChannels',
            node__pb2.ListclosedchannelsRequest.SerializeToString,
            node__pb2.ListclosedchannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecodePay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/DecodePay',
            node__pb2.DecodepayRequest.SerializeToString,
            node__pb2.DecodepayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Decode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Decode',
            node__pb2.DecodeRequest.SerializeToString,
            node__pb2.DecodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelPay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/DelPay',
            node__pb2.DelpayRequest.SerializeToString,
            node__pb2.DelpayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelForward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/DelForward',
            node__pb2.DelforwardRequest.SerializeToString,
            node__pb2.DelforwardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/DisableOffer',
            node__pb2.DisableofferRequest.SerializeToString,
            node__pb2.DisableofferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Disconnect',
            node__pb2.DisconnectRequest.SerializeToString,
            node__pb2.DisconnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Feerates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Feerates',
            node__pb2.FeeratesRequest.SerializeToString,
            node__pb2.FeeratesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/FetchInvoice',
            node__pb2.FetchinvoiceRequest.SerializeToString,
            node__pb2.FetchinvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FundChannel_Cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/FundChannel_Cancel',
            node__pb2.Fundchannel_cancelRequest.SerializeToString,
            node__pb2.Fundchannel_cancelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FundChannel_Complete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/FundChannel_Complete',
            node__pb2.Fundchannel_completeRequest.SerializeToString,
            node__pb2.Fundchannel_completeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FundChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/FundChannel',
            node__pb2.FundchannelRequest.SerializeToString,
            node__pb2.FundchannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FundChannel_Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/FundChannel_Start',
            node__pb2.Fundchannel_startRequest.SerializeToString,
            node__pb2.Fundchannel_startResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/GetLog',
            node__pb2.GetlogRequest.SerializeToString,
            node__pb2.GetlogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FunderUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/FunderUpdate',
            node__pb2.FunderupdateRequest.SerializeToString,
            node__pb2.FunderupdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/GetRoute',
            node__pb2.GetrouteRequest.SerializeToString,
            node__pb2.GetrouteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListForwards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListForwards',
            node__pb2.ListforwardsRequest.SerializeToString,
            node__pb2.ListforwardsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListOffers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListOffers',
            node__pb2.ListoffersRequest.SerializeToString,
            node__pb2.ListoffersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPays(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListPays',
            node__pb2.ListpaysRequest.SerializeToString,
            node__pb2.ListpaysResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListHtlcs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListHtlcs',
            node__pb2.ListhtlcsRequest.SerializeToString,
            node__pb2.ListhtlcsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MultiFundChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/MultiFundChannel',
            node__pb2.MultifundchannelRequest.SerializeToString,
            node__pb2.MultifundchannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MultiWithdraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/MultiWithdraw',
            node__pb2.MultiwithdrawRequest.SerializeToString,
            node__pb2.MultiwithdrawResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Offer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Offer',
            node__pb2.OfferRequest.SerializeToString,
            node__pb2.OfferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenChannel_Abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/OpenChannel_Abort',
            node__pb2.Openchannel_abortRequest.SerializeToString,
            node__pb2.Openchannel_abortResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenChannel_Bump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/OpenChannel_Bump',
            node__pb2.Openchannel_bumpRequest.SerializeToString,
            node__pb2.Openchannel_bumpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenChannel_Init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/OpenChannel_Init',
            node__pb2.Openchannel_initRequest.SerializeToString,
            node__pb2.Openchannel_initResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenChannel_Signed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/OpenChannel_Signed',
            node__pb2.Openchannel_signedRequest.SerializeToString,
            node__pb2.Openchannel_signedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenChannel_Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/OpenChannel_Update',
            node__pb2.Openchannel_updateRequest.SerializeToString,
            node__pb2.Openchannel_updateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Ping',
            node__pb2.PingRequest.SerializeToString,
            node__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Plugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Plugin',
            node__pb2.PluginRequest.SerializeToString,
            node__pb2.PluginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenePayStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/RenePayStatus',
            node__pb2.RenepaystatusRequest.SerializeToString,
            node__pb2.RenepaystatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenePay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/RenePay',
            node__pb2.RenepayRequest.SerializeToString,
            node__pb2.RenepayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReserveInputs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ReserveInputs',
            node__pb2.ReserveinputsRequest.SerializeToString,
            node__pb2.ReserveinputsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendCustomMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SendCustomMsg',
            node__pb2.SendcustommsgRequest.SerializeToString,
            node__pb2.SendcustommsgResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SendInvoice',
            node__pb2.SendinvoiceRequest.SerializeToString,
            node__pb2.SendinvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendOnionMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SendOnionMessage',
            node__pb2.SendonionmessageRequest.SerializeToString,
            node__pb2.SendonionmessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SetChannel',
            node__pb2.SetchannelRequest.SerializeToString,
            node__pb2.SetchannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SetConfig',
            node__pb2.SetconfigRequest.SerializeToString,
            node__pb2.SetconfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPsbtVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SetPsbtVersion',
            node__pb2.SetpsbtversionRequest.SerializeToString,
            node__pb2.SetpsbtversionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SignInvoice',
            node__pb2.SigninvoiceRequest.SerializeToString,
            node__pb2.SigninvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/SignMessage',
            node__pb2.SignmessageRequest.SerializeToString,
            node__pb2.SignmessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Splice_Init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Splice_Init',
            node__pb2.Splice_initRequest.SerializeToString,
            node__pb2.Splice_initResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Splice_Signed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Splice_Signed',
            node__pb2.Splice_signedRequest.SerializeToString,
            node__pb2.Splice_signedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Splice_Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Splice_Update',
            node__pb2.Splice_updateRequest.SerializeToString,
            node__pb2.Splice_updateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnreserveInputs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/UnreserveInputs',
            node__pb2.UnreserveinputsRequest.SerializeToString,
            node__pb2.UnreserveinputsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpgradeWallet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/UpgradeWallet',
            node__pb2.UpgradewalletRequest.SerializeToString,
            node__pb2.UpgradewalletResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitBlockHeight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/WaitBlockHeight',
            node__pb2.WaitblockheightRequest.SerializeToString,
            node__pb2.WaitblockheightResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Wait(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Wait',
            node__pb2.WaitRequest.SerializeToString,
            node__pb2.WaitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListConfigs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ListConfigs',
            node__pb2.ListconfigsRequest.SerializeToString,
            node__pb2.ListconfigsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Stop',
            node__pb2.StopRequest.SerializeToString,
            node__pb2.StopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Help(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/Help',
            node__pb2.HelpRequest.SerializeToString,
            node__pb2.HelpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PreApproveKeysend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/PreApproveKeysend',
            node__pb2.PreapprovekeysendRequest.SerializeToString,
            node__pb2.PreapprovekeysendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PreApproveInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/PreApproveInvoice',
            node__pb2.PreapproveinvoiceRequest.SerializeToString,
            node__pb2.PreapproveinvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StaticBackup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/StaticBackup',
            node__pb2.StaticbackupRequest.SerializeToString,
            node__pb2.StaticbackupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BkprChannelsApy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/BkprChannelsApy',
            node__pb2.BkprchannelsapyRequest.SerializeToString,
            node__pb2.BkprchannelsapyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BkprDumpIncomeCsv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/BkprDumpIncomeCsv',
            node__pb2.BkprdumpincomecsvRequest.SerializeToString,
            node__pb2.BkprdumpincomecsvResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BkprInspect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/BkprInspect',
            node__pb2.BkprinspectRequest.SerializeToString,
            node__pb2.BkprinspectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BkprListAccountEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/BkprListAccountEvents',
            node__pb2.BkprlistaccounteventsRequest.SerializeToString,
            node__pb2.BkprlistaccounteventsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BkprListBalances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/BkprListBalances',
            node__pb2.BkprlistbalancesRequest.SerializeToString,
            node__pb2.BkprlistbalancesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BkprListIncome(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/BkprListIncome',
            node__pb2.BkprlistincomeRequest.SerializeToString,
            node__pb2.BkprlistincomeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlacklistRune(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/BlacklistRune',
            node__pb2.BlacklistruneRequest.SerializeToString,
            node__pb2.BlacklistruneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckRune(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/CheckRune',
            node__pb2.CheckruneRequest.SerializeToString,
            node__pb2.CheckruneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRune(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/CreateRune',
            node__pb2.CreateruneRequest.SerializeToString,
            node__pb2.CreateruneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShowRunes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cln.Node/ShowRunes',
            node__pb2.ShowrunesRequest.SerializeToString,
            node__pb2.ShowrunesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeBlockAdded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cln.Node/SubscribeBlockAdded',
            node__pb2.StreamBlockAddedRequest.SerializeToString,
            node__pb2.BlockAddedNotification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeChannelOpenFailed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cln.Node/SubscribeChannelOpenFailed',
            node__pb2.StreamChannelOpenFailedRequest.SerializeToString,
            node__pb2.ChannelOpenFailedNotification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeChannelOpened(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cln.Node/SubscribeChannelOpened',
            node__pb2.StreamChannelOpenedRequest.SerializeToString,
            node__pb2.ChannelOpenedNotification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeConnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cln.Node/SubscribeConnect',
            node__pb2.StreamConnectRequest.SerializeToString,
            node__pb2.PeerConnectNotification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeCustomMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cln.Node/SubscribeCustomMsg',
            node__pb2.StreamCustomMsgRequest.SerializeToString,
            node__pb2.CustomMsgNotification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
