#include <bitcoin/chainparams.h>
#include <common/cryptomsg.h>
#include <common/channel_config.h>
#include <common/channel_id.h>
#include <common/derive_basepoints.h>
#include <common/features.h>
#include <common/per_peer_state.h>

msgtype,dual_open_init,6000
# Which network are we configured for?
msgdata,dual_open_init,chainparams,chainparams,
msgdata,dual_open_init,our_feature_set,feature_set,
msgdata,dual_open_init,their_init_features_len,u16,
msgdata,dual_open_init,their_init_features,u8,their_init_features_len
# Base configuration we'll offer
msgdata,dual_open_init,our_config,channel_config,
# Minimum/maximum configuration values we'll accept
msgdata,dual_open_init,max_to_self_delay,u32,
msgdata,dual_open_init,min_effective_htlc_capacity_msat,amount_msat,
msgdata,dual_open_init,pps,per_peer_state,
msgdata,dual_open_init,our_basepoints,basepoints,
msgdata,dual_open_init,our_funding_pubkey,pubkey,
# Constraints in case the other end tries to open a channel.
msgdata,dual_open_init,minimum_depth,u32,
msgdata,dual_open_init,min_feerate,u32,
msgdata,dual_open_init,max_feerate,u32,
# Optional msg to send.
msgdata,dual_open_init,len,u16,
msgdata,dual_open_init,msg,u8,len
msgdata,dual_open_init,dev_fast_gossip,bool,

# master -> dualopend: do you have a memleak?
msgtype,dual_open_dev_memleak,6033

msgtype,dual_open_dev_memleak_reply,6133
msgdata,dual_open_dev_memleak_reply,leak,bool,
