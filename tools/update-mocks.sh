#!/usr/bin/env bash
# Script to rewrite the autogenerated mocks in a unit test between
# /* AUTOGENERATED MOCKS START */ and /* AUTOGENERATED MOCKS END */
# based on link failures.

set -e
FILE="$1"

BASE=/tmp/mocktmp.$$.$(echo "$@" | tr / _)
trap 'mv $BASE.old $FILE; rm -f $BASE.*' EXIT

START=$(grep -F -n '/* AUTOGENERATED MOCKS START */' "$FILE" | cut -d: -f1)
END=$(grep -F -n '/* AUTOGENERATED MOCKS END */' "$FILE" | cut -d: -f1)

function make_binary() {
    $MAKE SUPPRESS_GENERATION=1 "${FILE/%.c/}" 2> "${BASE}.err" >/dev/null
}

if [ -n "$START" ]; then
    mv "$FILE" "${BASE}.old"
    echo "mocking out ${FILE}:"
    head -n "$START" "${BASE}.old" > "$FILE"
    tail -n +"$END" "${BASE}.old" >> "$FILE"
    # Try to make binary.
    if ! make_binary; then
	# Some linkers (e.g. LLVM's one) don't print all errors. If this is the
	# case, then re-run, asking them to do so. Search for something like
	# this in the output:
	# ld: error: too many errors emitted, stopping now (use -error-limit=0 to see all errors)
	if grep -q 'too many errors emitted.*-error-limit=0' "${BASE}.err"; then
	    LDFLAGS=-Wl,-error-limit=0 make_binary || :
	fi
	tools/mockup.sh "$FILE" < "${BASE}.err" >> "${BASE}.stubs"
	# If there are no link errors, maybe compile fail for other reason?
	if ! grep -F -q 'Generated stub for' "${BASE}.stubs"; then
	    cat "${BASE}.err"
	    exit 1
	fi
	sed -n 's,.*Generated stub for \(.*\) .*,	\1,p' < "${BASE}.stubs"
	head -n "$START" "${BASE}.old" > "$FILE"
	cat "${BASE}.stubs" >> "$FILE"
	tail -n +"$END" "${BASE}.old" >> "$FILE"
    else
	echo "...build succeeded without stubs"
    fi
fi

# All good.
rm -f "$BASE".*
trap "" EXIT
