{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "destinations"
  ],
  "properties": {
    "destinations": {
      "type": "array",
      "description": "there must be at least one entry in *destinations*; it cannot be an empty array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "amount"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "node ID, with an optional *@host:port* appended to it in a manner understood by **connect**; see lightning-connect(7). Each entry in the *destinations* array must have a unique node *id*. If not already connected, **multifundchannel** will automatically attempt to connect to the node"
          },
          "amount": {
            "type": "msat",
            "description": "amount in satoshis taken from the internal wallet to fund the channel (but if we have any anchor channels, this will always leave at least  `min-emergency-msat` as change). The string *all* can be used to specify all available funds (or 16,777,215 satoshi if more is available and large channels were not negotiated with the peer). Otherwise it is in satoshi precision; it can be a whole number, a whole number ending in *sat*, a  whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*. The value cannot be less than the dust limit, currently  546 satoshi as of this writing, nor more than 16,777,215 satoshi (unless large channels were negotiated with the peer)"
          },
          "announce": {
            "type": "boolean",
            "description": "flag that indicates whether to announce the channel with this, default `true`. If set to `false`, the channel is unpublished"
          },
          "push_msat": {
            "type": "msat",
            "description": "amount of millisatoshis to outright give to the node. This is a gift to the peer, and you do not get a proof-of-payment out of this"
          },
          "close_to": {
            "type": "string",
            "description": "bitcoin address to which the channel funds should be sent to on close. Only valid if both peers have negotiated `option_upfront_shutdown_script` Returns `close_to` set to closing script iff is negotiated"
          },
          "request_amt": {
            "type": "msat",
            "description": "amount of liquidity you'd like to lease from peer. If peer supports `option_will_fund`, indicates to them to include this much liquidity into the channel. Must also pass in *compact_lease*"
          },
          "compact_lease": {
            "type": "string",
            "description": "compact represenation of the peer's expected channel lease terms. If the peer's terms don't match this set, we will fail to open the channel to this destination"
          },
          "mindepth": {
            "type": "u32",
            "description": "number of confirmations before we consider the channel active"
          },
          "reserve": {
            "type": "msat",
            "description": "amount we want the peer to maintain on its side of the channel. Default is 1% of the funding amount. It can be a whole number, a whole number ending in *sat*, a whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*"
          }
        }
      }
    },
    "feerate": {
      "type": "feerate",
      "description": "feerate used for the opening transaction, and if *commitment_feerate* is not set, as initial feerate for commitment and HTLC transactions. See NOTES in lightning-feerates(7) for possible values. The default is *normal*"
    },
    "minconf": {
      "type": "integer",
      "description": "minimum number of confirmations that used outputs should have. Default is 1",
      "default": 1
    },
    "utxos": {
      "type": "array",
      "items": {
        "type": "outpoint",
        "description": "utxos to be used to fund the channel, as an array of `txid:vout`"
      }
    },
    "minchannels": {
      "type": "integer",
      "description": "re-attempt funding as long as at least this many peers remain (must not be zero). The **multifundchannel** command will only fail if too many  peers fail the funding process"
    },
    "commitment_feerate": {
      "type": "feerate",
      "description": "initial feerate for commitment and HTLC transactions. See *feerate* for valid values"
    }
  }
}
