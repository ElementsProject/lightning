{
  "$schema": "../rpc-schema-draft.json",
  "type": "object",
  "rpc": "injectpaymentonion",
  "title": "Send a payment with a custom onion packet",
  "description": [
    "The **injectpaymentonion** RPC command causes the node to receive a payment attempt similar to the way it would receive one from a peer. The onion packet is unwrapped, then handled normally: either as a local payment, or forwarded to the next peer.",
    "Compared to lightning-sendonion(7): the handling of blinded paths and self-payments is trivial, and the interface blocks until the payment succeeds or fails.  The call also fails if this payment_hash has already been successfully paid."
  ],
  "request": {
    "additionalProperties": false,
    "required": [
      "onion",
      "payment_hash",
      "amount_msat",
      "cltv_expiry",
      "partid",
      "groupid"
    ],
    "properties": {
      "onion": {
        "type": "hex",
        "description": [
          "Hex-encoded 1366 bytes long blob that was returned by either of the tools that can generate onions. It contains the payloads destined for each hop and some metadata. Please refer to [BOLT 04][bolt04] for further details. If is specific to the route that is being used and the *payment_hash* used to construct, and therefore cannot be reused for other payments or to attempt a separate route. The custom onion can generally be created using the `devtools/onion` CLI tool, or the **createonion** RPC command."
        ]
      },
      "payment_hash": {
        "type": "hash",
        "description": [
          "Specifies the 32 byte hex-encoded hash to use as a challenge to the HTLC that we are sending. It is specific to the onion and has to match the one the onion was created with."
        ]
      },
      "amount_msat": {
        "type": "msat",
        "description": [
          "The amount for the first HTLC in millisatoshis.  This is also the amount which will be forwarded to the first peer (if any) as we do not charge fees on our own payments.  Note: this is shown in listsendpays as `amount_sent_msat`."
        ]
      },
      "cltv_expiry": {
        "type": "u16",
        "description": [
          "The cltv_expiry for the first HTLC in blocks.  This must be greater than the current blockheight."
        ]
      },
      "partid": {
        "type": "u64",
        "description": [
          "The non-zero identifier for multiple parallel partial payments with the same *payment_hash*."
        ]
      },
      "groupid": {
        "type": "u64",
        "description": [
          "Grouping key to disambiguate multiple attempts to pay the same *payment_hash*.  All payments in other groups must be completed before starting a new group."
        ]
      },
      "label": {
        "type": "string",
        "description": [
          "Can be used to provide a human readable reference to retrieve the payment at a later time."
        ]
      },
      "invstring": {
        "type": "string",
        "description": [
          "Usually a bolt11 or bolt12 string, which, it will be returned in *waitsendpay* and *listsendpays* results."
        ]
      },
      "localinvreqid": {
        "type": "hash",
        "description": [
          "`localinvreqid` is used by offers to link a payment attempt to a local `invoice_request` offer created by lightningd-invoicerequest(7)."
        ]
      },
      "destination_msat": {
        "type": "msat",
        "added": "v24.11.1",
        "description": [
          "Amount that is actually delivered to the destination (i.e. `amount_msat` minus fees), for showing in listsendpays (confusingly, as `amount_msat`)."
        ]
      }
    }
  },
  "response": {
    "additionalProperties": false,
    "required": [
      "created_index",
      "created_at",
      "completed_at",
      "payment_preimage"
    ],
    "properties": {
      "created_at": {
        "type": "u64",
        "description": [
          "The UNIX timestamp showing when this payment was initiated."
        ]
      },
      "completed_at": {
        "type": "u64",
        "description": [
          "The UNIX timestamp showing when this payment was completed."
        ]
      },
      "created_index": {
        "type": "u64",
        "description": [
          "1-based index indicating order this payment was created in."
        ]
      },
      "payment_preimage": {
        "added": "v24.11",
        "type": "secret",
        "description": [
          "The proof of payment: SHA256 of this is the invoice's **payment_hash**."
        ]
      }
    }
  },
  "errors": [
    "The following error codes may occur:",
    "",
    "- 218: injectpaymentonion failed",
    "",
    "The *onionreply* is returned in the error *data*, which can be unwrapped to discover the error",
    "",
    "- 219: injectpaymentonion already succeeded",
    "",
    "The *data* object contains the previous success, as per lightning-sendpay."
  ],
  "author": [
    "Rusty Russell <<rusty@rustcorp.com.au>> is mainly responsible."
  ],
  "see_also": [
    "lightning-createonion(7)",
    "lightning-sendonion(7)",
    "lightning-listsendpays(7)"
  ],
  "resources": [
    "Main web site: <https://github.com/ElementsProject/lightning>",
    "",
    "[bolt04]: https://github.com/lightning/bolts/blob/master/04-onion-routing.md"
  ],
  "examples": [
    {
      "request": {
        "id": "example:injectpaymentonion#1",
        "method": "injectpaymentonion",
        "params": {
          "onion": "0003e37337e2f488ed89a79030fb54f4f3bda09a28f80623adc2864fbf1aee71ff50c460e4e973dea414931035804e7ef03a4bdad4e3729bf85f16b6710a83fa2a3ae94332e0ba70e1d1b69100256a9e4b6144948e835c0738918afe33aac4714bc27c5c70a81e314428e8d17017c4cdc5df2ed3ec75d45cf7b5bb38547c5dd4a34134f390e516f82e97843754fd6ecbfeb1cf2e7d9ad520854592226c05210e2ddc3fb059bc6ed28e393b748be02572bd4bed4721cbc26219ad0714b4cbd329f21a727626545e9c5e9bf84cc7ed94729efdc47828560ace966b698b745d688605c390f62b67a1e0eaa84585bbb4440c442513128ff259729c9bc5dfb42c461afb5fa9f29bf04fbc04f479b0445be49f44bb15b29d79ff0bd38032f2df870dd6da61754202a1cb495df5609898c0a22582b53cb794d84a8d2931602d647b66d5b37bc122200c77b88000d7465fd51e12a825e7987844c0e36ec0c4f3a6a6b513039d4d4173e6fbea8ab68391eee74579c25b92f874e562666291997b36032f72a999bec029c99cf09941884594c32df37aa08c4bfa7ced0291251b49f9ff1814c48389da17800b8230f896d26fe1ca1d5ae7a06d195ba68fd6fdd7e92539d02107a7b72edb841fc27c526e8c5479066fd4bd8ccf955906372d4343e07f131bc9bdc2dfab65c9425e8522bcb2086e650f53d0fed6b3d24a8929a0e2420cf2239ea4bd0fb74a9fae6475d3a6a9efc70c24b0695231477d194bcedce540f763d749e075f63f8307f712e1c2e2705b43b2bed53dd928467ef2f1fd426b9a350981909cfdfd95fc2ba5a8ab90c3afb48a988ad0220716770e8bde7d21b89cbc1621cf6dc223cdfb74cdb5344526eaa72bd2ad1da482cb87f4ddae7f9f753b95a1a09b83478688b5f4a0eb7015ff469334e2491a9f50d7e265811f3776c7282cda704d99c343353a7955798f08dc30cf7e7fcb70c3901767e6e0db48b39f79ef65ddd0493bf40145a014b52dbf6eb7a5b51537580eeff790fe75f4fa9b9cbc5c9efa54561738b03aaa2ad07495f49552fcd26b1b1015e92d8fdbd22661d01215140a62416f6df1a33c0dbd55d46ee86a8e366f5ab2bd27ff7e12194784a3429ac5aa750c6084c379bd17b9e27ea1007a277ede2c9069daa0267f3cf9249284b456b4860fb7a3004943c06f644f1c5d60a46566812b3450450a484a2893eefccbbcc1c99258c727300000b7fa4f2d26e8895b3beee8a4fa98a1b96870d6ef81053b03632494d2a1face2d380711c20c74b2b3b040f18a765a0e8222e0b42f8358949d4645aa710a796ebce90669b5059584badc56d410476e67977f991fdc7b1ffce860407cbd73469b56af18cc00d0a38001f716b85a4b7225709195c8e1a6fdda5b6259700cc5cd29ac6ef0d2f091e0e07205adc604512ba288641516faa68c9f5bd65e2bc31c1a8ba478e60645837fde18339d606658d43fae0e99b9a39c4a8d517b0ed065e024617deb893b8d25f4e6feacca47fecedd07426e0194ec57b6011ea1f8ad0d528ad5db8f16c501b9fd15b3e9369cb9df5b1ef13500a9858e906b50ecbd9584190d3d9e971d539a4489201317acf4a6b1fa9caf281d40194955cfe3b6005ff1855d46de0a228509d241159a069a9e35a6d0b69033daa362096c8cfa2dbbf0ade2a91e0456f23314cbfe8f961d3703fbaf9e3928cea19b4a7d4a27188f633bdfa57fcecd8a4d793ff6f34cd3137f647a2edeaacac4bd493769c4d69f984d1c3aa8d5ee33956fe9abeef052170ca29c56233e1a8181af9364819c508bcea77aeb2d7cbe24a457c341e00dac875d7caf8898ff0c6c8679ebee963a454f92451da43308b2fbec5621521737f90b35c891c038f94e89ece44f53760ffa4e43b9abaf52070e4185c6e723041a947c536b8027608144",
          "payment_hash": "ff498c3300881ea7a3c04193e43f123444c644662008108c23229da3511bedd1",
          "amount_msat": 1000,
          "cltv_expiry": 145,
          "partid": 1,
          "groupid": 0
        }
      },
      "response": {
        "created_index": 12,
        "created_at": 1738000000,
        "completed_at": 1738000000,
        "payment_preimage": "08377744ca985c1e08377744ca985c1e08377744ca985c1e08377744ca985c1e"
      }
    }
  ]
}
