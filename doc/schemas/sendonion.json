{
  "$schema": "../rpc-schema-draft.json",
  "type": "object",
  "rpc": "sendonion",
  "title": "Send a payment with a custom onion packet",
  "description": [
    "Note: you probably want to use the more modern and flexible `injectpaymentonion` command instead of this.",
    "The **sendonion** RPC command can be used to initiate a payment attempt with a custom onion packet. The onion packet is used to deliver instructions for hops along the route on how to behave. Normally these instructions are indications on where to forward a payment and what parameters to use, or contain details of the payment for the final hop. However, it is possible to add arbitrary information for hops in the custom onion, allowing for custom extensions that are not directly supported by Core Lightning.",
    "",
    "If the first element of *route* does not have \"channel\" set, a suitable channel (if any) will be chosen, otherwise that specific short-channel-id is used. The following is an example of a 3 hop onion:",
    "",
    "```json",
    "[",
    "  \"298606954e9de3e9d938d18a74fed794c440e8eda82e52dc08600953c8acf9c4\",",
    "  \"2dc094de72adb03b90894192edf9f67919cb2691b37b1f7d4a2f4f31c108b087\",",
    "  \"a7b82b240dbd77a4ac8ea07709b1395d8c510c73c17b4b392bb1f0605d989c85\"",
    "]",
    "```"
  ],
  "request": {
    "required": [
      "onion",
      "first_hop",
      "payment_hash"
    ],
    "additionalProperties": false,
    "properties": {
      "onion": {
        "type": "hex",
        "description": [
          "Hex-encoded 1366 bytes long blob that was returned by either of the tools that can generate onions. It contains the payloads destined for each hop and some metadata. Please refer to [BOLT 04][bolt04] for further details. If is specific to the route that is being used and the *payment_hash* used to construct, and therefore cannot be reused for other payments or to attempt a separate route. The custom onion can generally be created using the `devtools/onion` CLI tool, or the **createonion** RPC command."
        ]
      },
      "first_hop": {
        "type": "object",
        "description": [
          "Instructs Core Lightning which peer to send the onion to. It is a JSON dictionary that corresponds to the first element of the route array returned by *getroute* (so fields not mentioned here are ignored)."
        ],
        "required": [
          "id",
          "amount_msat",
          "delay"
        ],
        "additionalProperties": true,
        "properties": {
          "id": {
            "type": "pubkey",
            "description": [
              "Node id for the peer. Use any available channel available to this peer."
            ]
          },
          "amount_msat": {
            "type": "msat",
            "description": [
              "The amount to add an HTLC for millisatoshis."
            ]
          },
          "delay": {
            "type": "u16",
            "description": [
              "The number of blocks delay of blocks on top of the current blockheight."
            ]
          }
        }
      },
      "payment_hash": {
        "type": "hash",
        "description": [
          "Specifies the 32 byte hex-encoded hash to use as a challenge to the HTLC that we are sending. It is specific to the onion and has to match the one the onion was created with."
        ]
      },
      "label": {
        "type": "string",
        "description": [
          "Can be used to provide a human readable reference to retrieve the payment at a later time."
        ]
      },
      "shared_secrets": {
        "type": "array",
        "description": [
          "A JSON list of 32 byte hex-encoded secrets that were used when creating the onion. Core Lightning can send a payment with a custom onion without the knowledge of these secrets, however it will not be able to parse an eventual error message since that is encrypted with the shared secrets used in the onion. If *shared_secrets* is provided Core Lightning will decrypt the error, act accordingly, e.g., add a `channel_update` included in the error to its network view, and set the details in *listsendpays* correctly. If it is not provided Core Lightning will store the encrypted onion, and expose it in *listsendpays* allowing the caller to decrypt it externally. If it is not provided the Core Lightning node does not know how long the route is, which channels or nodes are involved, and what an eventual error could have been. It can therefore be used for oblivious payments."
        ],
        "items": {
          "type": "secret"
        }
      },
      "partid": {
        "type": "u16",
        "description": [
          "If provided and non-zero, allows for multiple parallel partial payments with the same *payment_hash*."
        ]
      },
      "bolt11": {
        "type": "string",
        "description": [
          "If provided, it will be returned in *waitsendpay* and *listsendpays* results."
        ]
      },
      "amount_msat": {
        "type": "msat",
        "description": [
          "Used to annotate the payment, and is returned by *waitsendpay* and *listsendpays*."
        ]
      },
      "destination": {
        "type": "pubkey",
        "description": [
          "If provided, it will be returned in **listpays** result."
        ]
      },
      "localinvreqid": {
        "type": "hash",
        "description": [
          "`localinvreqid` is used by offers to link a payment attempt to a local `invoice_request` offer created by lightningd-invoicerequest(7)."
        ]
      },
      "groupid": {
        "type": "u64",
        "description": [
          "Grouping key to disambiguate multiple attempts to pay an invoice or the same payment_hash."
        ]
      },
      "description": {
        "added": "v0.11.0",
        "type": "string",
        "description": [
          "If provided, it will be returned in *waitsendpay* and *listsendpays* results."
        ]
      },
      "total_amount_msat": {
        "type": "msat",
        "description": [
          "This is the full amount requested by the destination in the invoice. It is needed internally for multi-part payments.",
          "Its default value is 0 msat for backwards compatibility."
        ],
        "default": "0",
        "added": "v25.05"
      }
    }
  },
  "response": {
    "required": [
      "created_index",
      "id",
      "payment_hash",
      "status",
      "created_at",
      "amount_sent_msat"
    ],
    "additionalProperties": true,
    "properties": {
      "created_index": {
        "added": "v23.11",
        "type": "u64",
        "description": [
          "1-based index indicating order this payment was created in."
        ]
      },
      "id": {
        "type": "u64",
        "description": [
          "Old synonym for created_index."
        ]
      },
      "payment_hash": {
        "type": "hash",
        "description": [
          "The hash of the *payment_preimage* which will prove payment."
        ]
      },
      "status": {
        "type": "string",
        "enum": [
          "pending",
          "complete"
        ],
        "description": [
          "Status of the payment (could be complete if already sent previously)."
        ]
      },
      "amount_msat": {
        "type": "msat",
        "description": [
          "The amount delivered to destination (if known)."
        ]
      },
      "destination": {
        "type": "pubkey",
        "description": [
          "The final destination of the payment if known."
        ]
      },
      "created_at": {
        "type": "u64",
        "description": [
          "The UNIX timestamp showing when this payment was initiated."
        ]
      },
      "amount_sent_msat": {
        "type": "msat",
        "description": [
          "The amount sent."
        ]
      },
      "label": {
        "type": "string",
        "description": [
          "The label, if given to sendpay."
        ]
      },
      "bolt11": {
        "type": "string",
        "description": [
          "The bolt11 string (if supplied)."
        ]
      },
      "bolt12": {
        "type": "string",
        "description": [
          "The bolt12 string (if supplied)."
        ]
      },
      "partid": {
        "type": "u64",
        "description": [
          "The partid (if supplied) to sendonion/sendpay."
        ]
      }
    },
    "allOf": [
      {
        "if": {
          "additionalProperties": true,
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "complete"
              ]
            }
          }
        },
        "then": {
          "additionalProperties": false,
          "required": [
            "payment_preimage"
          ],
          "properties": {
            "created_index": {},
            "id": {},
            "payment_hash": {},
            "status": {},
            "msatoshi": {},
            "amount_msat": {},
            "destination": {},
            "created_at": {},
            "groupid": {},
            "msatoshi_sent": {},
            "amount_sent_msat": {},
            "label": {},
            "bolt11": {},
            "bolt12": {},
            "partid": {},
            "updated_index": {
              "added": "v23.11",
              "type": "u64",
              "description": [
                "1-based index indicating order this payment was changed."
              ]
            },
            "payment_preimage": {
              "type": "secret",
              "description": [
                "The proof of payment: SHA256 of this **payment_hash**."
              ]
            }
          }
        }
      },
      {
        "if": {
          "additionalProperties": true,
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "pending"
              ]
            }
          }
        },
        "then": {
          "additionalProperties": false,
          "required": [],
          "properties": {
            "created_index": {},
            "id": {},
            "payment_hash": {},
            "status": {},
            "msatoshi": {},
            "amount_msat": {},
            "destination": {},
            "created_at": {},
            "groupid": {},
            "msatoshi_sent": {},
            "amount_sent_msat": {},
            "label": {},
            "bolt11": {},
            "bolt12": {},
            "partid": {},
            "message": {
              "type": "string",
              "description": [
                "Monitor status with listpays or waitsendpay."
              ]
            }
          }
        }
      }
    ]
  },
  "errors": [
    "The following error codes may occur:",
    "",
    "- 202: an parseable onion",
    "",
    "the error details are decrypted and presented here, if *shared_secrets* was provided and an error was returned by one of the intermediate nodes"
  ],
  "author": [
    "Christian Decker <<decker.christian@gmail.com>> is mainly responsible."
  ],
  "see_also": [
    "lightning-injectpaymentonion(7)",
    "lightning-createonion(7)",
    "lightning-sendpay(7)",
    "lightning-listsendpays(7)"
  ],
  "resources": [
    "Main web site: <https://github.com/ElementsProject/lightning>",
    "",
    "[bolt04]: https://github.com/lightning/bolts/blob/master/04-onion-routing.md"
  ],
  "examples": [
    {
      "request": {
        "id": "example:sendonion#1",
        "method": "sendonion",
        "params": {
          "onion": "00021d5b7e75f56e8fb8c5dbbcfdf954b89d171b35fced6bf4ad929b3b6e081e16c93046493f6f0f4e6f983b424e799b9f60ae7c75fa260760393aad7958e04ec5ea5a06e11078daa9ff31a1aaeed8b04f5ce319118a4bdda9e90861829161dd4d44164816f566d0cc219da32fdd08249068cec2fd589fb216933b95adce045364fcb6d6905a4e4169346b75e6ccfecb0cfdfd74d0574eb684b952db7df8443541cc28296f42afeafbb7a34c3f8c64dce9c0ebb37f5485f66246cbf11b7a8cd4a45d64723b7e706b1ef3eff4ce6133aa86f6c044337716bd0c1173b92b13c4d11453ab850fd945c1af91d3ce41928600bbafbc81b56e3bc704a678a783e2232bc80bc4afa93f84498127123096af80ca5295bb02b6c6524720a0f4dc81075688632b9428f6f4399a0ecf6c17e5c3015c9715af5127000787cc8d7e023f96b6e0175d600911c1dffef6a0d2a8ea8059b287e9e941810de5190ce0c274d6452a8ecc06a0cb98a9550e7e80e8eebdb9c326ca2a3f25b3147daaa68b8d5f745344938645535f858f6a4484b17322b4076714994865ac1660c4f364309bb5147c55bf8458cf6aa7420896d2cb1ee0fe301c83109a102a42d41063c32732ef0366b9b9bd7516c3f7607a54eb3255fa6589bd3ea021cb9deee71b3ea33fa9e509c085216243ea6cea4acf038fee2a4e7418f4087c79423f8bc94fda1ea7de66cb06c131304e39b20634e70721f028427093e059065e6d157cbbdb1ea02476478033164cc90b7707c612897224099c8f3cae86cf0503a1fc1c21e86f4fa7c6332786cc0c44b379516032a93d1c4853453b819d30438814b28bbb14989dfb88819e3fd9b38267b84cc052637ca9c5ae2b149fb53831e4237036cde4b6dd0c0754c52551585692beba1b4228540255ad6fd6bd7912acd47816023332a52075db994decac8cc3611a0f222638084b71a3f8f4c019af28524d96a609fd7cf2e660414b8db54a2d77087087313dea24cab947c04a3ca191d3ba8ffd5ddef72fbc6ad1fc7c71e97cc3da1b677108b907c591c32cb3a41b5636292d9db891013c2d729d67162e4388bee98469f98871af9b5580768f0db885106b981274060f1b3bca8f7297287c6688f6c30054f727d7dd9baa097175fb198b3477c2f1545ea6425f0a6df732ea4be943dff9cece87a9751be426669b1f8b3cb3f7a39f2b72ee68c287e6db1c86405b782c774c22acad3a68bb377713958f6c89e7b8a3d17e52416ea9bdb959949b47af8dd6b380ebc0481873de65edf599f3c1f51c9e4abd388e4d6ad6cf48e5c279286ed7bc683523b9c016227af1cdcf856ec11b47d3f369ac4fde6cee8e19748ef6c365c5effdc81afe560e1597891256dad1b849f550ab681b0c8ba660f1172ac3f63069140c2180537d793f899ba897dae47a848b6e4b1ceac369c59257a3c1d4f2cefe0b64e84ac010397bc55d77a8f801b227ab6453770fc9775788c4a9ce7bdc5f40aa156d1b0c4f9ef41dfbb0518151809761d22e503b9b8725704bbe4f7aaaf4188f80106354743e3f605a1cee1d6d09226176a913a3f9fe9513a081377c820e582fffd534cb27146264972b9f5362dc37cacb821e64ef711eb39addbe1a747df2b1cc54f26dfc1a32ac26297b980e4a492e2242d6d745e508e65f6162ba6e28d4f1f2177c5896c9d82019a74cd6f136e04af3a01a2178e961c0d4e63235982807579ea34f306ec0ea3f0e58a8fee4dd28c2303fa9e09e45b8c9cbc6a69aba0b838473a33e2a287f0824936bfd427f72b7bb7362a40f77136ecfe53173b2acfbbdd49ec390078926d0a9a69114312fee5a9b5ad8f7b80711f76d5ffca8632593b2ea9b2caaebf219ec7586e9d6962353f98b2882fb804a34b16946453038127de73f4e827b190f6001b7a5560b7eb978f8",
          "first_hop": {
            "id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
            "channel": "110x1x0",
            "direction": 1,
            "amount_msat": 1002,
            "delay": 21,
            "style": "tlv"
          },
          "payment_hash": "47c148c1746366e4c2c7496621c22002bc2711b4d9c52cbb9c7b1fdca59c8579"
        }
      },
      "response": {
        "message": "Monitor status with listpays or waitsendpay",
        "created_index": 10,
        "id": 10,
        "payment_hash": "47c148c1746366e4c2c7496621c22002bc2711b4d9c52cbb9c7b1fdca59c8579",
        "groupid": 1,
        "amount_sent_msat": 1002,
        "created_at": 1738000000,
        "status": "pending"
      }
    }
  ]
}
