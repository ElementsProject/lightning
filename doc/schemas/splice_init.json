{
  "$schema": "../rpc-schema-draft.json",
  "type": "object",
  "added": "v23.08",
  "rpc": "splice_init",
  "title": "Command to initiate a channel to a peer",
  "warning": "experimental-splicing only",
  "description": [
    "`splice_init` is a low level RPC command which initiates a channel splice for a given channel specified by `channel_id`."
  ],
  "request": {
    "required": [
      "channel_id",
      "relative_amount"
    ],
    "additionalProperties": false,
    "properties": {
      "channel_id": {
        "type": "hash",
        "description": [
          "The channel id of the channel to be spliced."
        ]
      },
      "relative_amount": {
        "type": "integer",
        "description": [
          "A positive or negative amount of satoshis to add or subtract from the channel. Note you may need to add a double dash (--) after splice_init if using a negative *relative_amount* so it is not interpretted as a command modifier. For example:",
          "```shell",
          "lightning-cli splice_init -- $CHANNEL_ID -100000",
          "```"
        ]
      },
      "initialpsbt": {
        "type": "string",
        "description": [
          "The (optional) base 64 encoded PSBT to begin with. If not specified, one will be generated automatically."
        ]
      },
      "feerate_per_kw": {
        "type": "u32",
        "description": [
          "The miner fee we promise our peer to pay for our side of the splice transaction. It is calculated by `feerate_per_kw` * our_bytes_in_splice_tx / 1000."
        ]
      },
      "force_feerate": {
        "type": "boolean",
        "description": [
          "By default splices will fail if the fee provided looks too high. This is to protect against accidentally setting your fee higher than intended. Set `force_feerate` to true to skip this saftey check."
        ]
      }
    }
  },
  "response": {
    "required": [
      "psbt"
    ],
    "additionalProperties": false,
    "properties": {
      "psbt": {
        "type": "string",
        "description": [
          "The (incomplete) PSBT of the splice transaction."
        ]
      }
    }
  },
  "usage": [
    "Here is an example set of splice commands that will splice in 100,000 sats to the first channel that comes out of `listpeerchannels`.",
    "",
    "The example assumes you already have at least one confirmed channel.",
    "",
    "1: Get the channel id of the first channel.",
    "",
    "```shell",
    "CHANNEL_ID=$(echo $(lightning-cli listpeerchannels) | jq -r \".channels[0].channel_id\")",
    "```",
    "2: Get the PSBT from fundpsbt.",
    "",
    "```shell",
    "INITIALPSBT=$(echo $(lightning-cli fundpsbt -k satoshi=100000sat feerate=urgent startweight=800 excess_as_change=true) | jq -r \".psbt\")",
    "```",
    "3: Initiate the splice by passing channel id and initialpsbt received from above steps.",
    "",
    "```shell",
    "PSBT_SPLICE_INIT=$(echo $(lightning-cli splice_init $CHANNEL_ID 100000 $INITIALPSBT) | jq -r \".psbt\")",
    "```",
    "4: Update the PSBT with the splice_update command.",
    "",
    "```shell",
    "PSBT_SPLICE_UPDATE=$(echo $(lightning-cli splice_update $CHANNEL_ID $PSBT_SPLICE_INIT) | jq -r \".psbt\")",
    "```",
    "5: Sign the updated PSBT.",
    "",
    "```shell",
    "SIGNPSBT=$(echo $(lightning-cli signpsbt -k psbt=\"$PSBT_SPLICE_UPDATE\") | jq -r \".signed_psbt\")",
    "```",
    "6: Finally, call splice_signed with channel id and signed PSBT parameters.",
    "",
    "```shell",
    "lightning-cli splice_signed $CHANNEL_ID $SIGNPSBT",
    "```"
  ],
  "author": [
    "Dusty <<@dusty_daemon>> is mainly responsible."
  ],
  "see_also": [
    "lightning-splice_signed(7)",
    "lightning-splice_update(7)"
  ],
  "resources": [
    "Main web site: <https://github.com/ElementsProject/lightning>"
  ],
  "examples": [
    {
      "request": {
        "id": "example:splice_init#1",
        "method": "splice_init",
        "params": {
          "channel_id": "8c69f1817bfe5402d7759cd829ae89ed7b16f0004fec1f3df9f5a5d3961f5f29",
          "relative_amount": 100000,
          "initialpsbt": "cHNidP8BAF4CAAAAAYxp8YF7/lQC13Wc2Cmuie17FvAAT+wfPfn1pdOWH18pAQAAAAD9////Aed8DQAAAAAAIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGCVAAAAAAEAiQIAAAABe8lhdLWTt3QqdEAA+Ye+EPU6s0fgfj6uSlpNyrejJXQBAAAAAP3///8CQEIPAAAAAAAiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJlgEvDwAAAAAAIlEgW7Q7f9oXFdDdAUFoJaGFIqLX7LFkdbiHgOj6/Bxz74mPAAAAAQErAS8PAAAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviQAA"
        }
      },
      "response": {
        "psbt": "cHNidP8BALICAAAAAoxp8YF7/lQC13Wc2Cmuie17FvAAT+wfPfn1pdOWH18pAQAAAAD9////jGnxgXv+VALXdZzYKa6J7XsW8ABP7B89+fWl05YfXykAAAAAAAAAAAAC53wNAAAAAAAiUSCPjtRGJ1V9vMxCrgGKnFR0qZEoV5LEyokcH1nFZl00YODIEAAAAAAAIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZaVAAAAAAEAiQIAAAABe8lhdLWTt3QqdEAA+Ye+EPU6s0fgfj6uSlpNyrejJXQBAAAAAP3///8CQEIPAAAAAAAiACCT3t0MJlvKhoV20+4uWe67sg68KW5Y9+3Kk9XursCJlgEvDwAAAAAAIlEgW7Q7f9oXFdDdAUFoJaGFIqLX7LFkdbiHgOj6/Bxz74mPAAAAAQErAS8PAAAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviQz8CWxpZ2h0bmluZwEI2+v9SbbITVQAAQCJAgAAAAF7yWF0tZO3dCp0QAD5h74Q9TqzR+B+Pq5KWk3Kt6MldAEAAAAA/f///wJAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWAS8PAAAAAAAiUSBbtDt/2hcV0N0BQWgloYUiotfssWR1uIeA6Pr8HHPviY8AAAABAStAQg8AAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWAQVHUiECVw7AtutUVmMwIYOmLqx10I/e62TzE1IZIGXWAcjKUh0hAmaGfDQrglCra07axtuuL95TeCtpzRcTmUn71PIISH/yUq4M/AlsaWdodG5pbmcBCN3r/Um2yE1UAAz8CWxpZ2h0bmluZwEI3+v9SbbITVQADPwJbGlnaHRuaW5nAQjh6/1JtshNVAA="
      }
    },
    {
      "request": {
        "id": "example:splice_init#2",
        "method": "splice_init",
        "params": [
          "8c69f1817bfe5402d7759cd829ae89ed7b16f0004fec1f3df9f5a5d3961f5f29",
          -105000,
          "cHNidP8BAgQCAAAAAQMElgAAAAEEAQABBQEBAQYBAwH7BAIAAAAAAQMIoIYBAAAAAAABBCJRIMTSgkFfmoHRjgi2GaGdEWuGVssb9JPl9UC797egWEzaAA=="
        ]
      },
      "response": {
        "psbt": "cHNidP8BAgQCAAAAAQMElgAAAAEEAQEBBQECAQYBAwH7BAIAAAAAAQCyAgAAAAKMafGBe/5UAtd1nNgprontexbwAE/sHz359aXTlh9fKQEAAAAA/f///4xp8YF7/lQC13Wc2Cmuie17FvAAT+wfPfn1pdOWH18pAAAAAAAAAAAAAud8DQAAAAAAIlEgj47URidVfbzMQq4BipxUdKmRKFeSxMqJHB9ZxWZdNGDgyBAAAAAAACIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWlQAAAAEBK+DIEAAAAAAAIgAgk97dDCZbyoaFdtPuLlnuu7IOvCluWPftypPV7q7AiZYBBUdSIQJXDsC261RWYzAhg6YurHXQj97rZPMTUhkgZdYByMpSHSECZoZ8NCuCUKtrTtrG264v3lN4K2nNFxOZSfvU8ghIf/JSrgEOIKKgpcI9Q+wEsS7RSRmjmYdS6mp201YJrWSI+o3lUYXdAQ8EAQAAAAEQBAAAAAAM/AlsaWdodG5pbmcBCOPr/Um2yE1UAAEDCKCGAQAAAAAAAQQiUSDE0oJBX5qB0Y4IthmhnRFrhlbLG/ST5fVAu/e3oFhM2gz8CWxpZ2h0bmluZwEI5ev9SbbITVQAAQMIuC4PAAAAAAABBCIAIJPe3QwmW8qGhXbT7i5Z7ruyDrwpblj37cqT1e6uwImWDPwJbGlnaHRuaW5nAQjn6/1JtshNVAA="
      }
    }
  ]
}
