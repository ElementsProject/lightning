{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "id",
    "amount",
    "initialpsbt"
  ],
  "properties": {
    "id": {
      "type": "pubkey",
      "description": "node id of the remote peer"
    },
    "amount": {
      "type": "sat",
      "description": "satoshi value that we will contribute to the channel. This value will be _added_ to the provided PSBT in the output which is encumbered by the 2-of-2 script for this channel"
    },
    "initialpsbt": {
      "type": "string",
      "description": "funded, incomplete PSBT that specifies the UTXOs and change output for our channel contribution. It can be updated, see `openchannel_update`;  *initialpsbt* must have at least one input. Must have the Non-Witness UTXO (PSBT_IN_NON_WITNESS_UTXO) set for every input. An error (code 309)  will be returned if this requirement is not met"
    },
    "commitment_feerate": {
      "type": "feerate",
      "description": "feerate for commitment transactions for non-anchor channels: see **fundchannel**. For anchor channels, it is ignored"
    },
    "funding_feerate": {
      "type": "feerate",
      "description": "feerate for the funding transaction. Defaults to 'opening' feerate"
    },
    "announce": {
      "type": "boolean",
      "description": "whether or not to announce this channel"
    },
    "close_to": {
      "type": "string",
      "description": "bitcoin address to which the channel funds should be sent on close. Only valid if both peers have negotiated `option_upfront_shutdown_script`"
    },
    "request_amt": {
      "type": "msat",
      "description": "an amount of liquidity you'd like to lease from the peer. If peer supports `option_will_fund`, indicates to them to include this much liquidity into the channel. Must also pass in *compact_lease*"
    },
    "compact_lease": {
      "type": "hex",
      "description": "a compact represenation of the peer's expected channel lease terms. If the peer's terms don't match this set, we will fail to open the channel"
    },
    "channel_type": {
      "type": "array",
      "description": "Each bit set in this channel_type",
      "items": {
        "type": "u32",
        "description": "Bit number"
      }
    }
  }
}
