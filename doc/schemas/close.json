{
  "$schema": "../rpc-schema-draft.json",
  "type": "object",
  "rpc": "close",
  "title": "Command for closing channels with direct peers",
  "description": [
    "The **close** RPC command attempts to close the channel cooperatively with the peer, or unilaterally after *unilateraltimeout*, and the to-local output will be sent to the address specified in *destination*.",
    "",
    "The peer needs to be live and connected in order to negotiate a mutual close. The default of unilaterally closing after 48 hours is usually a reasonable indication that you can no longer contact the peer."
  ],
  "request": {
    "required": [
      "id"
    ],
    "additionalProperties": true,
    "properties": {
      "id": {
        "type": "string",
        "description": [
          "Peer id, channel id or short_channel_id. If the given *id* is a peer ID (66 hex digits as a string), then it applies to the active channel of the direct peer corresponding to the given peer ID. If the given *id* is a channel ID (64 hex digits as a string, or the short channel ID *blockheight:txindex:outindex* form), then it applies to that channel."
        ]
      },
      "unilateraltimeout": {
        "type": "u32",
        "description": [
          "If it is not zero, the command will unilaterally close the channel when that number of seconds is reached. If *unilateraltimeout* is zero, then the command will wait indefinitely until the peer is online and can negotiate a mutual close."
        ],
        "default": "2 days (172800 seconds)"
      },
      "destination": {
        "type": "string",
        "description": [
          "Any Bitcoin bech32 type. If the peer hasn't offered the option_shutdown_anysegwit feature, then taproot addresses (or other v1+ segwit) are not allowed. Tell your friends to upgrade!"
        ],
        "default": "a Core Lightning wallet address"
      },
      "fee_negotiation_step": {
        "type": "string",
        "description": [
          "It controls how closing fee negotiation is performed assuming the peer proposes a fee that is different than our estimate. (Note that modern peers use the quick-close protocol which does not allow negotiation: see *feerange* instead).",
          "",
          "On every negotiation step we must give up some amount from our proposal towards the peer's proposal. This parameter can be an integer in which case it is interpreted as number of satoshis to step at a time. Or it can be an integer followed by `%` to designate a percentage of the interval to give up. A few examples, assuming the peer proposes a closing fee of 3000 satoshi and our estimate shows it must be 4000:",
          "    * `10`: our next proposal will be 4000-10=3990.",
          "    * `10%`: our next proposal will be 4000-(10% of (4000-3000))=3900.",
          "    * '1': our next proposal will be 3999. This is the most extreme case when we insist on our fee as much as possible.",
          "    * `100%`: our next proposal will be 3000. This is the most relaxed case when we quickly accept the peer's proposal."
        ],
        "default": "`50%`"
      },
      "wrong_funding": {
        "type": "outpoint",
        "description": [
          "It can only be specified if both sides have offered the `shutdown_wrong_funding` feature (enabled by the **experimental-shutdown-wrong-funding** option). It must be a transaction id followed by a colon then the output number. Instead of negotiating a shutdown to spend the expected funding transaction, the shutdown transaction will spend this output instead. This is only allowed if this peer opened the channel and the channel is unused: it can rescue openings which have been manually miscreated."
        ]
      },
      "force_lease_closed": {
        "type": "boolean",
        "description": [
          "If the channel has funds leased to the peer (option_will_fund), we prevent initiation of a mutual close unless this flag is passed in."
        ],
        "default": "False"
      },
      "feerange": {
        "type": "array",
        "items": {
          "type": "feerate"
        },
        "description": [
          "An optional array [ *min*, *max* ], indicating the minimum and maximum feerates to offer: the peer will obey these if it supports the quick-close protocol. *slow* and *unilateral_close* are the defaults. Note that the maximum fee will be capped at the final commitment transaction fee (unless the experimental anchor-outputs option is negotiated)."
        ]
      }
    }
  },
  "response": {
    "required": [
      "type"
    ],
    "additionalProperties": true,
    "properties": {
      "type": {
        "type": "string",
        "enum": [
          "mutual",
          "unilateral",
          "unopened"
        ],
        "description": [
          "Whether we successfully negotiated a mutual close, closed without them, or discarded not-yet-opened channel."
        ]
      }
    },
    "allOf": [
      {
        "if": {
          "additionalProperties": true,
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "mutual",
                "unilateral"
              ]
            }
          }
        },
        "then": {
          "additionalProperties": false,
          "required": [
            "txs",
            "txids"
          ],
          "properties": {
            "type": {},
            "tx": {
              "type": "hex",
              "deprecated": [
                "v24.11",
                "v25.12"
              ],
              "description": [
                "The raw bitcoin transaction used to close the channel (if it was open)."
              ]
            },
            "txid": {
              "type": "txid",
              "deprecated": [
                "v24.11",
                "v25.12"
              ],
              "description": [
                "The transaction id of the *tx* field."
              ]
            },
            "txs": {
              "added": "v24.11",
              "type": "array",
              "items": {
                "type": "hex"
              },
              "description": [
                "The raw bitcoin transactions used to close the channel (if it was open)."
              ]
            },
            "txids": {
              "added": "v24.11",
              "type": "array",
              "items": {
                "type": "txid"
              },
              "description": [
                "The transaction ids of the *tx* field(s)."
              ]
            }
          }
        },
        "else": {
          "additionalProperties": false,
          "properties": {
            "type": {}
          }
        }
      }
    ],
    "post_return_value_notes": [
      "A unilateral close may still occur at any time if the peer did not behave correctly during the close negotiation.",
      "",
      "Unilateral closes will return your funds after a delay. The delay will vary based on the peer *to_self_delay* setting, not your own setting."
    ]
  },
  "notes": [
    "Prior to 0.7.2, **close** took two parameters: *force* and *timeout*. *timeout* was the number of seconds before *force* took effect (default, 30), and *force* determined whether the result was a unilateral close or an RPC error (default). Even after the timeout, the channel would be closed if the peer reconnected."
  ],
  "notifications": [
    "Notifications may be returned indicating what is going on, especially if the peer is offline and we are waiting."
  ],
  "author": [
    "ZmnSCPxj <<ZmnSCPxj@protonmail.com>> is mainly responsible."
  ],
  "see_also": [
    "lightning-disconnect(7)",
    "lightning-fundchannel(7)",
    "lightningd-config(5)"
  ],
  "resources": [
    "Main web site: <https://github.com/ElementsProject/lightning>"
  ],
  "examples": [
    {
      "request": {
        "id": "example:close#1",
        "method": "close",
        "params": {
          "id": "035d2b1192dfba134e10e540875d366ebc8bc353d5aa766b80c090b39c3a5d885d",
          "unilateraltimeout": 1
        }
      },
      "response": {
        "tx": "02000000000101a92a6508defe049b47f2420c054cb1a446198faf4bfd74bb2479b3c45075ce7c0000000000ffffffff02026e07000000000022512085d72025e78fd08bb61119f0987ab0041f50561ada6e130c645343db8c44c2afeec8070000000000225120a7583f0c421663b8ca76fa579018b40682ef8553d73fd061cd8f216ecdced6a30400473044022064d1a5480d76bc71d44ee440a47ec30e7433812292ca8d4876e5e59cd2950e4802201ece394b4bcbf6ba3f21152236822cfb2eeed8e5897d3bf3499e9d7d1a5d092e01473044022068cd05fe53fa71118b643e5340ea3cd169a3ca655c64c0b30f78d720d79a957502200f14d30de4251cf016a3db3475fe5472772335b76dfc268dc173e6541026b1830147522102d595ae92b3544c3250fb772f214ad8d4c51425033740a5bcc357190add6d7e7a2102d6063d022691b2490ab454dee73a57c6ff5d308352b461ece69f3c284f2c241252ae00000000",
        "txid": "40b4acd3759ac69b5160488d73a5890a46bf4f013381e52e9171ee038b3c96d6",
        "txs": [
          "02000000000101a92a6508defe049b47f2420c054cb1a446198faf4bfd74bb2479b3c45075ce7c0000000000ffffffff02026e07000000000022512085d72025e78fd08bb61119f0987ab0041f50561ada6e130c645343db8c44c2afeec8070000000000225120a7583f0c421663b8ca76fa579018b40682ef8553d73fd061cd8f216ecdced6a30400473044022064d1a5480d76bc71d44ee440a47ec30e7433812292ca8d4876e5e59cd2950e4802201ece394b4bcbf6ba3f21152236822cfb2eeed8e5897d3bf3499e9d7d1a5d092e01473044022068cd05fe53fa71118b643e5340ea3cd169a3ca655c64c0b30f78d720d79a957502200f14d30de4251cf016a3db3475fe5472772335b76dfc268dc173e6541026b1830147522102d595ae92b3544c3250fb772f214ad8d4c51425033740a5bcc357190add6d7e7a2102d6063d022691b2490ab454dee73a57c6ff5d308352b461ece69f3c284f2c241252ae00000000"
        ],
        "txids": [
          "40b4acd3759ac69b5160488d73a5890a46bf4f013381e52e9171ee038b3c96d6"
        ],
        "type": "mutual"
      }
    },
    {
      "request": {
        "id": "example:close#2",
        "method": "close",
        "params": {
          "id": "0382ce59ebf18be7d84677c2e35f23294b9992ceca95491fcf8a56c6cb2d9de199",
          "destination": "bcrt1qwvp8fktkxp07v0fp9jyqe7yl6rcgyu585a7pzr"
        }
      },
      "response": {
        "tx": "02000000000101b6f77750c0aae7faf2aa6e4b38a14671adc8def298a0b89ced09596f002aa5ef0000000000ffffffff026b6f070000000000160014730274d976305fe63d212c880cf89fd0f08272873ac80700000000002251202bdd81f95d64ed2cc37d2eae725de428c91bff072d7503d87446970eedc630300400473044022008dec4948db1c9e4db4dcf8c223f554117e48c6aa0aac471de67c03163a82e4a0220018bdb9889230e0048a378efad73d3bec83c330baa727323d95ca86fe36301b701473044022022cec9df9ece54e1ca89888bdc19ed84e5202a93070d05aa9b3236f9990b440d0220376f7fd6edb49ad13596cdfd51d929a92d45bc88da3f16ed0777014a28025a2801475221021c29746e4136ddff456483df3980c2d0d5f31c93ef5ded564f7294a10d7414aa2103c47b1b2afcfd68c7b86c0976adb9a4f0835bc78242fced745d78433497a867d652ae00000000",
        "txid": "1aa6d7b0bb6c5d1dac62724caa4e26dc37ed8af5e747c836746987d28603fed2",
        "txs": [
          "02000000000101b6f77750c0aae7faf2aa6e4b38a14671adc8def298a0b89ced09596f002aa5ef0000000000ffffffff026b6f070000000000160014730274d976305fe63d212c880cf89fd0f08272873ac80700000000002251202bdd81f95d64ed2cc37d2eae725de428c91bff072d7503d87446970eedc630300400473044022008dec4948db1c9e4db4dcf8c223f554117e48c6aa0aac471de67c03163a82e4a0220018bdb9889230e0048a378efad73d3bec83c330baa727323d95ca86fe36301b701473044022022cec9df9ece54e1ca89888bdc19ed84e5202a93070d05aa9b3236f9990b440d0220376f7fd6edb49ad13596cdfd51d929a92d45bc88da3f16ed0777014a28025a2801475221021c29746e4136ddff456483df3980c2d0d5f31c93ef5ded564f7294a10d7414aa2103c47b1b2afcfd68c7b86c0976adb9a4f0835bc78242fced745d78433497a867d652ae00000000"
        ],
        "txids": [
          "1aa6d7b0bb6c5d1dac62724caa4e26dc37ed8af5e747c836746987d28603fed2"
        ],
        "type": "mutual"
      }
    }
  ]
}
