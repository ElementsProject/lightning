{
  "$schema": "../rpc-schema-draft.json",
  "type": "object",
  "additionalProperties": false,
  "rpc": "fundchannel",
  "title": "Command for establishing a lightning channel",
  "description": [
    "The **fundchannel** RPC command opens a payment channel with a peer by committing a funding transaction to the blockchain as defined in BOLT #2.",
    "",
    "If not already connected, **fundchannel** will automatically attempt to connect if Core Lightning knows a way to contact the node (either from normal gossip, or from a previous **connect** call).",
    "",
    "This auto-connection can fail if Core Lightning does not know how to contact the target node; see lightning-connect(7).",
    "",
    "Once the transaction is confirmed, normal channel operations may begin. Readiness is indicated by **listpeers** reporting a *state* of `CHANNELD_NORMAL` for the channel."
  ],
  "request": {
    "required": [
      "id",
      "amount"
    ],
    "properties": {
      "id": {
        "type": "pubkey",
        "description": [
          "Id is the peer id obtained from connect."
        ]
      },
      "amount": {
        "type": "sat_or_all",
        "description": [
          "The amount in satoshis taken from the internal wallet to fund the channel (but if we have any anchor channels, this will always leave at least `min-emergency- msat` as change). The string *all* can be used to specify all available funds (or 16777215 satoshi if more is available and large channels were not negotiated with the peer). Otherwise, it is in satoshi precision; it can be a whole number, a whole number ending in *sat*, a whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*. The value cannot be less than the dust limit, currently set to 546, nor more than 16777215 satoshi (unless large channels were negotiated with the peer)."
        ]
      },
      "feerate": {
        "type": "feerate",
        "description": [
          "Used for the opening transaction and (unless *option_anchors_zero_fee_htlc_tx* is negotiated), as initial feerate for commitment and HTLC transactions (see NOTES in lightning-feerates(7))."
        ],
        "default": "*normal*"
      },
      "announce": {
        "type": "boolean",
        "description": [
          "Whether to announce this channel or not. An unannounced channel is considered private."
        ],
        "default": "True"
      },
      "minconf": {
        "type": "u32",
        "description": [
          "The minimum number of confirmations that used outputs should have."
        ],
        "default": "1"
      },
      "push_msat": {
        "type": "msat",
        "description": [
          "The amount of millisatoshis to push to the channel peer at open. Note that this is a gift to the peer -- these satoshis are added to the initial balance of the peer at channel start and are largely unrecoverable once pushed."
        ]
      },
      "close_to": {
        "type": "string",
        "description": [
          "A Bitcoin address to which the channel funds should be sent to on close. Only valid if both peers have negotiated `option_upfront_shutdown_script`. Returns `close_to` set to closing script iff is negotiated."
        ]
      },
      "request_amt": {
        "type": "sat",
        "description": [
          "An amount of liquidity you'd like to lease from the peer. If peer supports `option_will_fund`, indicates to them to include this much liquidity into the channel. Must also pass in *compact_lease*."
        ]
      },
      "compact_lease": {
        "type": "string",
        "description": [
          "A compact representation of the peer's expected channel lease terms. If the peer's terms don't match this set, we will fail to open the channel."
        ]
      },
      "utxos": {
        "type": "array",
        "description": [
          "The utxos to be used to fund the channel, as an array of `txid:vout`."
        ],
        "items": {
          "type": "outpoint"
        }
      },
      "mindepth": {
        "description": [
          "Number of confirmations required before we consider the channel active."
        ],
        "type": "u32"
      },
      "reserve": {
        "type": "sat",
        "description": [
          "The amount we want the peer to maintain on its side of the channel. It can be a whole number, a whole number ending in *sat*, a whole number ending in *000msat*, or a number with 1 to 8 decimal places ending in *btc*."
        ],
        "default": "1% of the funding amount"
      },
      "channel_type": {
        "added": "v24.02",
        "type": "array",
        "items": {
          "type": "u32",
          "description": [
            "Represents the explicit channel type to request. There is currently no sanity checking on this value so if you use strange values and your channel breaks, you get to keep both pieces. BOLT 2 defines the following value types:",
            "```",
            "The currently defined basic types are:",
            "  - no features (no bits set).",
            "  - `option_static_remotekey` (bit 12).",
            "  - `option_anchor_outputs` and `option_static_remotekey` (bits 20 and 12).",
            "  - `option_anchors_zero_fee_htlc_tx` and `option_static_remotekey` (bits 22 and 12).",
            "",
            "Each basic type has the following variations allowed:",
            "  - `option_scid_alias` (bit 46).",
            "  - `option_zeroconf` (bit 50).",
            "```"
          ]
        }
      }
    }
  },
  "response": {
    "required": [
      "tx",
      "txid",
      "outnum",
      "channel_type",
      "channel_id"
    ],
    "properties": {
      "tx": {
        "type": "hex",
        "description": [
          "The raw transaction which funded the channel."
        ]
      },
      "txid": {
        "type": "txid",
        "description": [
          "The txid of the transaction which funded the channel."
        ]
      },
      "outnum": {
        "type": "u32",
        "description": [
          "The 0-based output index showing which output funded the channel."
        ]
      },
      "channel_id": {
        "type": "hash",
        "description": [
          "The channel_id of the resulting channel."
        ]
      },
      "channel_type": {
        "type": "object",
        "description": [
          "Channel_type as negotiated with peer."
        ],
        "added": "v24.02",
        "additionalProperties": false,
        "required": [
          "bits",
          "names"
        ],
        "properties": {
          "bits": {
            "type": "array",
            "description": [
              "Each bit set in this channel_type."
            ],
            "added": "v24.02",
            "items": {
              "type": "u32",
              "description": [
                "Bit number."
              ]
            }
          },
          "names": {
            "type": "array",
            "description": [
              "Feature name for each bit set in this channel_type."
            ],
            "added": "v24.02",
            "items": {
              "type": "string",
              "enum": [
                "static_remotekey/even",
                "anchor_outputs/even",
                "anchors_zero_fee_htlc_tx/even",
                "scid_alias/even",
                "zeroconf/even"
              ],
              "description": [
                "Name of feature bit."
              ]
            }
          }
        }
      },
      "close_to": {
        "type": "hex",
        "description": [
          "The raw scriptPubkey which mutual close will go to; only present if *close_to* parameter was specified and peer supports `option_upfront_shutdown_script`."
        ]
      },
      "mindepth": {
        "type": "u32",
        "description": [
          "Number of confirmations before we consider the channel active."
        ]
      }
    }
  },
  "example_usage": [
    "This example shows how to use lightning-cli to open new channel with peer 03f...fc1 from one whole utxo bcc1...39c:0 (you can use **listfunds** command to get txid and vout):",
    "",
    "```shell",
    "lightning-cli -k fundchannel id=03f...fc1 amount=all feerate=normal utxos='[\"bcc1...39c:0\"]'",
    "```"
  ],
  "json_example": [
    {
      "request": {
        "id": "example:fundchannel#1",
        "method": "fundchannel",
        "params": {
          "id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
          "amount": 1000000,
          "feerate": null,
          "announce": true,
          "minconf": null,
          "utxos": null,
          "push_msat": null,
          "close_to": null,
          "request_amt": null,
          "compact_lease": null,
          "mindepth": null,
          "reserve": null
        }
      },
      "response": {
        "tx": "020000000001014ca47b75e6982fce6b5ebb6e7ec163dc5b6bed1562934e6febe816103b2b207e0000000000fdffffff0240420f00000000002200205b8cd3b914cf67cdd8fa6273c930353dd36476734fbd962102c2df53b90880cd012f0f000000000022512063ffee4ea7d51e6cadf9086e286a2527922aaa25b8c53aebf32fa32a0a627f5a02473044022058fc4d51c8254d37b266d3db3f8fda7420882b6ec9226d66b8c0139f2707c09602205798d8ce23d4c692a7384362a2e0afd9703f062239a786d7a1840a28d3a1152e012103d745445c9362665f22e0d96e9e766f273f3260dea39c8a76bfa05dd2684ddccf66000000",
        "txid": "6c0a3d8f32f556f3bd8b8c85413c4636a9513c6195abb925ea73c47183d40b7b",
        "channel_id": "7b0bd48371c473ea25b9ab95613c51a936463c41858c8bbdf356f5328f3d0a6c",
        "outnum": 0
      }
    },
    {
      "request": {
        "id": "example:fundchannel#2",
        "method": "fundchannel",
        "params": {
          "id": "022d223620a359a47ff7f7ac447c85c46c923da53389221a0054c11c1e3ca31d59",
          "amount": 10000000,
          "feerate": null,
          "announce": true,
          "minconf": null,
          "utxos": null,
          "push_msat": 1000000000,
          "close_to": null,
          "request_amt": null,
          "compact_lease": null,
          "mindepth": null,
          "reserve": null,
          "channel_type": null
        }
      },
      "response": {
        "tx": "0200000000010141cfa0e9957c7c6d0bb5069d92937f9545e6e6ee9b4650f47f509d5ea65df4690100000000fdffffff0280969800000000002200205b8cd3b914cf67cdd8fa6273c930353dd36476734fbd962102c2df53b90880cd4118530b0000000022512063ffee4ea7d51e6cadf9086e286a2527922aaa25b8c53aebf32fa32a0a627f5a0247304402206488c7dfbc4180781ed0d5ca7ff2c8ce134480c349d03978765053a393229d9a022066c75dee1f19b410ea1c7756d0cb2c097e52b13f4d9bbd033efa4ed95d817e14012103d745445c9362665f22e0d96e9e766f273f3260dea39c8a76bfa05dd2684ddccf66000000",
        "txid": "6aa1231b6356777468a55aea1f49dad6415592aef6c1e652f8a64357c7235301",
        "channel_id": "015323c75743a6f852e6c1f6ae925541d6da491fea5aa568747756631b23a16a",
        "channel_type": {
          "bits": [
            12,
            22
          ],
          "names": [
            "static_remotekey/even",
            "anchors_zero_fee_htlc_tx/even"
          ]
        },
        "outnum": 0
      }
    }
  ],
  "errors": [
    "The following error codes may occur:",
    "",
    "- -1: Catchall nonspecific error.",
    "- 300: The maximum allowed funding amount is exceeded.",
    "- 301: There are not enough funds in the internal wallet (including fees) to create the transaction.",
    "- 302: The output amount is too small, and would be considered dust.",
    "- 303: Broadcasting of the funding transaction failed, the internal call to bitcoin-cli returned with an error.",
    "- 313: The `min-emergency-msat` reserve not be preserved (and we have or are opening anchor channels).",
    "",
    "Failure may also occur if **lightningd** and the peer cannot agree on channel parameters (funding limits, channel reserves, fees, etc.)."
  ],
  "see_also": [
    "lightning-connect(7)",
    "lightning-listfunds()",
    "lightning-listpeers(7)",
    "lightning-feerates(7)",
    "lightning-multifundchannel(7)"
  ],
  "resources": [
    "Main web site: <https://github.com/ElementsProject/lightning>"
  ]
}
